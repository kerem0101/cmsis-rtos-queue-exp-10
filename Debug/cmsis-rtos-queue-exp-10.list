
cmsis-rtos-queue-exp-10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b7c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08004c3c  08004c3c  00014c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d94  08004d94  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004d94  08004d94  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d94  08004d94  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d94  08004d94  00014d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d98  08004d98  00014d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010ac  20000070  08004e0c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000111c  08004e0c  0002111c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001201d  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002973  00000000  00000000  000320b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00034a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  00035af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012b42  00000000  00000000  00036ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012bd3  00000000  00000000  000495f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000716aa  00000000  00000000  0005c1c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd86f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f98  00000000  00000000  000cd8c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004c24 	.word	0x08004c24

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004c24 	.word	0x08004c24

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	60f8      	str	r0, [r7, #12]
 800024c:	60b9      	str	r1, [r7, #8]
 800024e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	4a06      	ldr	r2, [pc, #24]	; (800026c <vApplicationGetIdleTaskMemory+0x28>)
 8000254:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	4a05      	ldr	r2, [pc, #20]	; (8000270 <vApplicationGetIdleTaskMemory+0x2c>)
 800025a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2280      	movs	r2, #128	; 0x80
 8000260:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	46bd      	mov	sp, r7
 8000266:	b004      	add	sp, #16
 8000268:	bd80      	pop	{r7, pc}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	2000008c 	.word	0x2000008c
 8000270:	200000e0 	.word	0x200000e0

08000274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000274:	b5b0      	push	{r4, r5, r7, lr}
 8000276:	b09a      	sub	sp, #104	; 0x68
 8000278:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027a:	f000 fb1d 	bl	80008b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027e:	f000 f859 	bl	8000334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000282:	f000 f8d3 	bl	800042c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000286:	f000 f8a1 	bl	80003cc <MX_USART2_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of queue */
  osMessageQDef(queue, 10, int32_t);
 800028a:	2158      	movs	r1, #88	; 0x58
 800028c:	187b      	adds	r3, r7, r1
 800028e:	4a21      	ldr	r2, [pc, #132]	; (8000314 <main+0xa0>)
 8000290:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000292:	c331      	stmia	r3!, {r0, r4, r5}
 8000294:	6812      	ldr	r2, [r2, #0]
 8000296:	601a      	str	r2, [r3, #0]
  queueHandle = osMessageCreate(osMessageQ(queue), NULL);
 8000298:	187b      	adds	r3, r7, r1
 800029a:	2100      	movs	r1, #0
 800029c:	0018      	movs	r0, r3
 800029e:	f002 f96b 	bl	8002578 <osMessageCreate>
 80002a2:	0002      	movs	r2, r0
 80002a4:	4b1c      	ldr	r3, [pc, #112]	; (8000318 <main+0xa4>)
 80002a6:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of senderTask2 */
  osThreadDef(senderTask2, sender, osPriorityNormal, 0, 128);
 80002a8:	213c      	movs	r1, #60	; 0x3c
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	4a1b      	ldr	r2, [pc, #108]	; (800031c <main+0xa8>)
 80002ae:	ca31      	ldmia	r2!, {r0, r4, r5}
 80002b0:	c331      	stmia	r3!, {r0, r4, r5}
 80002b2:	ca31      	ldmia	r2!, {r0, r4, r5}
 80002b4:	c331      	stmia	r3!, {r0, r4, r5}
 80002b6:	6812      	ldr	r2, [r2, #0]
 80002b8:	601a      	str	r2, [r3, #0]
  senderTask2Handle = osThreadCreate(osThread(senderTask2), (void*)200);
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	21c8      	movs	r1, #200	; 0xc8
 80002be:	0018      	movs	r0, r3
 80002c0:	f002 f8f9 	bl	80024b6 <osThreadCreate>
 80002c4:	0002      	movs	r2, r0
 80002c6:	4b16      	ldr	r3, [pc, #88]	; (8000320 <main+0xac>)
 80002c8:	601a      	str	r2, [r3, #0]

  /* definition and creation of senderTask1 */
  osThreadDef(senderTask1, sender, osPriorityNormal, 0, 128);
 80002ca:	2120      	movs	r1, #32
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	4a15      	ldr	r2, [pc, #84]	; (8000324 <main+0xb0>)
 80002d0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80002d2:	c331      	stmia	r3!, {r0, r4, r5}
 80002d4:	ca31      	ldmia	r2!, {r0, r4, r5}
 80002d6:	c331      	stmia	r3!, {r0, r4, r5}
 80002d8:	6812      	ldr	r2, [r2, #0]
 80002da:	601a      	str	r2, [r3, #0]
  senderTask1Handle = osThreadCreate(osThread(senderTask1), (void*)100);
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2164      	movs	r1, #100	; 0x64
 80002e0:	0018      	movs	r0, r3
 80002e2:	f002 f8e8 	bl	80024b6 <osThreadCreate>
 80002e6:	0002      	movs	r2, r0
 80002e8:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <main+0xb4>)
 80002ea:	601a      	str	r2, [r3, #0]

  /* definition and creation of receiverTask */
  osThreadDef(receiverTask, receiver, osPriorityAboveNormal, 0, 128);
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	4a0f      	ldr	r2, [pc, #60]	; (800032c <main+0xb8>)
 80002f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002f2:	c313      	stmia	r3!, {r0, r1, r4}
 80002f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002f6:	c313      	stmia	r3!, {r0, r1, r4}
 80002f8:	6812      	ldr	r2, [r2, #0]
 80002fa:	601a      	str	r2, [r3, #0]
  receiverTaskHandle = osThreadCreate(osThread(receiverTask), NULL);
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2100      	movs	r1, #0
 8000300:	0018      	movs	r0, r3
 8000302:	f002 f8d8 	bl	80024b6 <osThreadCreate>
 8000306:	0002      	movs	r2, r0
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <main+0xbc>)
 800030a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800030c:	f002 f8cb 	bl	80024a6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000310:	e7fe      	b.n	8000310 <main+0x9c>
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	08004c64 	.word	0x08004c64
 8000318:	20000374 	.word	0x20000374
 800031c:	08004c74 	.word	0x08004c74
 8000320:	20000368 	.word	0x20000368
 8000324:	08004c90 	.word	0x08004c90
 8000328:	2000036c 	.word	0x2000036c
 800032c:	08004cac 	.word	0x08004cac
 8000330:	20000370 	.word	0x20000370

08000334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000334:	b590      	push	{r4, r7, lr}
 8000336:	b091      	sub	sp, #68	; 0x44
 8000338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033a:	2410      	movs	r4, #16
 800033c:	193b      	adds	r3, r7, r4
 800033e:	0018      	movs	r0, r3
 8000340:	2330      	movs	r3, #48	; 0x30
 8000342:	001a      	movs	r2, r3
 8000344:	2100      	movs	r1, #0
 8000346:	f004 f804 	bl	8004352 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034a:	003b      	movs	r3, r7
 800034c:	0018      	movs	r0, r3
 800034e:	2310      	movs	r3, #16
 8000350:	001a      	movs	r2, r3
 8000352:	2100      	movs	r1, #0
 8000354:	f003 fffd 	bl	8004352 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000358:	0021      	movs	r1, r4
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2202      	movs	r2, #2
 800035e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2201      	movs	r2, #1
 8000364:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000366:	187b      	adds	r3, r7, r1
 8000368:	2210      	movs	r2, #16
 800036a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2202      	movs	r2, #2
 8000370:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2280      	movs	r2, #128	; 0x80
 8000376:	0212      	lsls	r2, r2, #8
 8000378:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2280      	movs	r2, #128	; 0x80
 800037e:	0352      	lsls	r2, r2, #13
 8000380:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000382:	187b      	adds	r3, r7, r1
 8000384:	2200      	movs	r2, #0
 8000386:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000388:	187b      	adds	r3, r7, r1
 800038a:	0018      	movs	r0, r3
 800038c:	f000 fd00 	bl	8000d90 <HAL_RCC_OscConfig>
 8000390:	1e03      	subs	r3, r0, #0
 8000392:	d001      	beq.n	8000398 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000394:	f000 f93e 	bl	8000614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000398:	003b      	movs	r3, r7
 800039a:	2207      	movs	r2, #7
 800039c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800039e:	003b      	movs	r3, r7
 80003a0:	2202      	movs	r2, #2
 80003a2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a4:	003b      	movs	r3, r7
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003aa:	003b      	movs	r3, r7
 80003ac:	2200      	movs	r2, #0
 80003ae:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003b0:	003b      	movs	r3, r7
 80003b2:	2101      	movs	r1, #1
 80003b4:	0018      	movs	r0, r3
 80003b6:	f001 f809 	bl	80013cc <HAL_RCC_ClockConfig>
 80003ba:	1e03      	subs	r3, r0, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80003be:	f000 f929 	bl	8000614 <Error_Handler>
  }
}
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	46bd      	mov	sp, r7
 80003c6:	b011      	add	sp, #68	; 0x44
 80003c8:	bd90      	pop	{r4, r7, pc}
	...

080003cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003d0:	4b14      	ldr	r3, [pc, #80]	; (8000424 <MX_USART2_UART_Init+0x58>)
 80003d2:	4a15      	ldr	r2, [pc, #84]	; (8000428 <MX_USART2_UART_Init+0x5c>)
 80003d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003d6:	4b13      	ldr	r3, [pc, #76]	; (8000424 <MX_USART2_UART_Init+0x58>)
 80003d8:	2296      	movs	r2, #150	; 0x96
 80003da:	0212      	lsls	r2, r2, #8
 80003dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003de:	4b11      	ldr	r3, [pc, #68]	; (8000424 <MX_USART2_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003e4:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <MX_USART2_UART_Init+0x58>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ea:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <MX_USART2_UART_Init+0x58>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <MX_USART2_UART_Init+0x58>)
 80003f2:	220c      	movs	r2, #12
 80003f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <MX_USART2_UART_Init+0x58>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003fc:	4b09      	ldr	r3, [pc, #36]	; (8000424 <MX_USART2_UART_Init+0x58>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000402:	4b08      	ldr	r3, [pc, #32]	; (8000424 <MX_USART2_UART_Init+0x58>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <MX_USART2_UART_Init+0x58>)
 800040a:	2200      	movs	r2, #0
 800040c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800040e:	4b05      	ldr	r3, [pc, #20]	; (8000424 <MX_USART2_UART_Init+0x58>)
 8000410:	0018      	movs	r0, r3
 8000412:	f001 fbab 	bl	8001b6c <HAL_UART_Init>
 8000416:	1e03      	subs	r3, r0, #0
 8000418:	d001      	beq.n	800041e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800041a:	f000 f8fb 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	200002e0 	.word	0x200002e0
 8000428:	40004400 	.word	0x40004400

0800042c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800042c:	b590      	push	{r4, r7, lr}
 800042e:	b089      	sub	sp, #36	; 0x24
 8000430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000432:	240c      	movs	r4, #12
 8000434:	193b      	adds	r3, r7, r4
 8000436:	0018      	movs	r0, r3
 8000438:	2314      	movs	r3, #20
 800043a:	001a      	movs	r2, r3
 800043c:	2100      	movs	r1, #0
 800043e:	f003 ff88 	bl	8004352 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000442:	4b2d      	ldr	r3, [pc, #180]	; (80004f8 <MX_GPIO_Init+0xcc>)
 8000444:	695a      	ldr	r2, [r3, #20]
 8000446:	4b2c      	ldr	r3, [pc, #176]	; (80004f8 <MX_GPIO_Init+0xcc>)
 8000448:	2180      	movs	r1, #128	; 0x80
 800044a:	0309      	lsls	r1, r1, #12
 800044c:	430a      	orrs	r2, r1
 800044e:	615a      	str	r2, [r3, #20]
 8000450:	4b29      	ldr	r3, [pc, #164]	; (80004f8 <MX_GPIO_Init+0xcc>)
 8000452:	695a      	ldr	r2, [r3, #20]
 8000454:	2380      	movs	r3, #128	; 0x80
 8000456:	031b      	lsls	r3, r3, #12
 8000458:	4013      	ands	r3, r2
 800045a:	60bb      	str	r3, [r7, #8]
 800045c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800045e:	4b26      	ldr	r3, [pc, #152]	; (80004f8 <MX_GPIO_Init+0xcc>)
 8000460:	695a      	ldr	r2, [r3, #20]
 8000462:	4b25      	ldr	r3, [pc, #148]	; (80004f8 <MX_GPIO_Init+0xcc>)
 8000464:	2180      	movs	r1, #128	; 0x80
 8000466:	03c9      	lsls	r1, r1, #15
 8000468:	430a      	orrs	r2, r1
 800046a:	615a      	str	r2, [r3, #20]
 800046c:	4b22      	ldr	r3, [pc, #136]	; (80004f8 <MX_GPIO_Init+0xcc>)
 800046e:	695a      	ldr	r2, [r3, #20]
 8000470:	2380      	movs	r3, #128	; 0x80
 8000472:	03db      	lsls	r3, r3, #15
 8000474:	4013      	ands	r3, r2
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800047a:	4b1f      	ldr	r3, [pc, #124]	; (80004f8 <MX_GPIO_Init+0xcc>)
 800047c:	695a      	ldr	r2, [r3, #20]
 800047e:	4b1e      	ldr	r3, [pc, #120]	; (80004f8 <MX_GPIO_Init+0xcc>)
 8000480:	2180      	movs	r1, #128	; 0x80
 8000482:	0289      	lsls	r1, r1, #10
 8000484:	430a      	orrs	r2, r1
 8000486:	615a      	str	r2, [r3, #20]
 8000488:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <MX_GPIO_Init+0xcc>)
 800048a:	695a      	ldr	r2, [r3, #20]
 800048c:	2380      	movs	r3, #128	; 0x80
 800048e:	029b      	lsls	r3, r3, #10
 8000490:	4013      	ands	r3, r2
 8000492:	603b      	str	r3, [r7, #0]
 8000494:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000496:	2390      	movs	r3, #144	; 0x90
 8000498:	05db      	lsls	r3, r3, #23
 800049a:	2200      	movs	r2, #0
 800049c:	2120      	movs	r1, #32
 800049e:	0018      	movs	r0, r3
 80004a0:	f000 fc58 	bl	8000d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	2280      	movs	r2, #128	; 0x80
 80004a8:	0192      	lsls	r2, r2, #6
 80004aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	2284      	movs	r2, #132	; 0x84
 80004b0:	0392      	lsls	r2, r2, #14
 80004b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ba:	193b      	adds	r3, r7, r4
 80004bc:	4a0f      	ldr	r2, [pc, #60]	; (80004fc <MX_GPIO_Init+0xd0>)
 80004be:	0019      	movs	r1, r3
 80004c0:	0010      	movs	r0, r2
 80004c2:	f000 fad7 	bl	8000a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004c6:	0021      	movs	r1, r4
 80004c8:	187b      	adds	r3, r7, r1
 80004ca:	2220      	movs	r2, #32
 80004cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	2201      	movs	r2, #1
 80004d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	187b      	adds	r3, r7, r1
 80004d6:	2200      	movs	r2, #0
 80004d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	2200      	movs	r2, #0
 80004de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e0:	187a      	adds	r2, r7, r1
 80004e2:	2390      	movs	r3, #144	; 0x90
 80004e4:	05db      	lsls	r3, r3, #23
 80004e6:	0011      	movs	r1, r2
 80004e8:	0018      	movs	r0, r3
 80004ea:	f000 fac3 	bl	8000a74 <HAL_GPIO_Init>

}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	b009      	add	sp, #36	; 0x24
 80004f4:	bd90      	pop	{r4, r7, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	40021000 	.word	0x40021000
 80004fc:	48000800 	.word	0x48000800

08000500 <sender>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_sender */
void sender(void const * argument)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  int32_t val;
  osStatus status;

  val = (int32_t) argument;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {

	status = osMessagePut (queueHandle, val, 100);
 800050c:	4b0b      	ldr	r3, [pc, #44]	; (800053c <sender+0x3c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	68f9      	ldr	r1, [r7, #12]
 8000512:	2264      	movs	r2, #100	; 0x64
 8000514:	0018      	movs	r0, r3
 8000516:	f002 f857 	bl	80025c8 <osMessagePut>
 800051a:	0003      	movs	r3, r0
 800051c:	60bb      	str	r3, [r7, #8]
    if(osOK != status){
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d006      	beq.n	8000532 <sender+0x32>
    	//error
    	uartPrint("Could not send to the queue.\r\n");
 8000524:	23fa      	movs	r3, #250	; 0xfa
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	4905      	ldr	r1, [pc, #20]	; (8000540 <sender+0x40>)
 800052a:	4806      	ldr	r0, [pc, #24]	; (8000544 <sender+0x44>)
 800052c:	221e      	movs	r2, #30
 800052e:	f001 fb71 	bl	8001c14 <HAL_UART_Transmit>
    }
    osDelay(5000);
 8000532:	4b05      	ldr	r3, [pc, #20]	; (8000548 <sender+0x48>)
 8000534:	0018      	movs	r0, r3
 8000536:	f002 f80b 	bl	8002550 <osDelay>
	status = osMessagePut (queueHandle, val, 100);
 800053a:	e7e7      	b.n	800050c <sender+0xc>
 800053c:	20000374 	.word	0x20000374
 8000540:	08004cc8 	.word	0x08004cc8
 8000544:	200002e0 	.word	0x200002e0
 8000548:	00001388 	.word	0x00001388

0800054c <receiver>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_receiver */
void receiver(void const * argument)
{
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b087      	sub	sp, #28
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN receiver */

  osEvent event;
  char str[3];

  osDelay(10000);
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <receiver+0x88>)
 8000556:	0018      	movs	r0, r3
 8000558:	f001 fffa 	bl	8002550 <osDelay>

//	if(osMessageWaiting(queueHandle) != 0){
//	  uartPrint("Queue should have been empty!\r\n");
//	}

	event = osMessageGet (queueHandle, 100);
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <receiver+0x8c>)
 800055e:	6819      	ldr	r1, [r3, #0]
 8000560:	240c      	movs	r4, #12
 8000562:	193b      	adds	r3, r7, r4
 8000564:	2264      	movs	r2, #100	; 0x64
 8000566:	0018      	movs	r0, r3
 8000568:	f002 f86a 	bl	8002640 <osMessageGet>

	if(osEventMessage == event.status){
 800056c:	193b      	adds	r3, r7, r4
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b10      	cmp	r3, #16
 8000572:	d122      	bne.n	80005ba <receiver+0x6e>
		uartPrint("Received:");
 8000574:	23fa      	movs	r3, #250	; 0xfa
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	4918      	ldr	r1, [pc, #96]	; (80005dc <receiver+0x90>)
 800057a:	4819      	ldr	r0, [pc, #100]	; (80005e0 <receiver+0x94>)
 800057c:	2209      	movs	r2, #9
 800057e:	f001 fb49 	bl	8001c14 <HAL_UART_Transmit>
		sprintf(str, "%ld", event.value.v);
 8000582:	193b      	adds	r3, r7, r4
 8000584:	685a      	ldr	r2, [r3, #4]
 8000586:	4917      	ldr	r1, [pc, #92]	; (80005e4 <receiver+0x98>)
 8000588:	2408      	movs	r4, #8
 800058a:	193b      	adds	r3, r7, r4
 800058c:	0018      	movs	r0, r3
 800058e:	f003 fee9 	bl	8004364 <siprintf>
		uartPrint((uint8_t*)str);
 8000592:	193b      	adds	r3, r7, r4
 8000594:	0018      	movs	r0, r3
 8000596:	f7ff fdb7 	bl	8000108 <strlen>
 800059a:	0003      	movs	r3, r0
 800059c:	b29a      	uxth	r2, r3
 800059e:	23fa      	movs	r3, #250	; 0xfa
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	1939      	adds	r1, r7, r4
 80005a4:	480e      	ldr	r0, [pc, #56]	; (80005e0 <receiver+0x94>)
 80005a6:	f001 fb35 	bl	8001c14 <HAL_UART_Transmit>
		uartPrint("\r\n");
 80005aa:	23fa      	movs	r3, #250	; 0xfa
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	490e      	ldr	r1, [pc, #56]	; (80005e8 <receiver+0x9c>)
 80005b0:	480b      	ldr	r0, [pc, #44]	; (80005e0 <receiver+0x94>)
 80005b2:	2202      	movs	r2, #2
 80005b4:	f001 fb2e 	bl	8001c14 <HAL_UART_Transmit>
 80005b8:	e006      	b.n	80005c8 <receiver+0x7c>
	}
	else{
		uartPrint("Could not receive from the queue.\r\n");
 80005ba:	23fa      	movs	r3, #250	; 0xfa
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	490b      	ldr	r1, [pc, #44]	; (80005ec <receiver+0xa0>)
 80005c0:	4807      	ldr	r0, [pc, #28]	; (80005e0 <receiver+0x94>)
 80005c2:	2223      	movs	r2, #35	; 0x23
 80005c4:	f001 fb26 	bl	8001c14 <HAL_UART_Transmit>
	}

	osDelay(1000);
 80005c8:	23fa      	movs	r3, #250	; 0xfa
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 ffbf 	bl	8002550 <osDelay>
	event = osMessageGet (queueHandle, 100);
 80005d2:	e7c3      	b.n	800055c <receiver+0x10>
 80005d4:	00002710 	.word	0x00002710
 80005d8:	20000374 	.word	0x20000374
 80005dc:	08004ce8 	.word	0x08004ce8
 80005e0:	200002e0 	.word	0x200002e0
 80005e4:	08004cf4 	.word	0x08004cf4
 80005e8:	08004cf8 	.word	0x08004cf8
 80005ec:	08004cfc 	.word	0x08004cfc

080005f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d101      	bne.n	8000606 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000602:	f000 f96d 	bl	80008e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b002      	add	sp, #8
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	40012c00 	.word	0x40012c00

08000614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061c:	e7fe      	b.n	800061c <Error_Handler+0x8>
	...

08000620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <HAL_MspInit+0x50>)
 8000628:	699a      	ldr	r2, [r3, #24]
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <HAL_MspInit+0x50>)
 800062c:	2101      	movs	r1, #1
 800062e:	430a      	orrs	r2, r1
 8000630:	619a      	str	r2, [r3, #24]
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <HAL_MspInit+0x50>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	2201      	movs	r2, #1
 8000638:	4013      	ands	r3, r2
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <HAL_MspInit+0x50>)
 8000640:	69da      	ldr	r2, [r3, #28]
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <HAL_MspInit+0x50>)
 8000644:	2180      	movs	r1, #128	; 0x80
 8000646:	0549      	lsls	r1, r1, #21
 8000648:	430a      	orrs	r2, r1
 800064a:	61da      	str	r2, [r3, #28]
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <HAL_MspInit+0x50>)
 800064e:	69da      	ldr	r2, [r3, #28]
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	055b      	lsls	r3, r3, #21
 8000654:	4013      	ands	r3, r2
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800065a:	2302      	movs	r3, #2
 800065c:	425b      	negs	r3, r3
 800065e:	2200      	movs	r2, #0
 8000660:	2103      	movs	r1, #3
 8000662:	0018      	movs	r0, r3
 8000664:	f000 f9e0 	bl	8000a28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	b002      	add	sp, #8
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40021000 	.word	0x40021000

08000674 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b08b      	sub	sp, #44	; 0x2c
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	2414      	movs	r4, #20
 800067e:	193b      	adds	r3, r7, r4
 8000680:	0018      	movs	r0, r3
 8000682:	2314      	movs	r3, #20
 8000684:	001a      	movs	r2, r3
 8000686:	2100      	movs	r1, #0
 8000688:	f003 fe63 	bl	8004352 <memset>
  if(huart->Instance==USART2)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a1c      	ldr	r2, [pc, #112]	; (8000704 <HAL_UART_MspInit+0x90>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d132      	bne.n	80006fc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000696:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <HAL_UART_MspInit+0x94>)
 8000698:	69da      	ldr	r2, [r3, #28]
 800069a:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <HAL_UART_MspInit+0x94>)
 800069c:	2180      	movs	r1, #128	; 0x80
 800069e:	0289      	lsls	r1, r1, #10
 80006a0:	430a      	orrs	r2, r1
 80006a2:	61da      	str	r2, [r3, #28]
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <HAL_UART_MspInit+0x94>)
 80006a6:	69da      	ldr	r2, [r3, #28]
 80006a8:	2380      	movs	r3, #128	; 0x80
 80006aa:	029b      	lsls	r3, r3, #10
 80006ac:	4013      	ands	r3, r2
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <HAL_UART_MspInit+0x94>)
 80006b4:	695a      	ldr	r2, [r3, #20]
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <HAL_UART_MspInit+0x94>)
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	0289      	lsls	r1, r1, #10
 80006bc:	430a      	orrs	r2, r1
 80006be:	615a      	str	r2, [r3, #20]
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <HAL_UART_MspInit+0x94>)
 80006c2:	695a      	ldr	r2, [r3, #20]
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	029b      	lsls	r3, r3, #10
 80006c8:	4013      	ands	r3, r2
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80006ce:	0021      	movs	r1, r4
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	220c      	movs	r2, #12
 80006d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2202      	movs	r2, #2
 80006da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2203      	movs	r2, #3
 80006e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2201      	movs	r2, #1
 80006ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ee:	187a      	adds	r2, r7, r1
 80006f0:	2390      	movs	r3, #144	; 0x90
 80006f2:	05db      	lsls	r3, r3, #23
 80006f4:	0011      	movs	r1, r2
 80006f6:	0018      	movs	r0, r3
 80006f8:	f000 f9bc 	bl	8000a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	b00b      	add	sp, #44	; 0x2c
 8000702:	bd90      	pop	{r4, r7, pc}
 8000704:	40004400 	.word	0x40004400
 8000708:	40021000 	.word	0x40021000

0800070c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	0019      	movs	r1, r3
 8000722:	200d      	movs	r0, #13
 8000724:	f000 f980 	bl	8000a28 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000728:	200d      	movs	r0, #13
 800072a:	f000 f992 	bl	8000a52 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800072e:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <HAL_InitTick+0xa8>)
 8000730:	699a      	ldr	r2, [r3, #24]
 8000732:	4b20      	ldr	r3, [pc, #128]	; (80007b4 <HAL_InitTick+0xa8>)
 8000734:	2180      	movs	r1, #128	; 0x80
 8000736:	0109      	lsls	r1, r1, #4
 8000738:	430a      	orrs	r2, r1
 800073a:	619a      	str	r2, [r3, #24]
 800073c:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <HAL_InitTick+0xa8>)
 800073e:	699a      	ldr	r2, [r3, #24]
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	011b      	lsls	r3, r3, #4
 8000744:	4013      	ands	r3, r2
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800074a:	230c      	movs	r3, #12
 800074c:	18fa      	adds	r2, r7, r3
 800074e:	2310      	movs	r3, #16
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	0011      	movs	r1, r2
 8000754:	0018      	movs	r0, r3
 8000756:	f000 ff7f 	bl	8001658 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800075a:	f000 ff67 	bl	800162c <HAL_RCC_GetPCLK1Freq>
 800075e:	0003      	movs	r3, r0
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000764:	4914      	ldr	r1, [pc, #80]	; (80007b8 <HAL_InitTick+0xac>)
 8000766:	0018      	movs	r0, r3
 8000768:	f7ff fce0 	bl	800012c <__udivsi3>
 800076c:	0003      	movs	r3, r0
 800076e:	3b01      	subs	r3, #1
 8000770:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_InitTick+0xb0>)
 8000774:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <HAL_InitTick+0xb4>)
 8000776:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000778:	4b10      	ldr	r3, [pc, #64]	; (80007bc <HAL_InitTick+0xb0>)
 800077a:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <HAL_InitTick+0xb8>)
 800077c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <HAL_InitTick+0xb0>)
 8000780:	6a3a      	ldr	r2, [r7, #32]
 8000782:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8000784:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <HAL_InitTick+0xb0>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <HAL_InitTick+0xb0>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <HAL_InitTick+0xb0>)
 8000792:	0018      	movs	r0, r3
 8000794:	f000 ff8a 	bl	80016ac <HAL_TIM_Base_Init>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d105      	bne.n	80007a8 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <HAL_InitTick+0xb0>)
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 ffdc 	bl	800175c <HAL_TIM_Base_Start_IT>
 80007a4:	0003      	movs	r3, r0
 80007a6:	e000      	b.n	80007aa <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 80007a8:	2301      	movs	r3, #1
}
 80007aa:	0018      	movs	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b00a      	add	sp, #40	; 0x28
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	40021000 	.word	0x40021000
 80007b8:	000f4240 	.word	0x000f4240
 80007bc:	20000378 	.word	0x20000378
 80007c0:	40012c00 	.word	0x40012c00
 80007c4:	000003e7 	.word	0x000003e7

080007c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <NMI_Handler+0x4>

080007ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <HardFault_Handler+0x4>

080007d4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f001 f80a 	bl	80017f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	20000378 	.word	0x20000378

080007ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007f4:	4a14      	ldr	r2, [pc, #80]	; (8000848 <_sbrk+0x5c>)
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <_sbrk+0x60>)
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000800:	4b13      	ldr	r3, [pc, #76]	; (8000850 <_sbrk+0x64>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d102      	bne.n	800080e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <_sbrk+0x64>)
 800080a:	4a12      	ldr	r2, [pc, #72]	; (8000854 <_sbrk+0x68>)
 800080c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <_sbrk+0x64>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	18d3      	adds	r3, r2, r3
 8000816:	693a      	ldr	r2, [r7, #16]
 8000818:	429a      	cmp	r2, r3
 800081a:	d207      	bcs.n	800082c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800081c:	f003 fd66 	bl	80042ec <__errno>
 8000820:	0003      	movs	r3, r0
 8000822:	220c      	movs	r2, #12
 8000824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000826:	2301      	movs	r3, #1
 8000828:	425b      	negs	r3, r3
 800082a:	e009      	b.n	8000840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <_sbrk+0x64>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000832:	4b07      	ldr	r3, [pc, #28]	; (8000850 <_sbrk+0x64>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	18d2      	adds	r2, r2, r3
 800083a:	4b05      	ldr	r3, [pc, #20]	; (8000850 <_sbrk+0x64>)
 800083c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800083e:	68fb      	ldr	r3, [r7, #12]
}
 8000840:	0018      	movs	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	b006      	add	sp, #24
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20004000 	.word	0x20004000
 800084c:	00000400 	.word	0x00000400
 8000850:	200003c0 	.word	0x200003c0
 8000854:	20001120 	.word	0x20001120

08000858 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800085c:	46c0      	nop			; (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000864:	480d      	ldr	r0, [pc, #52]	; (800089c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000866:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000868:	f7ff fff6 	bl	8000858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800086e:	490d      	ldr	r1, [pc, #52]	; (80008a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000870:	4a0d      	ldr	r2, [pc, #52]	; (80008a8 <LoopForever+0xe>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000874:	e002      	b.n	800087c <LoopCopyDataInit>

08000876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087a:	3304      	adds	r3, #4

0800087c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800087c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000880:	d3f9      	bcc.n	8000876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000882:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000884:	4c0a      	ldr	r4, [pc, #40]	; (80008b0 <LoopForever+0x16>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000888:	e001      	b.n	800088e <LoopFillZerobss>

0800088a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800088c:	3204      	adds	r2, #4

0800088e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000890:	d3fb      	bcc.n	800088a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000892:	f003 fd31 	bl	80042f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000896:	f7ff fced 	bl	8000274 <main>

0800089a <LoopForever>:

LoopForever:
    b LoopForever
 800089a:	e7fe      	b.n	800089a <LoopForever>
  ldr   r0, =_estack
 800089c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80008a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008a8:	08004d9c 	.word	0x08004d9c
  ldr r2, =_sbss
 80008ac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008b0:	2000111c 	.word	0x2000111c

080008b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b4:	e7fe      	b.n	80008b4 <ADC1_IRQHandler>
	...

080008b8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <HAL_Init+0x24>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_Init+0x24>)
 80008c2:	2110      	movs	r1, #16
 80008c4:	430a      	orrs	r2, r1
 80008c6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008c8:	2003      	movs	r0, #3
 80008ca:	f7ff ff1f 	bl	800070c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ce:	f7ff fea7 	bl	8000620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d2:	2300      	movs	r3, #0
}
 80008d4:	0018      	movs	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	40022000 	.word	0x40022000

080008e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <HAL_IncTick+0x1c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	001a      	movs	r2, r3
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <HAL_IncTick+0x20>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	18d2      	adds	r2, r2, r3
 80008f0:	4b03      	ldr	r3, [pc, #12]	; (8000900 <HAL_IncTick+0x20>)
 80008f2:	601a      	str	r2, [r3, #0]
}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	20000004 	.word	0x20000004
 8000900:	200003c4 	.word	0x200003c4

08000904 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  return uwTick;
 8000908:	4b02      	ldr	r3, [pc, #8]	; (8000914 <HAL_GetTick+0x10>)
 800090a:	681b      	ldr	r3, [r3, #0]
}
 800090c:	0018      	movs	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	200003c4 	.word	0x200003c4

08000918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	0002      	movs	r2, r0
 8000920:	1dfb      	adds	r3, r7, #7
 8000922:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b7f      	cmp	r3, #127	; 0x7f
 800092a:	d809      	bhi.n	8000940 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800092c:	1dfb      	adds	r3, r7, #7
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	001a      	movs	r2, r3
 8000932:	231f      	movs	r3, #31
 8000934:	401a      	ands	r2, r3
 8000936:	4b04      	ldr	r3, [pc, #16]	; (8000948 <__NVIC_EnableIRQ+0x30>)
 8000938:	2101      	movs	r1, #1
 800093a:	4091      	lsls	r1, r2
 800093c:	000a      	movs	r2, r1
 800093e:	601a      	str	r2, [r3, #0]
  }
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	b002      	add	sp, #8
 8000946:	bd80      	pop	{r7, pc}
 8000948:	e000e100 	.word	0xe000e100

0800094c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	0002      	movs	r2, r0
 8000954:	6039      	str	r1, [r7, #0]
 8000956:	1dfb      	adds	r3, r7, #7
 8000958:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800095a:	1dfb      	adds	r3, r7, #7
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b7f      	cmp	r3, #127	; 0x7f
 8000960:	d828      	bhi.n	80009b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000962:	4a2f      	ldr	r2, [pc, #188]	; (8000a20 <__NVIC_SetPriority+0xd4>)
 8000964:	1dfb      	adds	r3, r7, #7
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b25b      	sxtb	r3, r3
 800096a:	089b      	lsrs	r3, r3, #2
 800096c:	33c0      	adds	r3, #192	; 0xc0
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	589b      	ldr	r3, [r3, r2]
 8000972:	1dfa      	adds	r2, r7, #7
 8000974:	7812      	ldrb	r2, [r2, #0]
 8000976:	0011      	movs	r1, r2
 8000978:	2203      	movs	r2, #3
 800097a:	400a      	ands	r2, r1
 800097c:	00d2      	lsls	r2, r2, #3
 800097e:	21ff      	movs	r1, #255	; 0xff
 8000980:	4091      	lsls	r1, r2
 8000982:	000a      	movs	r2, r1
 8000984:	43d2      	mvns	r2, r2
 8000986:	401a      	ands	r2, r3
 8000988:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	019b      	lsls	r3, r3, #6
 800098e:	22ff      	movs	r2, #255	; 0xff
 8000990:	401a      	ands	r2, r3
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	0018      	movs	r0, r3
 8000998:	2303      	movs	r3, #3
 800099a:	4003      	ands	r3, r0
 800099c:	00db      	lsls	r3, r3, #3
 800099e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009a0:	481f      	ldr	r0, [pc, #124]	; (8000a20 <__NVIC_SetPriority+0xd4>)
 80009a2:	1dfb      	adds	r3, r7, #7
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	b25b      	sxtb	r3, r3
 80009a8:	089b      	lsrs	r3, r3, #2
 80009aa:	430a      	orrs	r2, r1
 80009ac:	33c0      	adds	r3, #192	; 0xc0
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009b2:	e031      	b.n	8000a18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009b4:	4a1b      	ldr	r2, [pc, #108]	; (8000a24 <__NVIC_SetPriority+0xd8>)
 80009b6:	1dfb      	adds	r3, r7, #7
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	0019      	movs	r1, r3
 80009bc:	230f      	movs	r3, #15
 80009be:	400b      	ands	r3, r1
 80009c0:	3b08      	subs	r3, #8
 80009c2:	089b      	lsrs	r3, r3, #2
 80009c4:	3306      	adds	r3, #6
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	18d3      	adds	r3, r2, r3
 80009ca:	3304      	adds	r3, #4
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	1dfa      	adds	r2, r7, #7
 80009d0:	7812      	ldrb	r2, [r2, #0]
 80009d2:	0011      	movs	r1, r2
 80009d4:	2203      	movs	r2, #3
 80009d6:	400a      	ands	r2, r1
 80009d8:	00d2      	lsls	r2, r2, #3
 80009da:	21ff      	movs	r1, #255	; 0xff
 80009dc:	4091      	lsls	r1, r2
 80009de:	000a      	movs	r2, r1
 80009e0:	43d2      	mvns	r2, r2
 80009e2:	401a      	ands	r2, r3
 80009e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	019b      	lsls	r3, r3, #6
 80009ea:	22ff      	movs	r2, #255	; 0xff
 80009ec:	401a      	ands	r2, r3
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	0018      	movs	r0, r3
 80009f4:	2303      	movs	r3, #3
 80009f6:	4003      	ands	r3, r0
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009fc:	4809      	ldr	r0, [pc, #36]	; (8000a24 <__NVIC_SetPriority+0xd8>)
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	001c      	movs	r4, r3
 8000a04:	230f      	movs	r3, #15
 8000a06:	4023      	ands	r3, r4
 8000a08:	3b08      	subs	r3, #8
 8000a0a:	089b      	lsrs	r3, r3, #2
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	3306      	adds	r3, #6
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	18c3      	adds	r3, r0, r3
 8000a14:	3304      	adds	r3, #4
 8000a16:	601a      	str	r2, [r3, #0]
}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b003      	add	sp, #12
 8000a1e:	bd90      	pop	{r4, r7, pc}
 8000a20:	e000e100 	.word	0xe000e100
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]
 8000a32:	210f      	movs	r1, #15
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	1c02      	adds	r2, r0, #0
 8000a38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b25b      	sxtb	r3, r3
 8000a42:	0011      	movs	r1, r2
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff ff81 	bl	800094c <__NVIC_SetPriority>
}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b004      	add	sp, #16
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	0002      	movs	r2, r0
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	b25b      	sxtb	r3, r3
 8000a64:	0018      	movs	r0, r3
 8000a66:	f7ff ff57 	bl	8000918 <__NVIC_EnableIRQ>
}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b002      	add	sp, #8
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a82:	e14f      	b.n	8000d24 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2101      	movs	r1, #1
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	4091      	lsls	r1, r2
 8000a8e:	000a      	movs	r2, r1
 8000a90:	4013      	ands	r3, r2
 8000a92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d100      	bne.n	8000a9c <HAL_GPIO_Init+0x28>
 8000a9a:	e140      	b.n	8000d1e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d005      	beq.n	8000ab4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	2203      	movs	r2, #3
 8000aae:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ab0:	2b02      	cmp	r3, #2
 8000ab2:	d130      	bne.n	8000b16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	2203      	movs	r2, #3
 8000ac0:	409a      	lsls	r2, r3
 8000ac2:	0013      	movs	r3, r2
 8000ac4:	43da      	mvns	r2, r3
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	68da      	ldr	r2, [r3, #12]
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	0013      	movs	r3, r2
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aea:	2201      	movs	r2, #1
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	409a      	lsls	r2, r3
 8000af0:	0013      	movs	r3, r2
 8000af2:	43da      	mvns	r2, r3
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	4013      	ands	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	091b      	lsrs	r3, r3, #4
 8000b00:	2201      	movs	r2, #1
 8000b02:	401a      	ands	r2, r3
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	409a      	lsls	r2, r3
 8000b08:	0013      	movs	r3, r2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d017      	beq.n	8000b52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	409a      	lsls	r2, r3
 8000b30:	0013      	movs	r3, r2
 8000b32:	43da      	mvns	r2, r3
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	689a      	ldr	r2, [r3, #8]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	409a      	lsls	r2, r3
 8000b44:	0013      	movs	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	2203      	movs	r2, #3
 8000b58:	4013      	ands	r3, r2
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d123      	bne.n	8000ba6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	08da      	lsrs	r2, r3, #3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3208      	adds	r2, #8
 8000b66:	0092      	lsls	r2, r2, #2
 8000b68:	58d3      	ldr	r3, [r2, r3]
 8000b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	2207      	movs	r2, #7
 8000b70:	4013      	ands	r3, r2
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	220f      	movs	r2, #15
 8000b76:	409a      	lsls	r2, r3
 8000b78:	0013      	movs	r3, r2
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	691a      	ldr	r2, [r3, #16]
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	2107      	movs	r1, #7
 8000b8a:	400b      	ands	r3, r1
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	409a      	lsls	r2, r3
 8000b90:	0013      	movs	r3, r2
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	08da      	lsrs	r2, r3, #3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3208      	adds	r2, #8
 8000ba0:	0092      	lsls	r2, r2, #2
 8000ba2:	6939      	ldr	r1, [r7, #16]
 8000ba4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	0013      	movs	r3, r2
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	401a      	ands	r2, r3
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	409a      	lsls	r2, r3
 8000bcc:	0013      	movs	r3, r2
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	23c0      	movs	r3, #192	; 0xc0
 8000be0:	029b      	lsls	r3, r3, #10
 8000be2:	4013      	ands	r3, r2
 8000be4:	d100      	bne.n	8000be8 <HAL_GPIO_Init+0x174>
 8000be6:	e09a      	b.n	8000d1e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be8:	4b54      	ldr	r3, [pc, #336]	; (8000d3c <HAL_GPIO_Init+0x2c8>)
 8000bea:	699a      	ldr	r2, [r3, #24]
 8000bec:	4b53      	ldr	r3, [pc, #332]	; (8000d3c <HAL_GPIO_Init+0x2c8>)
 8000bee:	2101      	movs	r1, #1
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	619a      	str	r2, [r3, #24]
 8000bf4:	4b51      	ldr	r3, [pc, #324]	; (8000d3c <HAL_GPIO_Init+0x2c8>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c00:	4a4f      	ldr	r2, [pc, #316]	; (8000d40 <HAL_GPIO_Init+0x2cc>)
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	089b      	lsrs	r3, r3, #2
 8000c06:	3302      	adds	r3, #2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	589b      	ldr	r3, [r3, r2]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	2203      	movs	r2, #3
 8000c12:	4013      	ands	r3, r2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	220f      	movs	r2, #15
 8000c18:	409a      	lsls	r2, r3
 8000c1a:	0013      	movs	r3, r2
 8000c1c:	43da      	mvns	r2, r3
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	2390      	movs	r3, #144	; 0x90
 8000c28:	05db      	lsls	r3, r3, #23
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d013      	beq.n	8000c56 <HAL_GPIO_Init+0x1e2>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a44      	ldr	r2, [pc, #272]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d00d      	beq.n	8000c52 <HAL_GPIO_Init+0x1de>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a43      	ldr	r2, [pc, #268]	; (8000d48 <HAL_GPIO_Init+0x2d4>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d007      	beq.n	8000c4e <HAL_GPIO_Init+0x1da>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a42      	ldr	r2, [pc, #264]	; (8000d4c <HAL_GPIO_Init+0x2d8>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d101      	bne.n	8000c4a <HAL_GPIO_Init+0x1d6>
 8000c46:	2303      	movs	r3, #3
 8000c48:	e006      	b.n	8000c58 <HAL_GPIO_Init+0x1e4>
 8000c4a:	2305      	movs	r3, #5
 8000c4c:	e004      	b.n	8000c58 <HAL_GPIO_Init+0x1e4>
 8000c4e:	2302      	movs	r3, #2
 8000c50:	e002      	b.n	8000c58 <HAL_GPIO_Init+0x1e4>
 8000c52:	2301      	movs	r3, #1
 8000c54:	e000      	b.n	8000c58 <HAL_GPIO_Init+0x1e4>
 8000c56:	2300      	movs	r3, #0
 8000c58:	697a      	ldr	r2, [r7, #20]
 8000c5a:	2103      	movs	r1, #3
 8000c5c:	400a      	ands	r2, r1
 8000c5e:	0092      	lsls	r2, r2, #2
 8000c60:	4093      	lsls	r3, r2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c68:	4935      	ldr	r1, [pc, #212]	; (8000d40 <HAL_GPIO_Init+0x2cc>)
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	089b      	lsrs	r3, r3, #2
 8000c6e:	3302      	adds	r3, #2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c76:	4b36      	ldr	r3, [pc, #216]	; (8000d50 <HAL_GPIO_Init+0x2dc>)
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685a      	ldr	r2, [r3, #4]
 8000c8a:	2380      	movs	r3, #128	; 0x80
 8000c8c:	035b      	lsls	r3, r3, #13
 8000c8e:	4013      	ands	r3, r2
 8000c90:	d003      	beq.n	8000c9a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c9a:	4b2d      	ldr	r3, [pc, #180]	; (8000d50 <HAL_GPIO_Init+0x2dc>)
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ca0:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <HAL_GPIO_Init+0x2dc>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	43da      	mvns	r2, r3
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685a      	ldr	r2, [r3, #4]
 8000cb4:	2380      	movs	r3, #128	; 0x80
 8000cb6:	039b      	lsls	r3, r3, #14
 8000cb8:	4013      	ands	r3, r2
 8000cba:	d003      	beq.n	8000cc4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cc4:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <HAL_GPIO_Init+0x2dc>)
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000cca:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <HAL_GPIO_Init+0x2dc>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685a      	ldr	r2, [r3, #4]
 8000cde:	2380      	movs	r3, #128	; 0x80
 8000ce0:	029b      	lsls	r3, r3, #10
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	d003      	beq.n	8000cee <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <HAL_GPIO_Init+0x2dc>)
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000cf4:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <HAL_GPIO_Init+0x2dc>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	43da      	mvns	r2, r3
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	025b      	lsls	r3, r3, #9
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	d003      	beq.n	8000d18 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d18:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <HAL_GPIO_Init+0x2dc>)
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	3301      	adds	r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	40da      	lsrs	r2, r3
 8000d2c:	1e13      	subs	r3, r2, #0
 8000d2e:	d000      	beq.n	8000d32 <HAL_GPIO_Init+0x2be>
 8000d30:	e6a8      	b.n	8000a84 <HAL_GPIO_Init+0x10>
  } 
}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b006      	add	sp, #24
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010000 	.word	0x40010000
 8000d44:	48000400 	.word	0x48000400
 8000d48:	48000800 	.word	0x48000800
 8000d4c:	48000c00 	.word	0x48000c00
 8000d50:	40010400 	.word	0x40010400

08000d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	0008      	movs	r0, r1
 8000d5e:	0011      	movs	r1, r2
 8000d60:	1cbb      	adds	r3, r7, #2
 8000d62:	1c02      	adds	r2, r0, #0
 8000d64:	801a      	strh	r2, [r3, #0]
 8000d66:	1c7b      	adds	r3, r7, #1
 8000d68:	1c0a      	adds	r2, r1, #0
 8000d6a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d6c:	1c7b      	adds	r3, r7, #1
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d004      	beq.n	8000d7e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d74:	1cbb      	adds	r3, r7, #2
 8000d76:	881a      	ldrh	r2, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d7c:	e003      	b.n	8000d86 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d7e:	1cbb      	adds	r3, r7, #2
 8000d80:	881a      	ldrh	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b002      	add	sp, #8
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d101      	bne.n	8000da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e305      	b.n	80013ae <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2201      	movs	r2, #1
 8000da8:	4013      	ands	r3, r2
 8000daa:	d100      	bne.n	8000dae <HAL_RCC_OscConfig+0x1e>
 8000dac:	e08d      	b.n	8000eca <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dae:	4bc5      	ldr	r3, [pc, #788]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	220c      	movs	r2, #12
 8000db4:	4013      	ands	r3, r2
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	d00e      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dba:	4bc2      	ldr	r3, [pc, #776]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	2b08      	cmp	r3, #8
 8000dc4:	d116      	bne.n	8000df4 <HAL_RCC_OscConfig+0x64>
 8000dc6:	4bbf      	ldr	r3, [pc, #764]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	23c0      	movs	r3, #192	; 0xc0
 8000dcc:	025b      	lsls	r3, r3, #9
 8000dce:	401a      	ands	r2, r3
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	025b      	lsls	r3, r3, #9
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d10d      	bne.n	8000df4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd8:	4bba      	ldr	r3, [pc, #744]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	029b      	lsls	r3, r3, #10
 8000de0:	4013      	ands	r3, r2
 8000de2:	d100      	bne.n	8000de6 <HAL_RCC_OscConfig+0x56>
 8000de4:	e070      	b.n	8000ec8 <HAL_RCC_OscConfig+0x138>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d000      	beq.n	8000df0 <HAL_RCC_OscConfig+0x60>
 8000dee:	e06b      	b.n	8000ec8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e2dc      	b.n	80013ae <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d107      	bne.n	8000e0c <HAL_RCC_OscConfig+0x7c>
 8000dfc:	4bb1      	ldr	r3, [pc, #708]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4bb0      	ldr	r3, [pc, #704]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000e02:	2180      	movs	r1, #128	; 0x80
 8000e04:	0249      	lsls	r1, r1, #9
 8000e06:	430a      	orrs	r2, r1
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	e02f      	b.n	8000e6c <HAL_RCC_OscConfig+0xdc>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10c      	bne.n	8000e2e <HAL_RCC_OscConfig+0x9e>
 8000e14:	4bab      	ldr	r3, [pc, #684]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4baa      	ldr	r3, [pc, #680]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000e1a:	49ab      	ldr	r1, [pc, #684]	; (80010c8 <HAL_RCC_OscConfig+0x338>)
 8000e1c:	400a      	ands	r2, r1
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	4ba8      	ldr	r3, [pc, #672]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4ba7      	ldr	r3, [pc, #668]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000e26:	49a9      	ldr	r1, [pc, #676]	; (80010cc <HAL_RCC_OscConfig+0x33c>)
 8000e28:	400a      	ands	r2, r1
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	e01e      	b.n	8000e6c <HAL_RCC_OscConfig+0xdc>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b05      	cmp	r3, #5
 8000e34:	d10e      	bne.n	8000e54 <HAL_RCC_OscConfig+0xc4>
 8000e36:	4ba3      	ldr	r3, [pc, #652]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	4ba2      	ldr	r3, [pc, #648]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000e3c:	2180      	movs	r1, #128	; 0x80
 8000e3e:	02c9      	lsls	r1, r1, #11
 8000e40:	430a      	orrs	r2, r1
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	4b9f      	ldr	r3, [pc, #636]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b9e      	ldr	r3, [pc, #632]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000e4a:	2180      	movs	r1, #128	; 0x80
 8000e4c:	0249      	lsls	r1, r1, #9
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	e00b      	b.n	8000e6c <HAL_RCC_OscConfig+0xdc>
 8000e54:	4b9b      	ldr	r3, [pc, #620]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b9a      	ldr	r3, [pc, #616]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000e5a:	499b      	ldr	r1, [pc, #620]	; (80010c8 <HAL_RCC_OscConfig+0x338>)
 8000e5c:	400a      	ands	r2, r1
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	4b98      	ldr	r3, [pc, #608]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b97      	ldr	r3, [pc, #604]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000e66:	4999      	ldr	r1, [pc, #612]	; (80010cc <HAL_RCC_OscConfig+0x33c>)
 8000e68:	400a      	ands	r2, r1
 8000e6a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d014      	beq.n	8000e9e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e74:	f7ff fd46 	bl	8000904 <HAL_GetTick>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e7c:	e008      	b.n	8000e90 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e7e:	f7ff fd41 	bl	8000904 <HAL_GetTick>
 8000e82:	0002      	movs	r2, r0
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	2b64      	cmp	r3, #100	; 0x64
 8000e8a:	d901      	bls.n	8000e90 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	e28e      	b.n	80013ae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e90:	4b8c      	ldr	r3, [pc, #560]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	2380      	movs	r3, #128	; 0x80
 8000e96:	029b      	lsls	r3, r3, #10
 8000e98:	4013      	ands	r3, r2
 8000e9a:	d0f0      	beq.n	8000e7e <HAL_RCC_OscConfig+0xee>
 8000e9c:	e015      	b.n	8000eca <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9e:	f7ff fd31 	bl	8000904 <HAL_GetTick>
 8000ea2:	0003      	movs	r3, r0
 8000ea4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ea6:	e008      	b.n	8000eba <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ea8:	f7ff fd2c 	bl	8000904 <HAL_GetTick>
 8000eac:	0002      	movs	r2, r0
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b64      	cmp	r3, #100	; 0x64
 8000eb4:	d901      	bls.n	8000eba <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e279      	b.n	80013ae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eba:	4b82      	ldr	r3, [pc, #520]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	2380      	movs	r3, #128	; 0x80
 8000ec0:	029b      	lsls	r3, r3, #10
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	d1f0      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x118>
 8000ec6:	e000      	b.n	8000eca <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2202      	movs	r2, #2
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	d100      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x146>
 8000ed4:	e06c      	b.n	8000fb0 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ed6:	4b7b      	ldr	r3, [pc, #492]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	220c      	movs	r2, #12
 8000edc:	4013      	ands	r3, r2
 8000ede:	d00e      	beq.n	8000efe <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ee0:	4b78      	ldr	r3, [pc, #480]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	220c      	movs	r2, #12
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	2b08      	cmp	r3, #8
 8000eea:	d11f      	bne.n	8000f2c <HAL_RCC_OscConfig+0x19c>
 8000eec:	4b75      	ldr	r3, [pc, #468]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	23c0      	movs	r3, #192	; 0xc0
 8000ef2:	025b      	lsls	r3, r3, #9
 8000ef4:	401a      	ands	r2, r3
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	021b      	lsls	r3, r3, #8
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d116      	bne.n	8000f2c <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000efe:	4b71      	ldr	r3, [pc, #452]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2202      	movs	r2, #2
 8000f04:	4013      	ands	r3, r2
 8000f06:	d005      	beq.n	8000f14 <HAL_RCC_OscConfig+0x184>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d001      	beq.n	8000f14 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e24c      	b.n	80013ae <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f14:	4b6b      	ldr	r3, [pc, #428]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	22f8      	movs	r2, #248	; 0xf8
 8000f1a:	4393      	bics	r3, r2
 8000f1c:	0019      	movs	r1, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	691b      	ldr	r3, [r3, #16]
 8000f22:	00da      	lsls	r2, r3, #3
 8000f24:	4b67      	ldr	r3, [pc, #412]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000f26:	430a      	orrs	r2, r1
 8000f28:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f2a:	e041      	b.n	8000fb0 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d024      	beq.n	8000f7e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f34:	4b63      	ldr	r3, [pc, #396]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b62      	ldr	r3, [pc, #392]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f40:	f7ff fce0 	bl	8000904 <HAL_GetTick>
 8000f44:	0003      	movs	r3, r0
 8000f46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f48:	e008      	b.n	8000f5c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f4a:	f7ff fcdb 	bl	8000904 <HAL_GetTick>
 8000f4e:	0002      	movs	r2, r0
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d901      	bls.n	8000f5c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e228      	b.n	80013ae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f5c:	4b59      	ldr	r3, [pc, #356]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2202      	movs	r2, #2
 8000f62:	4013      	ands	r3, r2
 8000f64:	d0f1      	beq.n	8000f4a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f66:	4b57      	ldr	r3, [pc, #348]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	22f8      	movs	r2, #248	; 0xf8
 8000f6c:	4393      	bics	r3, r2
 8000f6e:	0019      	movs	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	00da      	lsls	r2, r3, #3
 8000f76:	4b53      	ldr	r3, [pc, #332]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	e018      	b.n	8000fb0 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f7e:	4b51      	ldr	r3, [pc, #324]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4b50      	ldr	r3, [pc, #320]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000f84:	2101      	movs	r1, #1
 8000f86:	438a      	bics	r2, r1
 8000f88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8a:	f7ff fcbb 	bl	8000904 <HAL_GetTick>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f94:	f7ff fcb6 	bl	8000904 <HAL_GetTick>
 8000f98:	0002      	movs	r2, r0
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e203      	b.n	80013ae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fa6:	4b47      	ldr	r3, [pc, #284]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2202      	movs	r2, #2
 8000fac:	4013      	ands	r3, r2
 8000fae:	d1f1      	bne.n	8000f94 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2208      	movs	r2, #8
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	d036      	beq.n	8001028 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d019      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fc2:	4b40      	ldr	r3, [pc, #256]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000fc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fc6:	4b3f      	ldr	r3, [pc, #252]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000fc8:	2101      	movs	r1, #1
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fce:	f7ff fc99 	bl	8000904 <HAL_GetTick>
 8000fd2:	0003      	movs	r3, r0
 8000fd4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fd6:	e008      	b.n	8000fea <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fd8:	f7ff fc94 	bl	8000904 <HAL_GetTick>
 8000fdc:	0002      	movs	r2, r0
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e1e1      	b.n	80013ae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fea:	4b36      	ldr	r3, [pc, #216]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fee:	2202      	movs	r2, #2
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	d0f1      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x248>
 8000ff4:	e018      	b.n	8001028 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ff6:	4b33      	ldr	r3, [pc, #204]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000ff8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ffa:	4b32      	ldr	r3, [pc, #200]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	438a      	bics	r2, r1
 8001000:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001002:	f7ff fc7f 	bl	8000904 <HAL_GetTick>
 8001006:	0003      	movs	r3, r0
 8001008:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800100c:	f7ff fc7a 	bl	8000904 <HAL_GetTick>
 8001010:	0002      	movs	r2, r0
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e1c7      	b.n	80013ae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800101e:	4b29      	ldr	r3, [pc, #164]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8001020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001022:	2202      	movs	r2, #2
 8001024:	4013      	ands	r3, r2
 8001026:	d1f1      	bne.n	800100c <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2204      	movs	r2, #4
 800102e:	4013      	ands	r3, r2
 8001030:	d100      	bne.n	8001034 <HAL_RCC_OscConfig+0x2a4>
 8001032:	e0b5      	b.n	80011a0 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001034:	201f      	movs	r0, #31
 8001036:	183b      	adds	r3, r7, r0
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800103c:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 800103e:	69da      	ldr	r2, [r3, #28]
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	055b      	lsls	r3, r3, #21
 8001044:	4013      	ands	r3, r2
 8001046:	d110      	bne.n	800106a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001048:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 800104a:	69da      	ldr	r2, [r3, #28]
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 800104e:	2180      	movs	r1, #128	; 0x80
 8001050:	0549      	lsls	r1, r1, #21
 8001052:	430a      	orrs	r2, r1
 8001054:	61da      	str	r2, [r3, #28]
 8001056:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8001058:	69da      	ldr	r2, [r3, #28]
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	055b      	lsls	r3, r3, #21
 800105e:	4013      	ands	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001064:	183b      	adds	r3, r7, r0
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800106a:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <HAL_RCC_OscConfig+0x340>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	4013      	ands	r3, r2
 8001074:	d11a      	bne.n	80010ac <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <HAL_RCC_OscConfig+0x340>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <HAL_RCC_OscConfig+0x340>)
 800107c:	2180      	movs	r1, #128	; 0x80
 800107e:	0049      	lsls	r1, r1, #1
 8001080:	430a      	orrs	r2, r1
 8001082:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001084:	f7ff fc3e 	bl	8000904 <HAL_GetTick>
 8001088:	0003      	movs	r3, r0
 800108a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800108c:	e008      	b.n	80010a0 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800108e:	f7ff fc39 	bl	8000904 <HAL_GetTick>
 8001092:	0002      	movs	r2, r0
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b64      	cmp	r3, #100	; 0x64
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e186      	b.n	80013ae <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <HAL_RCC_OscConfig+0x340>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4013      	ands	r3, r2
 80010aa:	d0f0      	beq.n	800108e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d10f      	bne.n	80010d4 <HAL_RCC_OscConfig+0x344>
 80010b4:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 80010b6:	6a1a      	ldr	r2, [r3, #32]
 80010b8:	4b02      	ldr	r3, [pc, #8]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 80010ba:	2101      	movs	r1, #1
 80010bc:	430a      	orrs	r2, r1
 80010be:	621a      	str	r2, [r3, #32]
 80010c0:	e036      	b.n	8001130 <HAL_RCC_OscConfig+0x3a0>
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	40021000 	.word	0x40021000
 80010c8:	fffeffff 	.word	0xfffeffff
 80010cc:	fffbffff 	.word	0xfffbffff
 80010d0:	40007000 	.word	0x40007000
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d10c      	bne.n	80010f6 <HAL_RCC_OscConfig+0x366>
 80010dc:	4bb6      	ldr	r3, [pc, #728]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 80010de:	6a1a      	ldr	r2, [r3, #32]
 80010e0:	4bb5      	ldr	r3, [pc, #724]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 80010e2:	2101      	movs	r1, #1
 80010e4:	438a      	bics	r2, r1
 80010e6:	621a      	str	r2, [r3, #32]
 80010e8:	4bb3      	ldr	r3, [pc, #716]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 80010ea:	6a1a      	ldr	r2, [r3, #32]
 80010ec:	4bb2      	ldr	r3, [pc, #712]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 80010ee:	2104      	movs	r1, #4
 80010f0:	438a      	bics	r2, r1
 80010f2:	621a      	str	r2, [r3, #32]
 80010f4:	e01c      	b.n	8001130 <HAL_RCC_OscConfig+0x3a0>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	2b05      	cmp	r3, #5
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_OscConfig+0x388>
 80010fe:	4bae      	ldr	r3, [pc, #696]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 8001100:	6a1a      	ldr	r2, [r3, #32]
 8001102:	4bad      	ldr	r3, [pc, #692]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 8001104:	2104      	movs	r1, #4
 8001106:	430a      	orrs	r2, r1
 8001108:	621a      	str	r2, [r3, #32]
 800110a:	4bab      	ldr	r3, [pc, #684]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 800110c:	6a1a      	ldr	r2, [r3, #32]
 800110e:	4baa      	ldr	r3, [pc, #680]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 8001110:	2101      	movs	r1, #1
 8001112:	430a      	orrs	r2, r1
 8001114:	621a      	str	r2, [r3, #32]
 8001116:	e00b      	b.n	8001130 <HAL_RCC_OscConfig+0x3a0>
 8001118:	4ba7      	ldr	r3, [pc, #668]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 800111a:	6a1a      	ldr	r2, [r3, #32]
 800111c:	4ba6      	ldr	r3, [pc, #664]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 800111e:	2101      	movs	r1, #1
 8001120:	438a      	bics	r2, r1
 8001122:	621a      	str	r2, [r3, #32]
 8001124:	4ba4      	ldr	r3, [pc, #656]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 8001126:	6a1a      	ldr	r2, [r3, #32]
 8001128:	4ba3      	ldr	r3, [pc, #652]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 800112a:	2104      	movs	r1, #4
 800112c:	438a      	bics	r2, r1
 800112e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d014      	beq.n	8001162 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001138:	f7ff fbe4 	bl	8000904 <HAL_GetTick>
 800113c:	0003      	movs	r3, r0
 800113e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001140:	e009      	b.n	8001156 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001142:	f7ff fbdf 	bl	8000904 <HAL_GetTick>
 8001146:	0002      	movs	r2, r0
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	4a9b      	ldr	r2, [pc, #620]	; (80013bc <HAL_RCC_OscConfig+0x62c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e12b      	b.n	80013ae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001156:	4b98      	ldr	r3, [pc, #608]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	2202      	movs	r2, #2
 800115c:	4013      	ands	r3, r2
 800115e:	d0f0      	beq.n	8001142 <HAL_RCC_OscConfig+0x3b2>
 8001160:	e013      	b.n	800118a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001162:	f7ff fbcf 	bl	8000904 <HAL_GetTick>
 8001166:	0003      	movs	r3, r0
 8001168:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800116a:	e009      	b.n	8001180 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800116c:	f7ff fbca 	bl	8000904 <HAL_GetTick>
 8001170:	0002      	movs	r2, r0
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	4a91      	ldr	r2, [pc, #580]	; (80013bc <HAL_RCC_OscConfig+0x62c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e116      	b.n	80013ae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001180:	4b8d      	ldr	r3, [pc, #564]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	2202      	movs	r2, #2
 8001186:	4013      	ands	r3, r2
 8001188:	d1f0      	bne.n	800116c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800118a:	231f      	movs	r3, #31
 800118c:	18fb      	adds	r3, r7, r3
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d105      	bne.n	80011a0 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001194:	4b88      	ldr	r3, [pc, #544]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 8001196:	69da      	ldr	r2, [r3, #28]
 8001198:	4b87      	ldr	r3, [pc, #540]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 800119a:	4989      	ldr	r1, [pc, #548]	; (80013c0 <HAL_RCC_OscConfig+0x630>)
 800119c:	400a      	ands	r2, r1
 800119e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2210      	movs	r2, #16
 80011a6:	4013      	ands	r3, r2
 80011a8:	d063      	beq.n	8001272 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d12a      	bne.n	8001208 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011b2:	4b81      	ldr	r3, [pc, #516]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 80011b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011b6:	4b80      	ldr	r3, [pc, #512]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 80011b8:	2104      	movs	r1, #4
 80011ba:	430a      	orrs	r2, r1
 80011bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80011be:	4b7e      	ldr	r3, [pc, #504]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 80011c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011c2:	4b7d      	ldr	r3, [pc, #500]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 80011c4:	2101      	movs	r1, #1
 80011c6:	430a      	orrs	r2, r1
 80011c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ca:	f7ff fb9b 	bl	8000904 <HAL_GetTick>
 80011ce:	0003      	movs	r3, r0
 80011d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011d4:	f7ff fb96 	bl	8000904 <HAL_GetTick>
 80011d8:	0002      	movs	r2, r0
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e0e3      	b.n	80013ae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011e6:	4b74      	ldr	r3, [pc, #464]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 80011e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ea:	2202      	movs	r2, #2
 80011ec:	4013      	ands	r3, r2
 80011ee:	d0f1      	beq.n	80011d4 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011f0:	4b71      	ldr	r3, [pc, #452]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 80011f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f4:	22f8      	movs	r2, #248	; 0xf8
 80011f6:	4393      	bics	r3, r2
 80011f8:	0019      	movs	r1, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	00da      	lsls	r2, r3, #3
 8001200:	4b6d      	ldr	r3, [pc, #436]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 8001202:	430a      	orrs	r2, r1
 8001204:	635a      	str	r2, [r3, #52]	; 0x34
 8001206:	e034      	b.n	8001272 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	3305      	adds	r3, #5
 800120e:	d111      	bne.n	8001234 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001210:	4b69      	ldr	r3, [pc, #420]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 8001212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001214:	4b68      	ldr	r3, [pc, #416]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 8001216:	2104      	movs	r1, #4
 8001218:	438a      	bics	r2, r1
 800121a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800121c:	4b66      	ldr	r3, [pc, #408]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 800121e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001220:	22f8      	movs	r2, #248	; 0xf8
 8001222:	4393      	bics	r3, r2
 8001224:	0019      	movs	r1, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	00da      	lsls	r2, r3, #3
 800122c:	4b62      	ldr	r3, [pc, #392]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 800122e:	430a      	orrs	r2, r1
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
 8001232:	e01e      	b.n	8001272 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001234:	4b60      	ldr	r3, [pc, #384]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 8001236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001238:	4b5f      	ldr	r3, [pc, #380]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 800123a:	2104      	movs	r1, #4
 800123c:	430a      	orrs	r2, r1
 800123e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001240:	4b5d      	ldr	r3, [pc, #372]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 8001242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001244:	4b5c      	ldr	r3, [pc, #368]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 8001246:	2101      	movs	r1, #1
 8001248:	438a      	bics	r2, r1
 800124a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124c:	f7ff fb5a 	bl	8000904 <HAL_GetTick>
 8001250:	0003      	movs	r3, r0
 8001252:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001256:	f7ff fb55 	bl	8000904 <HAL_GetTick>
 800125a:	0002      	movs	r2, r0
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e0a2      	b.n	80013ae <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001268:	4b53      	ldr	r3, [pc, #332]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 800126a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800126c:	2202      	movs	r2, #2
 800126e:	4013      	ands	r3, r2
 8001270:	d1f1      	bne.n	8001256 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d100      	bne.n	800127c <HAL_RCC_OscConfig+0x4ec>
 800127a:	e097      	b.n	80013ac <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800127c:	4b4e      	ldr	r3, [pc, #312]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	220c      	movs	r2, #12
 8001282:	4013      	ands	r3, r2
 8001284:	2b08      	cmp	r3, #8
 8001286:	d100      	bne.n	800128a <HAL_RCC_OscConfig+0x4fa>
 8001288:	e06b      	b.n	8001362 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d14c      	bne.n	800132c <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001292:	4b49      	ldr	r3, [pc, #292]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4b48      	ldr	r3, [pc, #288]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 8001298:	494a      	ldr	r1, [pc, #296]	; (80013c4 <HAL_RCC_OscConfig+0x634>)
 800129a:	400a      	ands	r2, r1
 800129c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129e:	f7ff fb31 	bl	8000904 <HAL_GetTick>
 80012a2:	0003      	movs	r3, r0
 80012a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012a8:	f7ff fb2c 	bl	8000904 <HAL_GetTick>
 80012ac:	0002      	movs	r2, r0
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e079      	b.n	80013ae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ba:	4b3f      	ldr	r3, [pc, #252]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	049b      	lsls	r3, r3, #18
 80012c2:	4013      	ands	r3, r2
 80012c4:	d1f0      	bne.n	80012a8 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012c6:	4b3c      	ldr	r3, [pc, #240]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 80012c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ca:	220f      	movs	r2, #15
 80012cc:	4393      	bics	r3, r2
 80012ce:	0019      	movs	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012d4:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 80012d6:	430a      	orrs	r2, r1
 80012d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80012da:	4b37      	ldr	r3, [pc, #220]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	4a3a      	ldr	r2, [pc, #232]	; (80013c8 <HAL_RCC_OscConfig+0x638>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	0019      	movs	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ec:	431a      	orrs	r2, r3
 80012ee:	4b32      	ldr	r3, [pc, #200]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 80012f0:	430a      	orrs	r2, r1
 80012f2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012f4:	4b30      	ldr	r3, [pc, #192]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b2f      	ldr	r3, [pc, #188]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 80012fa:	2180      	movs	r1, #128	; 0x80
 80012fc:	0449      	lsls	r1, r1, #17
 80012fe:	430a      	orrs	r2, r1
 8001300:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001302:	f7ff faff 	bl	8000904 <HAL_GetTick>
 8001306:	0003      	movs	r3, r0
 8001308:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800130c:	f7ff fafa 	bl	8000904 <HAL_GetTick>
 8001310:	0002      	movs	r2, r0
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e047      	b.n	80013ae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800131e:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	049b      	lsls	r3, r3, #18
 8001326:	4013      	ands	r3, r2
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0x57c>
 800132a:	e03f      	b.n	80013ac <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800132c:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 8001332:	4924      	ldr	r1, [pc, #144]	; (80013c4 <HAL_RCC_OscConfig+0x634>)
 8001334:	400a      	ands	r2, r1
 8001336:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fae4 	bl	8000904 <HAL_GetTick>
 800133c:	0003      	movs	r3, r0
 800133e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001342:	f7ff fadf 	bl	8000904 <HAL_GetTick>
 8001346:	0002      	movs	r2, r0
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e02c      	b.n	80013ae <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	049b      	lsls	r3, r3, #18
 800135c:	4013      	ands	r3, r2
 800135e:	d1f0      	bne.n	8001342 <HAL_RCC_OscConfig+0x5b2>
 8001360:	e024      	b.n	80013ac <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d101      	bne.n	800136e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e01f      	b.n	80013ae <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001374:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 8001376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001378:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	23c0      	movs	r3, #192	; 0xc0
 800137e:	025b      	lsls	r3, r3, #9
 8001380:	401a      	ands	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	429a      	cmp	r2, r3
 8001388:	d10e      	bne.n	80013a8 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	220f      	movs	r2, #15
 800138e:	401a      	ands	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001394:	429a      	cmp	r2, r3
 8001396:	d107      	bne.n	80013a8 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	23f0      	movs	r3, #240	; 0xf0
 800139c:	039b      	lsls	r3, r3, #14
 800139e:	401a      	ands	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d001      	beq.n	80013ac <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e000      	b.n	80013ae <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	0018      	movs	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b008      	add	sp, #32
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	40021000 	.word	0x40021000
 80013bc:	00001388 	.word	0x00001388
 80013c0:	efffffff 	.word	0xefffffff
 80013c4:	feffffff 	.word	0xfeffffff
 80013c8:	ffc27fff 	.word	0xffc27fff

080013cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e0b3      	b.n	8001548 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013e0:	4b5b      	ldr	r3, [pc, #364]	; (8001550 <HAL_RCC_ClockConfig+0x184>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2201      	movs	r2, #1
 80013e6:	4013      	ands	r3, r2
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d911      	bls.n	8001412 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ee:	4b58      	ldr	r3, [pc, #352]	; (8001550 <HAL_RCC_ClockConfig+0x184>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2201      	movs	r2, #1
 80013f4:	4393      	bics	r3, r2
 80013f6:	0019      	movs	r1, r3
 80013f8:	4b55      	ldr	r3, [pc, #340]	; (8001550 <HAL_RCC_ClockConfig+0x184>)
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001400:	4b53      	ldr	r3, [pc, #332]	; (8001550 <HAL_RCC_ClockConfig+0x184>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2201      	movs	r2, #1
 8001406:	4013      	ands	r3, r2
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	429a      	cmp	r2, r3
 800140c:	d001      	beq.n	8001412 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e09a      	b.n	8001548 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2202      	movs	r2, #2
 8001418:	4013      	ands	r3, r2
 800141a:	d015      	beq.n	8001448 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2204      	movs	r2, #4
 8001422:	4013      	ands	r3, r2
 8001424:	d006      	beq.n	8001434 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001426:	4b4b      	ldr	r3, [pc, #300]	; (8001554 <HAL_RCC_ClockConfig+0x188>)
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	4b4a      	ldr	r3, [pc, #296]	; (8001554 <HAL_RCC_ClockConfig+0x188>)
 800142c:	21e0      	movs	r1, #224	; 0xe0
 800142e:	00c9      	lsls	r1, r1, #3
 8001430:	430a      	orrs	r2, r1
 8001432:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001434:	4b47      	ldr	r3, [pc, #284]	; (8001554 <HAL_RCC_ClockConfig+0x188>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	22f0      	movs	r2, #240	; 0xf0
 800143a:	4393      	bics	r3, r2
 800143c:	0019      	movs	r1, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	4b44      	ldr	r3, [pc, #272]	; (8001554 <HAL_RCC_ClockConfig+0x188>)
 8001444:	430a      	orrs	r2, r1
 8001446:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2201      	movs	r2, #1
 800144e:	4013      	ands	r3, r2
 8001450:	d040      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d107      	bne.n	800146a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145a:	4b3e      	ldr	r3, [pc, #248]	; (8001554 <HAL_RCC_ClockConfig+0x188>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	2380      	movs	r3, #128	; 0x80
 8001460:	029b      	lsls	r3, r3, #10
 8001462:	4013      	ands	r3, r2
 8001464:	d114      	bne.n	8001490 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e06e      	b.n	8001548 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b02      	cmp	r3, #2
 8001470:	d107      	bne.n	8001482 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001472:	4b38      	ldr	r3, [pc, #224]	; (8001554 <HAL_RCC_ClockConfig+0x188>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	049b      	lsls	r3, r3, #18
 800147a:	4013      	ands	r3, r2
 800147c:	d108      	bne.n	8001490 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e062      	b.n	8001548 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001482:	4b34      	ldr	r3, [pc, #208]	; (8001554 <HAL_RCC_ClockConfig+0x188>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2202      	movs	r2, #2
 8001488:	4013      	ands	r3, r2
 800148a:	d101      	bne.n	8001490 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e05b      	b.n	8001548 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001490:	4b30      	ldr	r3, [pc, #192]	; (8001554 <HAL_RCC_ClockConfig+0x188>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2203      	movs	r2, #3
 8001496:	4393      	bics	r3, r2
 8001498:	0019      	movs	r1, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <HAL_RCC_ClockConfig+0x188>)
 80014a0:	430a      	orrs	r2, r1
 80014a2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014a4:	f7ff fa2e 	bl	8000904 <HAL_GetTick>
 80014a8:	0003      	movs	r3, r0
 80014aa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ac:	e009      	b.n	80014c2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ae:	f7ff fa29 	bl	8000904 <HAL_GetTick>
 80014b2:	0002      	movs	r2, r0
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	4a27      	ldr	r2, [pc, #156]	; (8001558 <HAL_RCC_ClockConfig+0x18c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e042      	b.n	8001548 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c2:	4b24      	ldr	r3, [pc, #144]	; (8001554 <HAL_RCC_ClockConfig+0x188>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	220c      	movs	r2, #12
 80014c8:	401a      	ands	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d1ec      	bne.n	80014ae <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014d4:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <HAL_RCC_ClockConfig+0x184>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2201      	movs	r2, #1
 80014da:	4013      	ands	r3, r2
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d211      	bcs.n	8001506 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e2:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_RCC_ClockConfig+0x184>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2201      	movs	r2, #1
 80014e8:	4393      	bics	r3, r2
 80014ea:	0019      	movs	r1, r3
 80014ec:	4b18      	ldr	r3, [pc, #96]	; (8001550 <HAL_RCC_ClockConfig+0x184>)
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	430a      	orrs	r2, r1
 80014f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <HAL_RCC_ClockConfig+0x184>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2201      	movs	r2, #1
 80014fa:	4013      	ands	r3, r2
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d001      	beq.n	8001506 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e020      	b.n	8001548 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2204      	movs	r2, #4
 800150c:	4013      	ands	r3, r2
 800150e:	d009      	beq.n	8001524 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001510:	4b10      	ldr	r3, [pc, #64]	; (8001554 <HAL_RCC_ClockConfig+0x188>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	4a11      	ldr	r2, [pc, #68]	; (800155c <HAL_RCC_ClockConfig+0x190>)
 8001516:	4013      	ands	r3, r2
 8001518:	0019      	movs	r1, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68da      	ldr	r2, [r3, #12]
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <HAL_RCC_ClockConfig+0x188>)
 8001520:	430a      	orrs	r2, r1
 8001522:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001524:	f000 f820 	bl	8001568 <HAL_RCC_GetSysClockFreq>
 8001528:	0001      	movs	r1, r0
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_RCC_ClockConfig+0x188>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	091b      	lsrs	r3, r3, #4
 8001530:	220f      	movs	r2, #15
 8001532:	4013      	ands	r3, r2
 8001534:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <HAL_RCC_ClockConfig+0x194>)
 8001536:	5cd3      	ldrb	r3, [r2, r3]
 8001538:	000a      	movs	r2, r1
 800153a:	40da      	lsrs	r2, r3
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <HAL_RCC_ClockConfig+0x198>)
 800153e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001540:	2003      	movs	r0, #3
 8001542:	f7ff f8e3 	bl	800070c <HAL_InitTick>
  
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	0018      	movs	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	b004      	add	sp, #16
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40022000 	.word	0x40022000
 8001554:	40021000 	.word	0x40021000
 8001558:	00001388 	.word	0x00001388
 800155c:	fffff8ff 	.word	0xfffff8ff
 8001560:	08004d28 	.word	0x08004d28
 8001564:	20000000 	.word	0x20000000

08001568 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001582:	4b21      	ldr	r3, [pc, #132]	; (8001608 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	220c      	movs	r2, #12
 800158c:	4013      	ands	r3, r2
 800158e:	2b04      	cmp	r3, #4
 8001590:	d002      	beq.n	8001598 <HAL_RCC_GetSysClockFreq+0x30>
 8001592:	2b08      	cmp	r3, #8
 8001594:	d003      	beq.n	800159e <HAL_RCC_GetSysClockFreq+0x36>
 8001596:	e02e      	b.n	80015f6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001598:	4b1c      	ldr	r3, [pc, #112]	; (800160c <HAL_RCC_GetSysClockFreq+0xa4>)
 800159a:	613b      	str	r3, [r7, #16]
      break;
 800159c:	e02e      	b.n	80015fc <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	0c9b      	lsrs	r3, r3, #18
 80015a2:	220f      	movs	r2, #15
 80015a4:	4013      	ands	r3, r2
 80015a6:	4a1a      	ldr	r2, [pc, #104]	; (8001610 <HAL_RCC_GetSysClockFreq+0xa8>)
 80015a8:	5cd3      	ldrb	r3, [r2, r3]
 80015aa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80015ac:	4b16      	ldr	r3, [pc, #88]	; (8001608 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b0:	220f      	movs	r2, #15
 80015b2:	4013      	ands	r3, r2
 80015b4:	4a17      	ldr	r2, [pc, #92]	; (8001614 <HAL_RCC_GetSysClockFreq+0xac>)
 80015b6:	5cd3      	ldrb	r3, [r2, r3]
 80015b8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	23c0      	movs	r3, #192	; 0xc0
 80015be:	025b      	lsls	r3, r3, #9
 80015c0:	401a      	ands	r2, r3
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	025b      	lsls	r3, r3, #9
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d109      	bne.n	80015de <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015ca:	68b9      	ldr	r1, [r7, #8]
 80015cc:	480f      	ldr	r0, [pc, #60]	; (800160c <HAL_RCC_GetSysClockFreq+0xa4>)
 80015ce:	f7fe fdad 	bl	800012c <__udivsi3>
 80015d2:	0003      	movs	r3, r0
 80015d4:	001a      	movs	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4353      	muls	r3, r2
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015de:	68b9      	ldr	r1, [r7, #8]
 80015e0:	480a      	ldr	r0, [pc, #40]	; (800160c <HAL_RCC_GetSysClockFreq+0xa4>)
 80015e2:	f7fe fda3 	bl	800012c <__udivsi3>
 80015e6:	0003      	movs	r3, r0
 80015e8:	001a      	movs	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4353      	muls	r3, r2
 80015ee:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	613b      	str	r3, [r7, #16]
      break;
 80015f4:	e002      	b.n	80015fc <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_RCC_GetSysClockFreq+0xa4>)
 80015f8:	613b      	str	r3, [r7, #16]
      break;
 80015fa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80015fc:	693b      	ldr	r3, [r7, #16]
}
 80015fe:	0018      	movs	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	b006      	add	sp, #24
 8001604:	bd80      	pop	{r7, pc}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	40021000 	.word	0x40021000
 800160c:	007a1200 	.word	0x007a1200
 8001610:	08004d40 	.word	0x08004d40
 8001614:	08004d50 	.word	0x08004d50

08001618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800161c:	4b02      	ldr	r3, [pc, #8]	; (8001628 <HAL_RCC_GetHCLKFreq+0x10>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	0018      	movs	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	20000000 	.word	0x20000000

0800162c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001630:	f7ff fff2 	bl	8001618 <HAL_RCC_GetHCLKFreq>
 8001634:	0001      	movs	r1, r0
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	0a1b      	lsrs	r3, r3, #8
 800163c:	2207      	movs	r2, #7
 800163e:	4013      	ands	r3, r2
 8001640:	4a04      	ldr	r2, [pc, #16]	; (8001654 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001642:	5cd3      	ldrb	r3, [r2, r3]
 8001644:	40d9      	lsrs	r1, r3
 8001646:	000b      	movs	r3, r1
}    
 8001648:	0018      	movs	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	40021000 	.word	0x40021000
 8001654:	08004d38 	.word	0x08004d38

08001658 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2207      	movs	r2, #7
 8001666:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HAL_RCC_GetClockConfig+0x4c>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2203      	movs	r2, #3
 800166e:	401a      	ands	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_RCC_GetClockConfig+0x4c>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	22f0      	movs	r2, #240	; 0xf0
 800167a:	401a      	ands	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_RCC_GetClockConfig+0x4c>)
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	23e0      	movs	r3, #224	; 0xe0
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	401a      	ands	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_RCC_GetClockConfig+0x50>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2201      	movs	r2, #1
 8001694:	401a      	ands	r2, r3
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	601a      	str	r2, [r3, #0]
}
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	46bd      	mov	sp, r7
 800169e:	b002      	add	sp, #8
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40022000 	.word	0x40022000

080016ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e042      	b.n	8001744 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	223d      	movs	r2, #61	; 0x3d
 80016c2:	5c9b      	ldrb	r3, [r3, r2]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d107      	bne.n	80016da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	223c      	movs	r2, #60	; 0x3c
 80016ce:	2100      	movs	r1, #0
 80016d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	0018      	movs	r0, r3
 80016d6:	f000 f839 	bl	800174c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	223d      	movs	r2, #61	; 0x3d
 80016de:	2102      	movs	r1, #2
 80016e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	0019      	movs	r1, r3
 80016ec:	0010      	movs	r0, r2
 80016ee:	f000 f9b7 	bl	8001a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2246      	movs	r2, #70	; 0x46
 80016f6:	2101      	movs	r1, #1
 80016f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	223e      	movs	r2, #62	; 0x3e
 80016fe:	2101      	movs	r1, #1
 8001700:	5499      	strb	r1, [r3, r2]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	223f      	movs	r2, #63	; 0x3f
 8001706:	2101      	movs	r1, #1
 8001708:	5499      	strb	r1, [r3, r2]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2240      	movs	r2, #64	; 0x40
 800170e:	2101      	movs	r1, #1
 8001710:	5499      	strb	r1, [r3, r2]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2241      	movs	r2, #65	; 0x41
 8001716:	2101      	movs	r1, #1
 8001718:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2242      	movs	r2, #66	; 0x42
 800171e:	2101      	movs	r1, #1
 8001720:	5499      	strb	r1, [r3, r2]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2243      	movs	r2, #67	; 0x43
 8001726:	2101      	movs	r1, #1
 8001728:	5499      	strb	r1, [r3, r2]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2244      	movs	r2, #68	; 0x44
 800172e:	2101      	movs	r1, #1
 8001730:	5499      	strb	r1, [r3, r2]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2245      	movs	r2, #69	; 0x45
 8001736:	2101      	movs	r1, #1
 8001738:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	223d      	movs	r2, #61	; 0x3d
 800173e:	2101      	movs	r1, #1
 8001740:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	0018      	movs	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	b002      	add	sp, #8
 800174a:	bd80      	pop	{r7, pc}

0800174c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001754:	46c0      	nop			; (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	b002      	add	sp, #8
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	223d      	movs	r2, #61	; 0x3d
 8001768:	5c9b      	ldrb	r3, [r3, r2]
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b01      	cmp	r3, #1
 800176e:	d001      	beq.n	8001774 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e035      	b.n	80017e0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	223d      	movs	r2, #61	; 0x3d
 8001778:	2102      	movs	r1, #2
 800177a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2101      	movs	r1, #1
 8001788:	430a      	orrs	r2, r1
 800178a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a15      	ldr	r2, [pc, #84]	; (80017e8 <HAL_TIM_Base_Start_IT+0x8c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d009      	beq.n	80017aa <HAL_TIM_Base_Start_IT+0x4e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a14      	ldr	r2, [pc, #80]	; (80017ec <HAL_TIM_Base_Start_IT+0x90>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d004      	beq.n	80017aa <HAL_TIM_Base_Start_IT+0x4e>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <HAL_TIM_Base_Start_IT+0x94>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d111      	bne.n	80017ce <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2207      	movs	r2, #7
 80017b2:	4013      	ands	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2b06      	cmp	r3, #6
 80017ba:	d010      	beq.n	80017de <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2101      	movs	r1, #1
 80017c8:	430a      	orrs	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017cc:	e007      	b.n	80017de <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2101      	movs	r1, #1
 80017da:	430a      	orrs	r2, r1
 80017dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	0018      	movs	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	b004      	add	sp, #16
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40012c00 	.word	0x40012c00
 80017ec:	40000400 	.word	0x40000400
 80017f0:	40014000 	.word	0x40014000

080017f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	2202      	movs	r2, #2
 8001804:	4013      	ands	r3, r2
 8001806:	2b02      	cmp	r3, #2
 8001808:	d124      	bne.n	8001854 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	2202      	movs	r2, #2
 8001812:	4013      	ands	r3, r2
 8001814:	2b02      	cmp	r3, #2
 8001816:	d11d      	bne.n	8001854 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2203      	movs	r2, #3
 800181e:	4252      	negs	r2, r2
 8001820:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	2203      	movs	r2, #3
 8001830:	4013      	ands	r3, r2
 8001832:	d004      	beq.n	800183e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	0018      	movs	r0, r3
 8001838:	f000 f8fa 	bl	8001a30 <HAL_TIM_IC_CaptureCallback>
 800183c:	e007      	b.n	800184e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	0018      	movs	r0, r3
 8001842:	f000 f8ed 	bl	8001a20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	0018      	movs	r0, r3
 800184a:	f000 f8f9 	bl	8001a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	2204      	movs	r2, #4
 800185c:	4013      	ands	r3, r2
 800185e:	2b04      	cmp	r3, #4
 8001860:	d125      	bne.n	80018ae <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	2204      	movs	r2, #4
 800186a:	4013      	ands	r3, r2
 800186c:	2b04      	cmp	r3, #4
 800186e:	d11e      	bne.n	80018ae <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2205      	movs	r2, #5
 8001876:	4252      	negs	r2, r2
 8001878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2202      	movs	r2, #2
 800187e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	699a      	ldr	r2, [r3, #24]
 8001886:	23c0      	movs	r3, #192	; 0xc0
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4013      	ands	r3, r2
 800188c:	d004      	beq.n	8001898 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	0018      	movs	r0, r3
 8001892:	f000 f8cd 	bl	8001a30 <HAL_TIM_IC_CaptureCallback>
 8001896:	e007      	b.n	80018a8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	0018      	movs	r0, r3
 800189c:	f000 f8c0 	bl	8001a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	0018      	movs	r0, r3
 80018a4:	f000 f8cc 	bl	8001a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	2208      	movs	r2, #8
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d124      	bne.n	8001906 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2208      	movs	r2, #8
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d11d      	bne.n	8001906 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2209      	movs	r2, #9
 80018d0:	4252      	negs	r2, r2
 80018d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2204      	movs	r2, #4
 80018d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	2203      	movs	r2, #3
 80018e2:	4013      	ands	r3, r2
 80018e4:	d004      	beq.n	80018f0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	0018      	movs	r0, r3
 80018ea:	f000 f8a1 	bl	8001a30 <HAL_TIM_IC_CaptureCallback>
 80018ee:	e007      	b.n	8001900 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	0018      	movs	r0, r3
 80018f4:	f000 f894 	bl	8001a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	0018      	movs	r0, r3
 80018fc:	f000 f8a0 	bl	8001a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	2210      	movs	r2, #16
 800190e:	4013      	ands	r3, r2
 8001910:	2b10      	cmp	r3, #16
 8001912:	d125      	bne.n	8001960 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	2210      	movs	r2, #16
 800191c:	4013      	ands	r3, r2
 800191e:	2b10      	cmp	r3, #16
 8001920:	d11e      	bne.n	8001960 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2211      	movs	r2, #17
 8001928:	4252      	negs	r2, r2
 800192a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2208      	movs	r2, #8
 8001930:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	69da      	ldr	r2, [r3, #28]
 8001938:	23c0      	movs	r3, #192	; 0xc0
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4013      	ands	r3, r2
 800193e:	d004      	beq.n	800194a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	0018      	movs	r0, r3
 8001944:	f000 f874 	bl	8001a30 <HAL_TIM_IC_CaptureCallback>
 8001948:	e007      	b.n	800195a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	0018      	movs	r0, r3
 800194e:	f000 f867 	bl	8001a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	0018      	movs	r0, r3
 8001956:	f000 f873 	bl	8001a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	2201      	movs	r2, #1
 8001968:	4013      	ands	r3, r2
 800196a:	2b01      	cmp	r3, #1
 800196c:	d10f      	bne.n	800198e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	2201      	movs	r2, #1
 8001976:	4013      	ands	r3, r2
 8001978:	2b01      	cmp	r3, #1
 800197a:	d108      	bne.n	800198e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2202      	movs	r2, #2
 8001982:	4252      	negs	r2, r2
 8001984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	0018      	movs	r0, r3
 800198a:	f7fe fe31 	bl	80005f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	4013      	ands	r3, r2
 8001998:	2b80      	cmp	r3, #128	; 0x80
 800199a:	d10f      	bne.n	80019bc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	2280      	movs	r2, #128	; 0x80
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b80      	cmp	r3, #128	; 0x80
 80019a8:	d108      	bne.n	80019bc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2281      	movs	r2, #129	; 0x81
 80019b0:	4252      	negs	r2, r2
 80019b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	0018      	movs	r0, r3
 80019b8:	f000 f8d0 	bl	8001b5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	2240      	movs	r2, #64	; 0x40
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b40      	cmp	r3, #64	; 0x40
 80019c8:	d10f      	bne.n	80019ea <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	2240      	movs	r2, #64	; 0x40
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b40      	cmp	r3, #64	; 0x40
 80019d6:	d108      	bne.n	80019ea <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2241      	movs	r2, #65	; 0x41
 80019de:	4252      	negs	r2, r2
 80019e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	0018      	movs	r0, r3
 80019e6:	f000 f833 	bl	8001a50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	2220      	movs	r2, #32
 80019f2:	4013      	ands	r3, r2
 80019f4:	2b20      	cmp	r3, #32
 80019f6:	d10f      	bne.n	8001a18 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	2220      	movs	r2, #32
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b20      	cmp	r3, #32
 8001a04:	d108      	bne.n	8001a18 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2221      	movs	r2, #33	; 0x21
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	0018      	movs	r0, r3
 8001a14:	f000 f89a 	bl	8001b4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a18:	46c0      	nop			; (mov r8, r8)
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	b002      	add	sp, #8
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a28:	46c0      	nop			; (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b002      	add	sp, #8
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a38:	46c0      	nop			; (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b002      	add	sp, #8
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a48:	46c0      	nop			; (mov r8, r8)
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b002      	add	sp, #8
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a58:	46c0      	nop			; (mov r8, r8)
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b002      	add	sp, #8
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a2f      	ldr	r2, [pc, #188]	; (8001b30 <TIM_Base_SetConfig+0xd0>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d003      	beq.n	8001a80 <TIM_Base_SetConfig+0x20>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a2e      	ldr	r2, [pc, #184]	; (8001b34 <TIM_Base_SetConfig+0xd4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d108      	bne.n	8001a92 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2270      	movs	r2, #112	; 0x70
 8001a84:	4393      	bics	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a26      	ldr	r2, [pc, #152]	; (8001b30 <TIM_Base_SetConfig+0xd0>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d013      	beq.n	8001ac2 <TIM_Base_SetConfig+0x62>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a25      	ldr	r2, [pc, #148]	; (8001b34 <TIM_Base_SetConfig+0xd4>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d00f      	beq.n	8001ac2 <TIM_Base_SetConfig+0x62>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a24      	ldr	r2, [pc, #144]	; (8001b38 <TIM_Base_SetConfig+0xd8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d00b      	beq.n	8001ac2 <TIM_Base_SetConfig+0x62>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a23      	ldr	r2, [pc, #140]	; (8001b3c <TIM_Base_SetConfig+0xdc>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d007      	beq.n	8001ac2 <TIM_Base_SetConfig+0x62>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a22      	ldr	r2, [pc, #136]	; (8001b40 <TIM_Base_SetConfig+0xe0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d003      	beq.n	8001ac2 <TIM_Base_SetConfig+0x62>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a21      	ldr	r2, [pc, #132]	; (8001b44 <TIM_Base_SetConfig+0xe4>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d108      	bne.n	8001ad4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4a20      	ldr	r2, [pc, #128]	; (8001b48 <TIM_Base_SetConfig+0xe8>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2280      	movs	r2, #128	; 0x80
 8001ad8:	4393      	bics	r3, r2
 8001ada:	001a      	movs	r2, r3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a0c      	ldr	r2, [pc, #48]	; (8001b30 <TIM_Base_SetConfig+0xd0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00b      	beq.n	8001b1a <TIM_Base_SetConfig+0xba>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <TIM_Base_SetConfig+0xdc>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d007      	beq.n	8001b1a <TIM_Base_SetConfig+0xba>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a0c      	ldr	r2, [pc, #48]	; (8001b40 <TIM_Base_SetConfig+0xe0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d003      	beq.n	8001b1a <TIM_Base_SetConfig+0xba>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <TIM_Base_SetConfig+0xe4>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d103      	bne.n	8001b22 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	691a      	ldr	r2, [r3, #16]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	615a      	str	r2, [r3, #20]
}
 8001b28:	46c0      	nop			; (mov r8, r8)
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b004      	add	sp, #16
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40012c00 	.word	0x40012c00
 8001b34:	40000400 	.word	0x40000400
 8001b38:	40002000 	.word	0x40002000
 8001b3c:	40014000 	.word	0x40014000
 8001b40:	40014400 	.word	0x40014400
 8001b44:	40014800 	.word	0x40014800
 8001b48:	fffffcff 	.word	0xfffffcff

08001b4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b54:	46c0      	nop			; (mov r8, r8)
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b002      	add	sp, #8
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b64:	46c0      	nop			; (mov r8, r8)
 8001b66:	46bd      	mov	sp, r7
 8001b68:	b002      	add	sp, #8
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e044      	b.n	8001c08 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d107      	bne.n	8001b96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2278      	movs	r2, #120	; 0x78
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	0018      	movs	r0, r3
 8001b92:	f7fe fd6f 	bl	8000674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2224      	movs	r2, #36	; 0x24
 8001b9a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	438a      	bics	r2, r1
 8001baa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	0018      	movs	r0, r3
 8001bb0:	f000 f8d0 	bl	8001d54 <UART_SetConfig>
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e024      	b.n	8001c08 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f000 fa1b 	bl	8002004 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	490d      	ldr	r1, [pc, #52]	; (8001c10 <HAL_UART_Init+0xa4>)
 8001bda:	400a      	ands	r2, r1
 8001bdc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2108      	movs	r1, #8
 8001bea:	438a      	bics	r2, r1
 8001bec:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	0018      	movs	r0, r3
 8001c02:	f000 fab3 	bl	800216c <UART_CheckIdleState>
 8001c06:	0003      	movs	r3, r0
}
 8001c08:	0018      	movs	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b002      	add	sp, #8
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	fffff7ff 	.word	0xfffff7ff

08001c14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	; 0x28
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	1dbb      	adds	r3, r7, #6
 8001c22:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c28:	2b20      	cmp	r3, #32
 8001c2a:	d000      	beq.n	8001c2e <HAL_UART_Transmit+0x1a>
 8001c2c:	e08d      	b.n	8001d4a <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_UART_Transmit+0x28>
 8001c34:	1dbb      	adds	r3, r7, #6
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e085      	b.n	8001d4c <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	015b      	lsls	r3, r3, #5
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d109      	bne.n	8001c60 <HAL_UART_Transmit+0x4c>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d105      	bne.n	8001c60 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2201      	movs	r2, #1
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d001      	beq.n	8001c60 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e075      	b.n	8001d4c <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2284      	movs	r2, #132	; 0x84
 8001c64:	2100      	movs	r1, #0
 8001c66:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2221      	movs	r2, #33	; 0x21
 8001c6c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c6e:	f7fe fe49 	bl	8000904 <HAL_GetTick>
 8001c72:	0003      	movs	r3, r0
 8001c74:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1dba      	adds	r2, r7, #6
 8001c7a:	2150      	movs	r1, #80	; 0x50
 8001c7c:	8812      	ldrh	r2, [r2, #0]
 8001c7e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	1dba      	adds	r2, r7, #6
 8001c84:	2152      	movs	r1, #82	; 0x52
 8001c86:	8812      	ldrh	r2, [r2, #0]
 8001c88:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	2380      	movs	r3, #128	; 0x80
 8001c90:	015b      	lsls	r3, r3, #5
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d108      	bne.n	8001ca8 <HAL_UART_Transmit+0x94>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d104      	bne.n	8001ca8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	e003      	b.n	8001cb0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001cb0:	e030      	b.n	8001d14 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	0013      	movs	r3, r2
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2180      	movs	r1, #128	; 0x80
 8001cc0:	f000 fafc 	bl	80022bc <UART_WaitOnFlagUntilTimeout>
 8001cc4:	1e03      	subs	r3, r0, #0
 8001cc6:	d004      	beq.n	8001cd2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e03c      	b.n	8001d4c <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10b      	bne.n	8001cf0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	881a      	ldrh	r2, [r3, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	05d2      	lsls	r2, r2, #23
 8001ce2:	0dd2      	lsrs	r2, r2, #23
 8001ce4:	b292      	uxth	r2, r2
 8001ce6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	3302      	adds	r3, #2
 8001cec:	61bb      	str	r3, [r7, #24]
 8001cee:	e008      	b.n	8001d02 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	781a      	ldrb	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	b292      	uxth	r2, r2
 8001cfa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2252      	movs	r2, #82	; 0x52
 8001d06:	5a9b      	ldrh	r3, [r3, r2]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	b299      	uxth	r1, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2252      	movs	r2, #82	; 0x52
 8001d12:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2252      	movs	r2, #82	; 0x52
 8001d18:	5a9b      	ldrh	r3, [r3, r2]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1c8      	bne.n	8001cb2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	0013      	movs	r3, r2
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2140      	movs	r1, #64	; 0x40
 8001d2e:	f000 fac5 	bl	80022bc <UART_WaitOnFlagUntilTimeout>
 8001d32:	1e03      	subs	r3, r0, #0
 8001d34:	d004      	beq.n	8001d40 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2220      	movs	r2, #32
 8001d3a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e005      	b.n	8001d4c <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2220      	movs	r2, #32
 8001d44:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e000      	b.n	8001d4c <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8001d4a:	2302      	movs	r3, #2
  }
}
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b008      	add	sp, #32
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d5c:	231e      	movs	r3, #30
 8001d5e:	18fb      	adds	r3, r7, r3
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a97      	ldr	r2, [pc, #604]	; (8001fe0 <UART_SetConfig+0x28c>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	0019      	movs	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	4a92      	ldr	r2, [pc, #584]	; (8001fe4 <UART_SetConfig+0x290>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	4a89      	ldr	r2, [pc, #548]	; (8001fe8 <UART_SetConfig+0x294>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	0019      	movs	r1, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a85      	ldr	r2, [pc, #532]	; (8001fec <UART_SetConfig+0x298>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d127      	bne.n	8001e2a <UART_SetConfig+0xd6>
 8001dda:	4b85      	ldr	r3, [pc, #532]	; (8001ff0 <UART_SetConfig+0x29c>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	2203      	movs	r2, #3
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d00d      	beq.n	8001e02 <UART_SetConfig+0xae>
 8001de6:	d81b      	bhi.n	8001e20 <UART_SetConfig+0xcc>
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d014      	beq.n	8001e16 <UART_SetConfig+0xc2>
 8001dec:	d818      	bhi.n	8001e20 <UART_SetConfig+0xcc>
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <UART_SetConfig+0xa4>
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d00a      	beq.n	8001e0c <UART_SetConfig+0xb8>
 8001df6:	e013      	b.n	8001e20 <UART_SetConfig+0xcc>
 8001df8:	231f      	movs	r3, #31
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
 8001e00:	e035      	b.n	8001e6e <UART_SetConfig+0x11a>
 8001e02:	231f      	movs	r3, #31
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	2202      	movs	r2, #2
 8001e08:	701a      	strb	r2, [r3, #0]
 8001e0a:	e030      	b.n	8001e6e <UART_SetConfig+0x11a>
 8001e0c:	231f      	movs	r3, #31
 8001e0e:	18fb      	adds	r3, r7, r3
 8001e10:	2204      	movs	r2, #4
 8001e12:	701a      	strb	r2, [r3, #0]
 8001e14:	e02b      	b.n	8001e6e <UART_SetConfig+0x11a>
 8001e16:	231f      	movs	r3, #31
 8001e18:	18fb      	adds	r3, r7, r3
 8001e1a:	2208      	movs	r2, #8
 8001e1c:	701a      	strb	r2, [r3, #0]
 8001e1e:	e026      	b.n	8001e6e <UART_SetConfig+0x11a>
 8001e20:	231f      	movs	r3, #31
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	2210      	movs	r2, #16
 8001e26:	701a      	strb	r2, [r3, #0]
 8001e28:	e021      	b.n	8001e6e <UART_SetConfig+0x11a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a71      	ldr	r2, [pc, #452]	; (8001ff4 <UART_SetConfig+0x2a0>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d104      	bne.n	8001e3e <UART_SetConfig+0xea>
 8001e34:	231f      	movs	r3, #31
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]
 8001e3c:	e017      	b.n	8001e6e <UART_SetConfig+0x11a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a6d      	ldr	r2, [pc, #436]	; (8001ff8 <UART_SetConfig+0x2a4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d104      	bne.n	8001e52 <UART_SetConfig+0xfe>
 8001e48:	231f      	movs	r3, #31
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
 8001e50:	e00d      	b.n	8001e6e <UART_SetConfig+0x11a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a69      	ldr	r2, [pc, #420]	; (8001ffc <UART_SetConfig+0x2a8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d104      	bne.n	8001e66 <UART_SetConfig+0x112>
 8001e5c:	231f      	movs	r3, #31
 8001e5e:	18fb      	adds	r3, r7, r3
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
 8001e64:	e003      	b.n	8001e6e <UART_SetConfig+0x11a>
 8001e66:	231f      	movs	r3, #31
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	2210      	movs	r2, #16
 8001e6c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69da      	ldr	r2, [r3, #28]
 8001e72:	2380      	movs	r3, #128	; 0x80
 8001e74:	021b      	lsls	r3, r3, #8
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d15c      	bne.n	8001f34 <UART_SetConfig+0x1e0>
  {
    switch (clocksource)
 8001e7a:	231f      	movs	r3, #31
 8001e7c:	18fb      	adds	r3, r7, r3
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d015      	beq.n	8001eb0 <UART_SetConfig+0x15c>
 8001e84:	dc18      	bgt.n	8001eb8 <UART_SetConfig+0x164>
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d00d      	beq.n	8001ea6 <UART_SetConfig+0x152>
 8001e8a:	dc15      	bgt.n	8001eb8 <UART_SetConfig+0x164>
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <UART_SetConfig+0x142>
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d005      	beq.n	8001ea0 <UART_SetConfig+0x14c>
 8001e94:	e010      	b.n	8001eb8 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e96:	f7ff fbc9 	bl	800162c <HAL_RCC_GetPCLK1Freq>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	61bb      	str	r3, [r7, #24]
        break;
 8001e9e:	e012      	b.n	8001ec6 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001ea0:	4b57      	ldr	r3, [pc, #348]	; (8002000 <UART_SetConfig+0x2ac>)
 8001ea2:	61bb      	str	r3, [r7, #24]
        break;
 8001ea4:	e00f      	b.n	8001ec6 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ea6:	f7ff fb5f 	bl	8001568 <HAL_RCC_GetSysClockFreq>
 8001eaa:	0003      	movs	r3, r0
 8001eac:	61bb      	str	r3, [r7, #24]
        break;
 8001eae:	e00a      	b.n	8001ec6 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	021b      	lsls	r3, r3, #8
 8001eb4:	61bb      	str	r3, [r7, #24]
        break;
 8001eb6:	e006      	b.n	8001ec6 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001ebc:	231e      	movs	r3, #30
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	701a      	strb	r2, [r3, #0]
        break;
 8001ec4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d100      	bne.n	8001ece <UART_SetConfig+0x17a>
 8001ecc:	e07a      	b.n	8001fc4 <UART_SetConfig+0x270>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	005a      	lsls	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	085b      	lsrs	r3, r3, #1
 8001ed8:	18d2      	adds	r2, r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	0019      	movs	r1, r3
 8001ee0:	0010      	movs	r0, r2
 8001ee2:	f7fe f923 	bl	800012c <__udivsi3>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	2b0f      	cmp	r3, #15
 8001eee:	d91c      	bls.n	8001f2a <UART_SetConfig+0x1d6>
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	025b      	lsls	r3, r3, #9
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d217      	bcs.n	8001f2a <UART_SetConfig+0x1d6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	200e      	movs	r0, #14
 8001f00:	183b      	adds	r3, r7, r0
 8001f02:	210f      	movs	r1, #15
 8001f04:	438a      	bics	r2, r1
 8001f06:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	085b      	lsrs	r3, r3, #1
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	2207      	movs	r2, #7
 8001f10:	4013      	ands	r3, r2
 8001f12:	b299      	uxth	r1, r3
 8001f14:	183b      	adds	r3, r7, r0
 8001f16:	183a      	adds	r2, r7, r0
 8001f18:	8812      	ldrh	r2, [r2, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	183a      	adds	r2, r7, r0
 8001f24:	8812      	ldrh	r2, [r2, #0]
 8001f26:	60da      	str	r2, [r3, #12]
 8001f28:	e04c      	b.n	8001fc4 <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 8001f2a:	231e      	movs	r3, #30
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	2201      	movs	r2, #1
 8001f30:	701a      	strb	r2, [r3, #0]
 8001f32:	e047      	b.n	8001fc4 <UART_SetConfig+0x270>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001f34:	231f      	movs	r3, #31
 8001f36:	18fb      	adds	r3, r7, r3
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d015      	beq.n	8001f6a <UART_SetConfig+0x216>
 8001f3e:	dc18      	bgt.n	8001f72 <UART_SetConfig+0x21e>
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d00d      	beq.n	8001f60 <UART_SetConfig+0x20c>
 8001f44:	dc15      	bgt.n	8001f72 <UART_SetConfig+0x21e>
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d002      	beq.n	8001f50 <UART_SetConfig+0x1fc>
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d005      	beq.n	8001f5a <UART_SetConfig+0x206>
 8001f4e:	e010      	b.n	8001f72 <UART_SetConfig+0x21e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f50:	f7ff fb6c 	bl	800162c <HAL_RCC_GetPCLK1Freq>
 8001f54:	0003      	movs	r3, r0
 8001f56:	61bb      	str	r3, [r7, #24]
        break;
 8001f58:	e012      	b.n	8001f80 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f5a:	4b29      	ldr	r3, [pc, #164]	; (8002000 <UART_SetConfig+0x2ac>)
 8001f5c:	61bb      	str	r3, [r7, #24]
        break;
 8001f5e:	e00f      	b.n	8001f80 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f60:	f7ff fb02 	bl	8001568 <HAL_RCC_GetSysClockFreq>
 8001f64:	0003      	movs	r3, r0
 8001f66:	61bb      	str	r3, [r7, #24]
        break;
 8001f68:	e00a      	b.n	8001f80 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	61bb      	str	r3, [r7, #24]
        break;
 8001f70:	e006      	b.n	8001f80 <UART_SetConfig+0x22c>
      default:
        pclk = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001f76:	231e      	movs	r3, #30
 8001f78:	18fb      	adds	r3, r7, r3
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
        break;
 8001f7e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d01e      	beq.n	8001fc4 <UART_SetConfig+0x270>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	085a      	lsrs	r2, r3, #1
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	18d2      	adds	r2, r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	0019      	movs	r1, r3
 8001f96:	0010      	movs	r0, r2
 8001f98:	f7fe f8c8 	bl	800012c <__udivsi3>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	2b0f      	cmp	r3, #15
 8001fa4:	d90a      	bls.n	8001fbc <UART_SetConfig+0x268>
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	025b      	lsls	r3, r3, #9
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d205      	bcs.n	8001fbc <UART_SetConfig+0x268>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	e003      	b.n	8001fc4 <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 8001fbc:	231e      	movs	r3, #30
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8001fd0:	231e      	movs	r3, #30
 8001fd2:	18fb      	adds	r3, r7, r3
 8001fd4:	781b      	ldrb	r3, [r3, #0]
}
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b008      	add	sp, #32
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	efff69f3 	.word	0xefff69f3
 8001fe4:	ffffcfff 	.word	0xffffcfff
 8001fe8:	fffff4ff 	.word	0xfffff4ff
 8001fec:	40013800 	.word	0x40013800
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40004400 	.word	0x40004400
 8001ff8:	40004800 	.word	0x40004800
 8001ffc:	40004c00 	.word	0x40004c00
 8002000:	007a1200 	.word	0x007a1200

08002004 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	2201      	movs	r2, #1
 8002012:	4013      	ands	r3, r2
 8002014:	d00b      	beq.n	800202e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	4a4a      	ldr	r2, [pc, #296]	; (8002148 <UART_AdvFeatureConfig+0x144>)
 800201e:	4013      	ands	r3, r2
 8002020:	0019      	movs	r1, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	2202      	movs	r2, #2
 8002034:	4013      	ands	r3, r2
 8002036:	d00b      	beq.n	8002050 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	4a43      	ldr	r2, [pc, #268]	; (800214c <UART_AdvFeatureConfig+0x148>)
 8002040:	4013      	ands	r3, r2
 8002042:	0019      	movs	r1, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	2204      	movs	r2, #4
 8002056:	4013      	ands	r3, r2
 8002058:	d00b      	beq.n	8002072 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	4a3b      	ldr	r2, [pc, #236]	; (8002150 <UART_AdvFeatureConfig+0x14c>)
 8002062:	4013      	ands	r3, r2
 8002064:	0019      	movs	r1, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	2208      	movs	r2, #8
 8002078:	4013      	ands	r3, r2
 800207a:	d00b      	beq.n	8002094 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4a34      	ldr	r2, [pc, #208]	; (8002154 <UART_AdvFeatureConfig+0x150>)
 8002084:	4013      	ands	r3, r2
 8002086:	0019      	movs	r1, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	2210      	movs	r2, #16
 800209a:	4013      	ands	r3, r2
 800209c:	d00b      	beq.n	80020b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	4a2c      	ldr	r2, [pc, #176]	; (8002158 <UART_AdvFeatureConfig+0x154>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	0019      	movs	r1, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	2220      	movs	r2, #32
 80020bc:	4013      	ands	r3, r2
 80020be:	d00b      	beq.n	80020d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	4a25      	ldr	r2, [pc, #148]	; (800215c <UART_AdvFeatureConfig+0x158>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	0019      	movs	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	2240      	movs	r2, #64	; 0x40
 80020de:	4013      	ands	r3, r2
 80020e0:	d01d      	beq.n	800211e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	4a1d      	ldr	r2, [pc, #116]	; (8002160 <UART_AdvFeatureConfig+0x15c>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	0019      	movs	r1, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020fe:	2380      	movs	r3, #128	; 0x80
 8002100:	035b      	lsls	r3, r3, #13
 8002102:	429a      	cmp	r2, r3
 8002104:	d10b      	bne.n	800211e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4a15      	ldr	r2, [pc, #84]	; (8002164 <UART_AdvFeatureConfig+0x160>)
 800210e:	4013      	ands	r3, r2
 8002110:	0019      	movs	r1, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	2280      	movs	r2, #128	; 0x80
 8002124:	4013      	ands	r3, r2
 8002126:	d00b      	beq.n	8002140 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4a0e      	ldr	r2, [pc, #56]	; (8002168 <UART_AdvFeatureConfig+0x164>)
 8002130:	4013      	ands	r3, r2
 8002132:	0019      	movs	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	605a      	str	r2, [r3, #4]
  }
}
 8002140:	46c0      	nop			; (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	b002      	add	sp, #8
 8002146:	bd80      	pop	{r7, pc}
 8002148:	fffdffff 	.word	0xfffdffff
 800214c:	fffeffff 	.word	0xfffeffff
 8002150:	fffbffff 	.word	0xfffbffff
 8002154:	ffff7fff 	.word	0xffff7fff
 8002158:	ffffefff 	.word	0xffffefff
 800215c:	ffffdfff 	.word	0xffffdfff
 8002160:	ffefffff 	.word	0xffefffff
 8002164:	ff9fffff 	.word	0xff9fffff
 8002168:	fff7ffff 	.word	0xfff7ffff

0800216c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b092      	sub	sp, #72	; 0x48
 8002170:	af02      	add	r7, sp, #8
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2284      	movs	r2, #132	; 0x84
 8002178:	2100      	movs	r1, #0
 800217a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800217c:	f7fe fbc2 	bl	8000904 <HAL_GetTick>
 8002180:	0003      	movs	r3, r0
 8002182:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2208      	movs	r2, #8
 800218c:	4013      	ands	r3, r2
 800218e:	2b08      	cmp	r3, #8
 8002190:	d12c      	bne.n	80021ec <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002194:	2280      	movs	r2, #128	; 0x80
 8002196:	0391      	lsls	r1, r2, #14
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	4a46      	ldr	r2, [pc, #280]	; (80022b4 <UART_CheckIdleState+0x148>)
 800219c:	9200      	str	r2, [sp, #0]
 800219e:	2200      	movs	r2, #0
 80021a0:	f000 f88c 	bl	80022bc <UART_WaitOnFlagUntilTimeout>
 80021a4:	1e03      	subs	r3, r0, #0
 80021a6:	d021      	beq.n	80021ec <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021a8:	f3ef 8310 	mrs	r3, PRIMASK
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80021b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80021b2:	2301      	movs	r3, #1
 80021b4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b8:	f383 8810 	msr	PRIMASK, r3
}
 80021bc:	46c0      	nop			; (mov r8, r8)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2180      	movs	r1, #128	; 0x80
 80021ca:	438a      	bics	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d4:	f383 8810 	msr	PRIMASK, r3
}
 80021d8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2220      	movs	r2, #32
 80021de:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2278      	movs	r2, #120	; 0x78
 80021e4:	2100      	movs	r1, #0
 80021e6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e05f      	b.n	80022ac <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2204      	movs	r2, #4
 80021f4:	4013      	ands	r3, r2
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d146      	bne.n	8002288 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021fc:	2280      	movs	r2, #128	; 0x80
 80021fe:	03d1      	lsls	r1, r2, #15
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	4a2c      	ldr	r2, [pc, #176]	; (80022b4 <UART_CheckIdleState+0x148>)
 8002204:	9200      	str	r2, [sp, #0]
 8002206:	2200      	movs	r2, #0
 8002208:	f000 f858 	bl	80022bc <UART_WaitOnFlagUntilTimeout>
 800220c:	1e03      	subs	r3, r0, #0
 800220e:	d03b      	beq.n	8002288 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002210:	f3ef 8310 	mrs	r3, PRIMASK
 8002214:	60fb      	str	r3, [r7, #12]
  return(result);
 8002216:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002218:	637b      	str	r3, [r7, #52]	; 0x34
 800221a:	2301      	movs	r3, #1
 800221c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	f383 8810 	msr	PRIMASK, r3
}
 8002224:	46c0      	nop			; (mov r8, r8)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4921      	ldr	r1, [pc, #132]	; (80022b8 <UART_CheckIdleState+0x14c>)
 8002232:	400a      	ands	r2, r1
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002238:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f383 8810 	msr	PRIMASK, r3
}
 8002240:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002242:	f3ef 8310 	mrs	r3, PRIMASK
 8002246:	61bb      	str	r3, [r7, #24]
  return(result);
 8002248:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800224a:	633b      	str	r3, [r7, #48]	; 0x30
 800224c:	2301      	movs	r3, #1
 800224e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f383 8810 	msr	PRIMASK, r3
}
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2101      	movs	r1, #1
 8002264:	438a      	bics	r2, r1
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	f383 8810 	msr	PRIMASK, r3
}
 8002272:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2280      	movs	r2, #128	; 0x80
 8002278:	2120      	movs	r1, #32
 800227a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2278      	movs	r2, #120	; 0x78
 8002280:	2100      	movs	r1, #0
 8002282:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e011      	b.n	80022ac <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2220      	movs	r2, #32
 800228c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2280      	movs	r2, #128	; 0x80
 8002292:	2120      	movs	r1, #32
 8002294:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2278      	movs	r2, #120	; 0x78
 80022a6:	2100      	movs	r1, #0
 80022a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	0018      	movs	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b010      	add	sp, #64	; 0x40
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	01ffffff 	.word	0x01ffffff
 80022b8:	fffffedf 	.word	0xfffffedf

080022bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	1dfb      	adds	r3, r7, #7
 80022ca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022cc:	e04b      	b.n	8002366 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	3301      	adds	r3, #1
 80022d2:	d048      	beq.n	8002366 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d4:	f7fe fb16 	bl	8000904 <HAL_GetTick>
 80022d8:	0002      	movs	r2, r0
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d302      	bcc.n	80022ea <UART_WaitOnFlagUntilTimeout+0x2e>
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e04b      	b.n	8002386 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2204      	movs	r2, #4
 80022f6:	4013      	ands	r3, r2
 80022f8:	d035      	beq.n	8002366 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	2208      	movs	r2, #8
 8002302:	4013      	ands	r3, r2
 8002304:	2b08      	cmp	r3, #8
 8002306:	d111      	bne.n	800232c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2208      	movs	r2, #8
 800230e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	0018      	movs	r0, r3
 8002314:	f000 f83c 	bl	8002390 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2284      	movs	r2, #132	; 0x84
 800231c:	2108      	movs	r1, #8
 800231e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2278      	movs	r2, #120	; 0x78
 8002324:	2100      	movs	r1, #0
 8002326:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e02c      	b.n	8002386 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	69da      	ldr	r2, [r3, #28]
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	401a      	ands	r2, r3
 8002338:	2380      	movs	r3, #128	; 0x80
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	429a      	cmp	r2, r3
 800233e:	d112      	bne.n	8002366 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2280      	movs	r2, #128	; 0x80
 8002346:	0112      	lsls	r2, r2, #4
 8002348:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	0018      	movs	r0, r3
 800234e:	f000 f81f 	bl	8002390 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2284      	movs	r2, #132	; 0x84
 8002356:	2120      	movs	r1, #32
 8002358:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2278      	movs	r2, #120	; 0x78
 800235e:	2100      	movs	r1, #0
 8002360:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e00f      	b.n	8002386 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	4013      	ands	r3, r2
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	425a      	negs	r2, r3
 8002376:	4153      	adcs	r3, r2
 8002378:	b2db      	uxtb	r3, r3
 800237a:	001a      	movs	r2, r3
 800237c:	1dfb      	adds	r3, r7, #7
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d0a4      	beq.n	80022ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	0018      	movs	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	b004      	add	sp, #16
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08e      	sub	sp, #56	; 0x38
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002398:	f3ef 8310 	mrs	r3, PRIMASK
 800239c:	617b      	str	r3, [r7, #20]
  return(result);
 800239e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023a0:	637b      	str	r3, [r7, #52]	; 0x34
 80023a2:	2301      	movs	r3, #1
 80023a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	f383 8810 	msr	PRIMASK, r3
}
 80023ac:	46c0      	nop			; (mov r8, r8)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4926      	ldr	r1, [pc, #152]	; (8002454 <UART_EndRxTransfer+0xc4>)
 80023ba:	400a      	ands	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f383 8810 	msr	PRIMASK, r3
}
 80023c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023ca:	f3ef 8310 	mrs	r3, PRIMASK
 80023ce:	623b      	str	r3, [r7, #32]
  return(result);
 80023d0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023d2:	633b      	str	r3, [r7, #48]	; 0x30
 80023d4:	2301      	movs	r3, #1
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	f383 8810 	msr	PRIMASK, r3
}
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2101      	movs	r1, #1
 80023ec:	438a      	bics	r2, r1
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f6:	f383 8810 	msr	PRIMASK, r3
}
 80023fa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002400:	2b01      	cmp	r3, #1
 8002402:	d118      	bne.n	8002436 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002404:	f3ef 8310 	mrs	r3, PRIMASK
 8002408:	60bb      	str	r3, [r7, #8]
  return(result);
 800240a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800240c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800240e:	2301      	movs	r3, #1
 8002410:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f383 8810 	msr	PRIMASK, r3
}
 8002418:	46c0      	nop			; (mov r8, r8)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2110      	movs	r1, #16
 8002426:	438a      	bics	r2, r1
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	f383 8810 	msr	PRIMASK, r3
}
 8002434:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2280      	movs	r2, #128	; 0x80
 800243a:	2120      	movs	r1, #32
 800243c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	669a      	str	r2, [r3, #104]	; 0x68
}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	46bd      	mov	sp, r7
 800244e:	b00e      	add	sp, #56	; 0x38
 8002450:	bd80      	pop	{r7, pc}
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	fffffedf 	.word	0xfffffedf

08002458 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	0002      	movs	r2, r0
 8002460:	1dbb      	adds	r3, r7, #6
 8002462:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002468:	1dbb      	adds	r3, r7, #6
 800246a:	2200      	movs	r2, #0
 800246c:	5e9b      	ldrsh	r3, [r3, r2]
 800246e:	2b84      	cmp	r3, #132	; 0x84
 8002470:	d006      	beq.n	8002480 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8002472:	1dbb      	adds	r3, r7, #6
 8002474:	2200      	movs	r2, #0
 8002476:	5e9a      	ldrsh	r2, [r3, r2]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	18d3      	adds	r3, r2, r3
 800247c:	3303      	adds	r3, #3
 800247e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002480:	68fb      	ldr	r3, [r7, #12]
}
 8002482:	0018      	movs	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	b004      	add	sp, #16
 8002488:	bd80      	pop	{r7, pc}

0800248a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002490:	f3ef 8305 	mrs	r3, IPSR
 8002494:	607b      	str	r3, [r7, #4]
  return(result);
 8002496:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002498:	1e5a      	subs	r2, r3, #1
 800249a:	4193      	sbcs	r3, r2
 800249c:	b2db      	uxtb	r3, r3
}
 800249e:	0018      	movs	r0, r3
 80024a0:	46bd      	mov	sp, r7
 80024a2:	b002      	add	sp, #8
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80024aa:	f000 ffd7 	bl	800345c <vTaskStartScheduler>
  
  return osOK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	0018      	movs	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80024b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024b8:	b089      	sub	sp, #36	; 0x24
 80024ba:	af04      	add	r7, sp, #16
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d020      	beq.n	800250a <osThreadCreate+0x54>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d01c      	beq.n	800250a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685c      	ldr	r4, [r3, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681d      	ldr	r5, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691e      	ldr	r6, [r3, #16]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2208      	movs	r2, #8
 80024e0:	5e9b      	ldrsh	r3, [r3, r2]
 80024e2:	0018      	movs	r0, r3
 80024e4:	f7ff ffb8 	bl	8002458 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024f0:	6839      	ldr	r1, [r7, #0]
 80024f2:	9302      	str	r3, [sp, #8]
 80024f4:	9201      	str	r2, [sp, #4]
 80024f6:	9000      	str	r0, [sp, #0]
 80024f8:	000b      	movs	r3, r1
 80024fa:	0032      	movs	r2, r6
 80024fc:	0029      	movs	r1, r5
 80024fe:	0020      	movs	r0, r4
 8002500:	f000 fe18 	bl	8003134 <xTaskCreateStatic>
 8002504:	0003      	movs	r3, r0
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	e01d      	b.n	8002546 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685c      	ldr	r4, [r3, #4]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002516:	b29e      	uxth	r6, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2208      	movs	r2, #8
 800251c:	5e9b      	ldrsh	r3, [r3, r2]
 800251e:	0018      	movs	r0, r3
 8002520:	f7ff ff9a 	bl	8002458 <makeFreeRtosPriority>
 8002524:	0001      	movs	r1, r0
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	230c      	movs	r3, #12
 800252a:	18fb      	adds	r3, r7, r3
 800252c:	9301      	str	r3, [sp, #4]
 800252e:	9100      	str	r1, [sp, #0]
 8002530:	0013      	movs	r3, r2
 8002532:	0032      	movs	r2, r6
 8002534:	0029      	movs	r1, r5
 8002536:	0020      	movs	r0, r4
 8002538:	f000 fe3f 	bl	80031ba <xTaskCreate>
 800253c:	0003      	movs	r3, r0
 800253e:	2b01      	cmp	r3, #1
 8002540:	d001      	beq.n	8002546 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8002542:	2300      	movs	r3, #0
 8002544:	e000      	b.n	8002548 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002546:	68fb      	ldr	r3, [r7, #12]
}
 8002548:	0018      	movs	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	b005      	add	sp, #20
 800254e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002550 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <osDelay+0x16>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	e000      	b.n	8002568 <osDelay+0x18>
 8002566:	2301      	movs	r3, #1
 8002568:	0018      	movs	r0, r3
 800256a:	f000 ff51 	bl	8003410 <vTaskDelay>
  
  return osOK;
 800256e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002570:	0018      	movs	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	b004      	add	sp, #16
 8002576:	bd80      	pop	{r7, pc}

08002578 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002578:	b590      	push	{r4, r7, lr}
 800257a:	b085      	sub	sp, #20
 800257c:	af02      	add	r7, sp, #8
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d011      	beq.n	80025ae <osMessageCreate+0x36>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00d      	beq.n	80025ae <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6859      	ldr	r1, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	2400      	movs	r4, #0
 80025a4:	9400      	str	r4, [sp, #0]
 80025a6:	f000 f9b8 	bl	800291a <xQueueGenericCreateStatic>
 80025aa:	0003      	movs	r3, r0
 80025ac:	e008      	b.n	80025c0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	0019      	movs	r1, r3
 80025ba:	f000 f9f9 	bl	80029b0 <xQueueGenericCreate>
 80025be:	0003      	movs	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80025c0:	0018      	movs	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b003      	add	sp, #12
 80025c6:	bd90      	pop	{r4, r7, pc}

080025c8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <osMessagePut+0x1e>
    ticks = 1;
 80025e2:	2301      	movs	r3, #1
 80025e4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80025e6:	f7ff ff50 	bl	800248a <inHandlerMode>
 80025ea:	1e03      	subs	r3, r0, #0
 80025ec:	d014      	beq.n	8002618 <osMessagePut+0x50>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80025ee:	2310      	movs	r3, #16
 80025f0:	18fa      	adds	r2, r7, r3
 80025f2:	2308      	movs	r3, #8
 80025f4:	18f9      	adds	r1, r7, r3
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	2300      	movs	r3, #0
 80025fa:	f000 faf5 	bl	8002be8 <xQueueGenericSendFromISR>
 80025fe:	0003      	movs	r3, r0
 8002600:	2b01      	cmp	r3, #1
 8002602:	d001      	beq.n	8002608 <osMessagePut+0x40>
      return osErrorOS;
 8002604:	23ff      	movs	r3, #255	; 0xff
 8002606:	e014      	b.n	8002632 <osMessagePut+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d010      	beq.n	8002630 <osMessagePut+0x68>
 800260e:	4b0b      	ldr	r3, [pc, #44]	; (800263c <osMessagePut+0x74>)
 8002610:	2280      	movs	r2, #128	; 0x80
 8002612:	0552      	lsls	r2, r2, #21
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	e00b      	b.n	8002630 <osMessagePut+0x68>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	2308      	movs	r3, #8
 800261c:	18f9      	adds	r1, r7, r3
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	2300      	movs	r3, #0
 8002622:	f000 fa1d 	bl	8002a60 <xQueueGenericSend>
 8002626:	0003      	movs	r3, r0
 8002628:	2b01      	cmp	r3, #1
 800262a:	d001      	beq.n	8002630 <osMessagePut+0x68>
      return osErrorOS;
 800262c:	23ff      	movs	r3, #255	; 0xff
 800262e:	e000      	b.n	8002632 <osMessagePut+0x6a>
    }
  }
  
  return osOK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	0018      	movs	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	b006      	add	sp, #24
 8002638:	bd80      	pop	{r7, pc}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	e000ed04 	.word	0xe000ed04

08002640 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002640:	b590      	push	{r4, r7, lr}
 8002642:	b08b      	sub	sp, #44	; 0x2c
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800264c:	2114      	movs	r1, #20
 800264e:	187b      	adds	r3, r7, r1
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	609a      	str	r2, [r3, #8]
  event.value.v = 0;
 8002654:	187b      	adds	r3, r7, r1
 8002656:	2200      	movs	r2, #0
 8002658:	605a      	str	r2, [r3, #4]
  
  if (queue_id == NULL) {
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d107      	bne.n	8002670 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8002660:	187b      	adds	r3, r7, r1
 8002662:	2280      	movs	r2, #128	; 0x80
 8002664:	601a      	str	r2, [r3, #0]
    return event;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	187a      	adds	r2, r7, r1
 800266a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800266c:	c313      	stmia	r3!, {r0, r1, r4}
 800266e:	e051      	b.n	8002714 <osMessageGet+0xd4>
  }
  
  taskWoken = pdFALSE;
 8002670:	2300      	movs	r3, #0
 8002672:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3301      	adds	r3, #1
 800267c:	d103      	bne.n	8002686 <osMessageGet+0x46>
    ticks = portMAX_DELAY;
 800267e:	2301      	movs	r3, #1
 8002680:	425b      	negs	r3, r3
 8002682:	627b      	str	r3, [r7, #36]	; 0x24
 8002684:	e009      	b.n	800269a <osMessageGet+0x5a>
  }
  else if (millisec != 0) {
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d006      	beq.n	800269a <osMessageGet+0x5a>
    ticks = millisec / portTICK_PERIOD_MS;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <osMessageGet+0x5a>
      ticks = 1;
 8002696:	2301      	movs	r3, #1
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800269a:	f7ff fef6 	bl	800248a <inHandlerMode>
 800269e:	1e03      	subs	r3, r0, #0
 80026a0:	d01b      	beq.n	80026da <osMessageGet+0x9a>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80026a2:	2320      	movs	r3, #32
 80026a4:	18fa      	adds	r2, r7, r3
 80026a6:	2414      	movs	r4, #20
 80026a8:	193b      	adds	r3, r7, r4
 80026aa:	1d19      	adds	r1, r3, #4
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	0018      	movs	r0, r3
 80026b0:	f000 fbc0 	bl	8002e34 <xQueueReceiveFromISR>
 80026b4:	0003      	movs	r3, r0
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d103      	bne.n	80026c2 <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
 80026ba:	193b      	adds	r3, r7, r4
 80026bc:	2210      	movs	r2, #16
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	e003      	b.n	80026ca <osMessageGet+0x8a>
    }
    else {
      event.status = osOK;
 80026c2:	2314      	movs	r3, #20
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d01c      	beq.n	800270a <osMessageGet+0xca>
 80026d0:	4b12      	ldr	r3, [pc, #72]	; (800271c <osMessageGet+0xdc>)
 80026d2:	2280      	movs	r2, #128	; 0x80
 80026d4:	0552      	lsls	r2, r2, #21
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	e017      	b.n	800270a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80026da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026dc:	2414      	movs	r4, #20
 80026de:	193b      	adds	r3, r7, r4
 80026e0:	1d19      	adds	r1, r3, #4
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	0018      	movs	r0, r3
 80026e6:	f000 faf0 	bl	8002cca <xQueueReceive>
 80026ea:	0003      	movs	r3, r0
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d103      	bne.n	80026f8 <osMessageGet+0xb8>
      /* We have mail */
      event.status = osEventMessage;
 80026f0:	193b      	adds	r3, r7, r4
 80026f2:	2210      	movs	r2, #16
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	e008      	b.n	800270a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <osMessageGet+0xc2>
 80026fe:	2200      	movs	r2, #0
 8002700:	e000      	b.n	8002704 <osMessageGet+0xc4>
 8002702:	2240      	movs	r2, #64	; 0x40
 8002704:	2314      	movs	r3, #20
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	601a      	str	r2, [r3, #0]
    }
  }
  
  return event;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2214      	movs	r2, #20
 800270e:	18ba      	adds	r2, r7, r2
 8002710:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002712:	c313      	stmia	r3!, {r0, r1, r4}
}
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	46bd      	mov	sp, r7
 8002718:	b00b      	add	sp, #44	; 0x2c
 800271a:	bd90      	pop	{r4, r7, pc}
 800271c:	e000ed04 	.word	0xe000ed04

08002720 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3308      	adds	r3, #8
 800272c:	001a      	movs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	4252      	negs	r2, r2
 8002738:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3308      	adds	r3, #8
 800273e:	001a      	movs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3308      	adds	r3, #8
 8002748:	001a      	movs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002754:	46c0      	nop			; (mov r8, r8)
 8002756:	46bd      	mov	sp, r7
 8002758:	b002      	add	sp, #8
 800275a:	bd80      	pop	{r7, pc}

0800275c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	46bd      	mov	sp, r7
 800276e:	b002      	add	sp, #8
 8002770:	bd80      	pop	{r7, pc}

08002772 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b084      	sub	sp, #16
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	601a      	str	r2, [r3, #0]
}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b004      	add	sp, #16
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	3301      	adds	r3, #1
 80027ca:	d103      	bne.n	80027d4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	e00c      	b.n	80027ee <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3308      	adds	r3, #8
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	e002      	b.n	80027e2 <vListInsert+0x2c>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d2f6      	bcs.n	80027dc <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	601a      	str	r2, [r3, #0]
}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	46bd      	mov	sp, r7
 800281e:	b004      	add	sp, #16
 8002820:	bd80      	pop	{r7, pc}

08002822 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b084      	sub	sp, #16
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6892      	ldr	r2, [r2, #8]
 8002838:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6852      	ldr	r2, [r2, #4]
 8002842:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	429a      	cmp	r2, r3
 800284c:	d103      	bne.n	8002856 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	1e5a      	subs	r2, r3, #1
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
}
 800286a:	0018      	movs	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	b004      	add	sp, #16
 8002870:	bd80      	pop	{r7, pc}

08002872 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <xQueueGenericReset+0x18>
 8002886:	b672      	cpsid	i
 8002888:	e7fe      	b.n	8002888 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800288a:	f001 faf1 	bl	8003e70 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	434b      	muls	r3, r1
 800289c:	18d2      	adds	r2, r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b8:	1e59      	subs	r1, r3, #1
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	434b      	muls	r3, r1
 80028c0:	18d2      	adds	r2, r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2244      	movs	r2, #68	; 0x44
 80028ca:	21ff      	movs	r1, #255	; 0xff
 80028cc:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2245      	movs	r2, #69	; 0x45
 80028d2:	21ff      	movs	r1, #255	; 0xff
 80028d4:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10d      	bne.n	80028f8 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d013      	beq.n	800290c <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	3310      	adds	r3, #16
 80028e8:	0018      	movs	r0, r3
 80028ea:	f000 ffc1 	bl	8003870 <xTaskRemoveFromEventList>
 80028ee:	1e03      	subs	r3, r0, #0
 80028f0:	d00c      	beq.n	800290c <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80028f2:	f001 faad 	bl	8003e50 <vPortYield>
 80028f6:	e009      	b.n	800290c <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	3310      	adds	r3, #16
 80028fc:	0018      	movs	r0, r3
 80028fe:	f7ff ff0f 	bl	8002720 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	3324      	adds	r3, #36	; 0x24
 8002906:	0018      	movs	r0, r3
 8002908:	f7ff ff0a 	bl	8002720 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800290c:	f001 fac2 	bl	8003e94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002910:	2301      	movs	r3, #1
}
 8002912:	0018      	movs	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	b004      	add	sp, #16
 8002918:	bd80      	pop	{r7, pc}

0800291a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800291a:	b590      	push	{r4, r7, lr}
 800291c:	b089      	sub	sp, #36	; 0x24
 800291e:	af02      	add	r7, sp, #8
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <xQueueGenericCreateStatic+0x18>
 800292e:	b672      	cpsid	i
 8002930:	e7fe      	b.n	8002930 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <xQueueGenericCreateStatic+0x22>
 8002938:	b672      	cpsid	i
 800293a:	e7fe      	b.n	800293a <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <xQueueGenericCreateStatic+0x2e>
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <xQueueGenericCreateStatic+0x32>
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <xQueueGenericCreateStatic+0x34>
 800294c:	2300      	movs	r3, #0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <xQueueGenericCreateStatic+0x3c>
 8002952:	b672      	cpsid	i
 8002954:	e7fe      	b.n	8002954 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d102      	bne.n	8002962 <xQueueGenericCreateStatic+0x48>
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <xQueueGenericCreateStatic+0x4c>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <xQueueGenericCreateStatic+0x4e>
 8002966:	2300      	movs	r3, #0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <xQueueGenericCreateStatic+0x56>
 800296c:	b672      	cpsid	i
 800296e:	e7fe      	b.n	800296e <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002970:	2348      	movs	r3, #72	; 0x48
 8002972:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	2b48      	cmp	r3, #72	; 0x48
 8002978:	d001      	beq.n	800297e <xQueueGenericCreateStatic+0x64>
 800297a:	b672      	cpsid	i
 800297c:	e7fe      	b.n	800297c <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00e      	beq.n	80029a6 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2246      	movs	r2, #70	; 0x46
 800298c:	2101      	movs	r1, #1
 800298e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002990:	2328      	movs	r3, #40	; 0x28
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	781c      	ldrb	r4, [r3, #0]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	0023      	movs	r3, r4
 80029a2:	f000 f83b 	bl	8002a1c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80029a6:	697b      	ldr	r3, [r7, #20]
	}
 80029a8:	0018      	movs	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	b007      	add	sp, #28
 80029ae:	bd90      	pop	{r4, r7, pc}

080029b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80029b0:	b590      	push	{r4, r7, lr}
 80029b2:	b08b      	sub	sp, #44	; 0x2c
 80029b4:	af02      	add	r7, sp, #8
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	1dfb      	adds	r3, r7, #7
 80029bc:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <xQueueGenericCreate+0x18>
 80029c4:	b672      	cpsid	i
 80029c6:	e7fe      	b.n	80029c6 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d102      	bne.n	80029d4 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	e003      	b.n	80029dc <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	4353      	muls	r3, r2
 80029da:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	3348      	adds	r3, #72	; 0x48
 80029e0:	0018      	movs	r0, r3
 80029e2:	f001 fadd 	bl	8003fa0 <pvPortMalloc>
 80029e6:	0003      	movs	r3, r0
 80029e8:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d010      	beq.n	8002a12 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	3348      	adds	r3, #72	; 0x48
 80029f4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	2246      	movs	r2, #70	; 0x46
 80029fa:	2100      	movs	r1, #0
 80029fc:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029fe:	1dfb      	adds	r3, r7, #7
 8002a00:	781c      	ldrb	r4, [r3, #0]
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	0023      	movs	r3, r4
 8002a0e:	f000 f805 	bl	8002a1c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002a12:	69bb      	ldr	r3, [r7, #24]
	}
 8002a14:	0018      	movs	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	b009      	add	sp, #36	; 0x24
 8002a1a:	bd90      	pop	{r4, r7, pc}

08002a1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
 8002a28:	001a      	movs	r2, r3
 8002a2a:	1cfb      	adds	r3, r7, #3
 8002a2c:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d103      	bne.n	8002a3c <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	e002      	b.n	8002a42 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2101      	movs	r1, #1
 8002a52:	0018      	movs	r0, r3
 8002a54:	f7ff ff0d 	bl	8002872 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a58:	46c0      	nop			; (mov r8, r8)
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b004      	add	sp, #16
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08a      	sub	sp, #40	; 0x28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <xQueueGenericSend+0x20>
 8002a7c:	b672      	cpsid	i
 8002a7e:	e7fe      	b.n	8002a7e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d103      	bne.n	8002a8e <xQueueGenericSend+0x2e>
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <xQueueGenericSend+0x32>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <xQueueGenericSend+0x34>
 8002a92:	2300      	movs	r3, #0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <xQueueGenericSend+0x3c>
 8002a98:	b672      	cpsid	i
 8002a9a:	e7fe      	b.n	8002a9a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d103      	bne.n	8002aaa <xQueueGenericSend+0x4a>
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <xQueueGenericSend+0x4e>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <xQueueGenericSend+0x50>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <xQueueGenericSend+0x58>
 8002ab4:	b672      	cpsid	i
 8002ab6:	e7fe      	b.n	8002ab6 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ab8:	f001 f872 	bl	8003ba0 <xTaskGetSchedulerState>
 8002abc:	1e03      	subs	r3, r0, #0
 8002abe:	d102      	bne.n	8002ac6 <xQueueGenericSend+0x66>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <xQueueGenericSend+0x6a>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <xQueueGenericSend+0x6c>
 8002aca:	2300      	movs	r3, #0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <xQueueGenericSend+0x74>
 8002ad0:	b672      	cpsid	i
 8002ad2:	e7fe      	b.n	8002ad2 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ad4:	f001 f9cc 	bl	8003e70 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d302      	bcc.n	8002aea <xQueueGenericSend+0x8a>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d11e      	bne.n	8002b28 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	0018      	movs	r0, r3
 8002af2:	f000 fa02 	bl	8002efa <prvCopyDataToQueue>
 8002af6:	0003      	movs	r3, r0
 8002af8:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d009      	beq.n	8002b16 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	3324      	adds	r3, #36	; 0x24
 8002b06:	0018      	movs	r0, r3
 8002b08:	f000 feb2 	bl	8003870 <xTaskRemoveFromEventList>
 8002b0c:	1e03      	subs	r3, r0, #0
 8002b0e:	d007      	beq.n	8002b20 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b10:	f001 f99e 	bl	8003e50 <vPortYield>
 8002b14:	e004      	b.n	8002b20 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b1c:	f001 f998 	bl	8003e50 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b20:	f001 f9b8 	bl	8003e94 <vPortExitCritical>
				return pdPASS;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e05b      	b.n	8002be0 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d103      	bne.n	8002b36 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b2e:	f001 f9b1 	bl	8003e94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	e054      	b.n	8002be0 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d106      	bne.n	8002b4a <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b3c:	2314      	movs	r3, #20
 8002b3e:	18fb      	adds	r3, r7, r3
 8002b40:	0018      	movs	r0, r3
 8002b42:	f000 fef1 	bl	8003928 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b46:	2301      	movs	r3, #1
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b4a:	f001 f9a3 	bl	8003e94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b4e:	f000 fcd3 	bl	80034f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b52:	f001 f98d 	bl	8003e70 <vPortEnterCritical>
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	2244      	movs	r2, #68	; 0x44
 8002b5a:	5c9b      	ldrb	r3, [r3, r2]
 8002b5c:	b25b      	sxtb	r3, r3
 8002b5e:	3301      	adds	r3, #1
 8002b60:	d103      	bne.n	8002b6a <xQueueGenericSend+0x10a>
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	2244      	movs	r2, #68	; 0x44
 8002b66:	2100      	movs	r1, #0
 8002b68:	5499      	strb	r1, [r3, r2]
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	2245      	movs	r2, #69	; 0x45
 8002b6e:	5c9b      	ldrb	r3, [r3, r2]
 8002b70:	b25b      	sxtb	r3, r3
 8002b72:	3301      	adds	r3, #1
 8002b74:	d103      	bne.n	8002b7e <xQueueGenericSend+0x11e>
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	2245      	movs	r2, #69	; 0x45
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	5499      	strb	r1, [r3, r2]
 8002b7e:	f001 f989 	bl	8003e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b82:	1d3a      	adds	r2, r7, #4
 8002b84:	2314      	movs	r3, #20
 8002b86:	18fb      	adds	r3, r7, r3
 8002b88:	0011      	movs	r1, r2
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f000 fee0 	bl	8003950 <xTaskCheckForTimeOut>
 8002b90:	1e03      	subs	r3, r0, #0
 8002b92:	d11e      	bne.n	8002bd2 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	0018      	movs	r0, r3
 8002b98:	f000 fab4 	bl	8003104 <prvIsQueueFull>
 8002b9c:	1e03      	subs	r3, r0, #0
 8002b9e:	d011      	beq.n	8002bc4 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	3310      	adds	r3, #16
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	0011      	movs	r1, r2
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f000 fe43 	bl	8003834 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f000 fa33 	bl	800301c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002bb6:	f000 fcab 	bl	8003510 <xTaskResumeAll>
 8002bba:	1e03      	subs	r3, r0, #0
 8002bbc:	d18a      	bne.n	8002ad4 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8002bbe:	f001 f947 	bl	8003e50 <vPortYield>
 8002bc2:	e787      	b.n	8002ad4 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f000 fa28 	bl	800301c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002bcc:	f000 fca0 	bl	8003510 <xTaskResumeAll>
 8002bd0:	e780      	b.n	8002ad4 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f000 fa21 	bl	800301c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bda:	f000 fc99 	bl	8003510 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002bde:	2300      	movs	r3, #0
		}
	}
}
 8002be0:	0018      	movs	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b00a      	add	sp, #40	; 0x28
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002be8:	b590      	push	{r4, r7, lr}
 8002bea:	b089      	sub	sp, #36	; 0x24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <xQueueGenericSendFromISR+0x1c>
 8002c00:	b672      	cpsid	i
 8002c02:	e7fe      	b.n	8002c02 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d103      	bne.n	8002c12 <xQueueGenericSendFromISR+0x2a>
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <xQueueGenericSendFromISR+0x2e>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <xQueueGenericSendFromISR+0x30>
 8002c16:	2300      	movs	r3, #0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <xQueueGenericSendFromISR+0x38>
 8002c1c:	b672      	cpsid	i
 8002c1e:	e7fe      	b.n	8002c1e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d103      	bne.n	8002c2e <xQueueGenericSendFromISR+0x46>
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <xQueueGenericSendFromISR+0x4a>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <xQueueGenericSendFromISR+0x4c>
 8002c32:	2300      	movs	r3, #0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <xQueueGenericSendFromISR+0x54>
 8002c38:	b672      	cpsid	i
 8002c3a:	e7fe      	b.n	8002c3a <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c3c:	f001 f942 	bl	8003ec4 <ulSetInterruptMaskFromISR>
 8002c40:	0003      	movs	r3, r0
 8002c42:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d302      	bcc.n	8002c56 <xQueueGenericSendFromISR+0x6e>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d12e      	bne.n	8002cb4 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c56:	2413      	movs	r4, #19
 8002c58:	193b      	adds	r3, r7, r4
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	2145      	movs	r1, #69	; 0x45
 8002c5e:	5c52      	ldrb	r2, [r2, r1]
 8002c60:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	68b9      	ldr	r1, [r7, #8]
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f000 f946 	bl	8002efa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c6e:	193b      	adds	r3, r7, r4
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	b25b      	sxtb	r3, r3
 8002c74:	3301      	adds	r3, #1
 8002c76:	d111      	bne.n	8002c9c <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d016      	beq.n	8002cae <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	3324      	adds	r3, #36	; 0x24
 8002c84:	0018      	movs	r0, r3
 8002c86:	f000 fdf3 	bl	8003870 <xTaskRemoveFromEventList>
 8002c8a:	1e03      	subs	r3, r0, #0
 8002c8c:	d00f      	beq.n	8002cae <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00c      	beq.n	8002cae <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	e008      	b.n	8002cae <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c9c:	2313      	movs	r3, #19
 8002c9e:	18fb      	adds	r3, r7, r3
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	b259      	sxtb	r1, r3
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	2245      	movs	r2, #69	; 0x45
 8002cac:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	61fb      	str	r3, [r7, #28]
		{
 8002cb2:	e001      	b.n	8002cb8 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f001 f908 	bl	8003ed0 <vClearInterruptMaskFromISR>

	return xReturn;
 8002cc0:	69fb      	ldr	r3, [r7, #28]
}
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	b009      	add	sp, #36	; 0x24
 8002cc8:	bd90      	pop	{r4, r7, pc}

08002cca <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b08a      	sub	sp, #40	; 0x28
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <xQueueReceive+0x1e>
 8002ce4:	b672      	cpsid	i
 8002ce6:	e7fe      	b.n	8002ce6 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d103      	bne.n	8002cf6 <xQueueReceive+0x2c>
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <xQueueReceive+0x30>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <xQueueReceive+0x32>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <xQueueReceive+0x3a>
 8002d00:	b672      	cpsid	i
 8002d02:	e7fe      	b.n	8002d02 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d04:	f000 ff4c 	bl	8003ba0 <xTaskGetSchedulerState>
 8002d08:	1e03      	subs	r3, r0, #0
 8002d0a:	d102      	bne.n	8002d12 <xQueueReceive+0x48>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <xQueueReceive+0x4c>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <xQueueReceive+0x4e>
 8002d16:	2300      	movs	r3, #0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <xQueueReceive+0x56>
 8002d1c:	b672      	cpsid	i
 8002d1e:	e7fe      	b.n	8002d1e <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d20:	f001 f8a6 	bl	8003e70 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d28:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d01a      	beq.n	8002d66 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	0011      	movs	r1, r2
 8002d36:	0018      	movs	r0, r3
 8002d38:	f000 f94a 	bl	8002fd0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	1e5a      	subs	r2, r3, #1
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	3310      	adds	r3, #16
 8002d50:	0018      	movs	r0, r3
 8002d52:	f000 fd8d 	bl	8003870 <xTaskRemoveFromEventList>
 8002d56:	1e03      	subs	r3, r0, #0
 8002d58:	d001      	beq.n	8002d5e <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d5a:	f001 f879 	bl	8003e50 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d5e:	f001 f899 	bl	8003e94 <vPortExitCritical>
				return pdPASS;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e062      	b.n	8002e2c <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d103      	bne.n	8002d74 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d6c:	f001 f892 	bl	8003e94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e05b      	b.n	8002e2c <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d7a:	2314      	movs	r3, #20
 8002d7c:	18fb      	adds	r3, r7, r3
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f000 fdd2 	bl	8003928 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d84:	2301      	movs	r3, #1
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d88:	f001 f884 	bl	8003e94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d8c:	f000 fbb4 	bl	80034f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d90:	f001 f86e 	bl	8003e70 <vPortEnterCritical>
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	2244      	movs	r2, #68	; 0x44
 8002d98:	5c9b      	ldrb	r3, [r3, r2]
 8002d9a:	b25b      	sxtb	r3, r3
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	d103      	bne.n	8002da8 <xQueueReceive+0xde>
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	2244      	movs	r2, #68	; 0x44
 8002da4:	2100      	movs	r1, #0
 8002da6:	5499      	strb	r1, [r3, r2]
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	2245      	movs	r2, #69	; 0x45
 8002dac:	5c9b      	ldrb	r3, [r3, r2]
 8002dae:	b25b      	sxtb	r3, r3
 8002db0:	3301      	adds	r3, #1
 8002db2:	d103      	bne.n	8002dbc <xQueueReceive+0xf2>
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	2245      	movs	r2, #69	; 0x45
 8002db8:	2100      	movs	r1, #0
 8002dba:	5499      	strb	r1, [r3, r2]
 8002dbc:	f001 f86a 	bl	8003e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dc0:	1d3a      	adds	r2, r7, #4
 8002dc2:	2314      	movs	r3, #20
 8002dc4:	18fb      	adds	r3, r7, r3
 8002dc6:	0011      	movs	r1, r2
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f000 fdc1 	bl	8003950 <xTaskCheckForTimeOut>
 8002dce:	1e03      	subs	r3, r0, #0
 8002dd0:	d11e      	bne.n	8002e10 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f000 f97f 	bl	80030d8 <prvIsQueueEmpty>
 8002dda:	1e03      	subs	r3, r0, #0
 8002ddc:	d011      	beq.n	8002e02 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	3324      	adds	r3, #36	; 0x24
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	0011      	movs	r1, r2
 8002de6:	0018      	movs	r0, r3
 8002de8:	f000 fd24 	bl	8003834 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002dec:	6a3b      	ldr	r3, [r7, #32]
 8002dee:	0018      	movs	r0, r3
 8002df0:	f000 f914 	bl	800301c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002df4:	f000 fb8c 	bl	8003510 <xTaskResumeAll>
 8002df8:	1e03      	subs	r3, r0, #0
 8002dfa:	d191      	bne.n	8002d20 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8002dfc:	f001 f828 	bl	8003e50 <vPortYield>
 8002e00:	e78e      	b.n	8002d20 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	0018      	movs	r0, r3
 8002e06:	f000 f909 	bl	800301c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e0a:	f000 fb81 	bl	8003510 <xTaskResumeAll>
 8002e0e:	e787      	b.n	8002d20 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	0018      	movs	r0, r3
 8002e14:	f000 f902 	bl	800301c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e18:	f000 fb7a 	bl	8003510 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f000 f95a 	bl	80030d8 <prvIsQueueEmpty>
 8002e24:	1e03      	subs	r3, r0, #0
 8002e26:	d100      	bne.n	8002e2a <xQueueReceive+0x160>
 8002e28:	e77a      	b.n	8002d20 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e2a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b00a      	add	sp, #40	; 0x28
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002e34:	b590      	push	{r4, r7, lr}
 8002e36:	b08b      	sub	sp, #44	; 0x2c
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <xQueueReceiveFromISR+0x1a>
 8002e4a:	b672      	cpsid	i
 8002e4c:	e7fe      	b.n	8002e4c <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d103      	bne.n	8002e5c <xQueueReceiveFromISR+0x28>
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <xQueueReceiveFromISR+0x2c>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e000      	b.n	8002e62 <xQueueReceiveFromISR+0x2e>
 8002e60:	2300      	movs	r3, #0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <xQueueReceiveFromISR+0x36>
 8002e66:	b672      	cpsid	i
 8002e68:	e7fe      	b.n	8002e68 <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e6a:	f001 f82b 	bl	8003ec4 <ulSetInterruptMaskFromISR>
 8002e6e:	0003      	movs	r3, r0
 8002e70:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e76:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d032      	beq.n	8002ee4 <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002e7e:	2417      	movs	r4, #23
 8002e80:	193b      	adds	r3, r7, r4
 8002e82:	6a3a      	ldr	r2, [r7, #32]
 8002e84:	2144      	movs	r1, #68	; 0x44
 8002e86:	5c52      	ldrb	r2, [r2, r1]
 8002e88:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	0011      	movs	r1, r2
 8002e90:	0018      	movs	r0, r3
 8002e92:	f000 f89d 	bl	8002fd0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	1e5a      	subs	r2, r3, #1
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002e9e:	193b      	adds	r3, r7, r4
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	b25b      	sxtb	r3, r3
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	d111      	bne.n	8002ecc <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d016      	beq.n	8002ede <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	3310      	adds	r3, #16
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f000 fcdb 	bl	8003870 <xTaskRemoveFromEventList>
 8002eba:	1e03      	subs	r3, r0, #0
 8002ebc:	d00f      	beq.n	8002ede <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00c      	beq.n	8002ede <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	e008      	b.n	8002ede <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002ecc:	2317      	movs	r3, #23
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	b259      	sxtb	r1, r3
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	2244      	movs	r2, #68	; 0x44
 8002edc:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee2:	e001      	b.n	8002ee8 <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	0018      	movs	r0, r3
 8002eec:	f000 fff0 	bl	8003ed0 <vClearInterruptMaskFromISR>

	return xReturn;
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	b00b      	add	sp, #44	; 0x2c
 8002ef8:	bd90      	pop	{r4, r7, pc}

08002efa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b086      	sub	sp, #24
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10e      	bne.n	8002f36 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d14e      	bne.n	8002fbe <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f000 fe57 	bl	8003bd8 <xTaskPriorityDisinherit>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	605a      	str	r2, [r3, #4]
 8002f34:	e043      	b.n	8002fbe <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d119      	bne.n	8002f70 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6898      	ldr	r0, [r3, #8]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	0019      	movs	r1, r3
 8002f48:	f001 f9fa 	bl	8004340 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	18d2      	adds	r2, r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d32b      	bcc.n	8002fbe <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	609a      	str	r2, [r3, #8]
 8002f6e:	e026      	b.n	8002fbe <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	68d8      	ldr	r0, [r3, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	f001 f9e0 	bl	8004340 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	425b      	negs	r3, r3
 8002f8a:	18d2      	adds	r2, r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d207      	bcs.n	8002fac <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	425b      	negs	r3, r3
 8002fa6:	18d2      	adds	r2, r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d105      	bne.n	8002fbe <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002fc6:	697b      	ldr	r3, [r7, #20]
}
 8002fc8:	0018      	movs	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	b006      	add	sp, #24
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d018      	beq.n	8003014 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	18d2      	adds	r2, r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d303      	bcc.n	8003004 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68d9      	ldr	r1, [r3, #12]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	0018      	movs	r0, r3
 8003010:	f001 f996 	bl	8004340 <memcpy>
	}
}
 8003014:	46c0      	nop			; (mov r8, r8)
 8003016:	46bd      	mov	sp, r7
 8003018:	b002      	add	sp, #8
 800301a:	bd80      	pop	{r7, pc}

0800301c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003024:	f000 ff24 	bl	8003e70 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003028:	230f      	movs	r3, #15
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	2145      	movs	r1, #69	; 0x45
 8003030:	5c52      	ldrb	r2, [r2, r1]
 8003032:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003034:	e013      	b.n	800305e <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	2b00      	cmp	r3, #0
 800303c:	d016      	beq.n	800306c <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3324      	adds	r3, #36	; 0x24
 8003042:	0018      	movs	r0, r3
 8003044:	f000 fc14 	bl	8003870 <xTaskRemoveFromEventList>
 8003048:	1e03      	subs	r3, r0, #0
 800304a:	d001      	beq.n	8003050 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800304c:	f000 fcd0 	bl	80039f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003050:	210f      	movs	r1, #15
 8003052:	187b      	adds	r3, r7, r1
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	3b01      	subs	r3, #1
 8003058:	b2da      	uxtb	r2, r3
 800305a:	187b      	adds	r3, r7, r1
 800305c:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800305e:	230f      	movs	r3, #15
 8003060:	18fb      	adds	r3, r7, r3
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	b25b      	sxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	dce5      	bgt.n	8003036 <prvUnlockQueue+0x1a>
 800306a:	e000      	b.n	800306e <prvUnlockQueue+0x52>
					break;
 800306c:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2245      	movs	r2, #69	; 0x45
 8003072:	21ff      	movs	r1, #255	; 0xff
 8003074:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003076:	f000 ff0d 	bl	8003e94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800307a:	f000 fef9 	bl	8003e70 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800307e:	230e      	movs	r3, #14
 8003080:	18fb      	adds	r3, r7, r3
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	2144      	movs	r1, #68	; 0x44
 8003086:	5c52      	ldrb	r2, [r2, r1]
 8003088:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800308a:	e013      	b.n	80030b4 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d016      	beq.n	80030c2 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3310      	adds	r3, #16
 8003098:	0018      	movs	r0, r3
 800309a:	f000 fbe9 	bl	8003870 <xTaskRemoveFromEventList>
 800309e:	1e03      	subs	r3, r0, #0
 80030a0:	d001      	beq.n	80030a6 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80030a2:	f000 fca5 	bl	80039f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030a6:	210e      	movs	r1, #14
 80030a8:	187b      	adds	r3, r7, r1
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	187b      	adds	r3, r7, r1
 80030b2:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030b4:	230e      	movs	r3, #14
 80030b6:	18fb      	adds	r3, r7, r3
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	b25b      	sxtb	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	dce5      	bgt.n	800308c <prvUnlockQueue+0x70>
 80030c0:	e000      	b.n	80030c4 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80030c2:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2244      	movs	r2, #68	; 0x44
 80030c8:	21ff      	movs	r1, #255	; 0xff
 80030ca:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80030cc:	f000 fee2 	bl	8003e94 <vPortExitCritical>
}
 80030d0:	46c0      	nop			; (mov r8, r8)
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b004      	add	sp, #16
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030e0:	f000 fec6 	bl	8003e70 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d102      	bne.n	80030f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80030ec:	2301      	movs	r3, #1
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	e001      	b.n	80030f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030f6:	f000 fecd 	bl	8003e94 <vPortExitCritical>

	return xReturn;
 80030fa:	68fb      	ldr	r3, [r7, #12]
}
 80030fc:	0018      	movs	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	b004      	add	sp, #16
 8003102:	bd80      	pop	{r7, pc}

08003104 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800310c:	f000 feb0 	bl	8003e70 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003118:	429a      	cmp	r2, r3
 800311a:	d102      	bne.n	8003122 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800311c:	2301      	movs	r3, #1
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	e001      	b.n	8003126 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003126:	f000 feb5 	bl	8003e94 <vPortExitCritical>

	return xReturn;
 800312a:	68fb      	ldr	r3, [r7, #12]
}
 800312c:	0018      	movs	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	b004      	add	sp, #16
 8003132:	bd80      	pop	{r7, pc}

08003134 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003134:	b590      	push	{r4, r7, lr}
 8003136:	b08d      	sub	sp, #52	; 0x34
 8003138:	af04      	add	r7, sp, #16
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <xTaskCreateStatic+0x18>
 8003148:	b672      	cpsid	i
 800314a:	e7fe      	b.n	800314a <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800314c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <xTaskCreateStatic+0x22>
 8003152:	b672      	cpsid	i
 8003154:	e7fe      	b.n	8003154 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003156:	2354      	movs	r3, #84	; 0x54
 8003158:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2b54      	cmp	r3, #84	; 0x54
 800315e:	d001      	beq.n	8003164 <xTaskCreateStatic+0x30>
 8003160:	b672      	cpsid	i
 8003162:	e7fe      	b.n	8003162 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003166:	2b00      	cmp	r3, #0
 8003168:	d020      	beq.n	80031ac <xTaskCreateStatic+0x78>
 800316a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800316c:	2b00      	cmp	r3, #0
 800316e:	d01d      	beq.n	80031ac <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003172:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003178:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	2251      	movs	r2, #81	; 0x51
 800317e:	2102      	movs	r1, #2
 8003180:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003182:	683c      	ldr	r4, [r7, #0]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	68b9      	ldr	r1, [r7, #8]
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	2300      	movs	r3, #0
 800318c:	9303      	str	r3, [sp, #12]
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	9302      	str	r3, [sp, #8]
 8003192:	2318      	movs	r3, #24
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	9301      	str	r3, [sp, #4]
 8003198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	0023      	movs	r3, r4
 800319e:	f000 f859 	bl	8003254 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	0018      	movs	r0, r3
 80031a6:	f000 f8cf 	bl	8003348 <prvAddNewTaskToReadyList>
 80031aa:	e001      	b.n	80031b0 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80031b0:	69bb      	ldr	r3, [r7, #24]
	}
 80031b2:	0018      	movs	r0, r3
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b009      	add	sp, #36	; 0x24
 80031b8:	bd90      	pop	{r4, r7, pc}

080031ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80031ba:	b590      	push	{r4, r7, lr}
 80031bc:	b08d      	sub	sp, #52	; 0x34
 80031be:	af04      	add	r7, sp, #16
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	603b      	str	r3, [r7, #0]
 80031c6:	1dbb      	adds	r3, r7, #6
 80031c8:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031ca:	1dbb      	adds	r3, r7, #6
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	0018      	movs	r0, r3
 80031d2:	f000 fee5 	bl	8003fa0 <pvPortMalloc>
 80031d6:	0003      	movs	r3, r0
 80031d8:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d010      	beq.n	8003202 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80031e0:	2054      	movs	r0, #84	; 0x54
 80031e2:	f000 fedd 	bl	8003fa0 <pvPortMalloc>
 80031e6:	0003      	movs	r3, r0
 80031e8:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	631a      	str	r2, [r3, #48]	; 0x30
 80031f6:	e006      	b.n	8003206 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	0018      	movs	r0, r3
 80031fc:	f000 ff76 	bl	80040ec <vPortFree>
 8003200:	e001      	b.n	8003206 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003202:	2300      	movs	r3, #0
 8003204:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d01a      	beq.n	8003242 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	2251      	movs	r2, #81	; 0x51
 8003210:	2100      	movs	r1, #0
 8003212:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003214:	1dbb      	adds	r3, r7, #6
 8003216:	881a      	ldrh	r2, [r3, #0]
 8003218:	683c      	ldr	r4, [r7, #0]
 800321a:	68b9      	ldr	r1, [r7, #8]
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	2300      	movs	r3, #0
 8003220:	9303      	str	r3, [sp, #12]
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	9302      	str	r3, [sp, #8]
 8003226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003228:	9301      	str	r3, [sp, #4]
 800322a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	0023      	movs	r3, r4
 8003230:	f000 f810 	bl	8003254 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	0018      	movs	r0, r3
 8003238:	f000 f886 	bl	8003348 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800323c:	2301      	movs	r3, #1
 800323e:	61bb      	str	r3, [r7, #24]
 8003240:	e002      	b.n	8003248 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003242:	2301      	movs	r3, #1
 8003244:	425b      	negs	r3, r3
 8003246:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003248:	69bb      	ldr	r3, [r7, #24]
	}
 800324a:	0018      	movs	r0, r3
 800324c:	46bd      	mov	sp, r7
 800324e:	b009      	add	sp, #36	; 0x24
 8003250:	bd90      	pop	{r4, r7, pc}
	...

08003254 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
 8003260:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4936      	ldr	r1, [pc, #216]	; (8003344 <prvInitialiseNewTask+0xf0>)
 800326a:	468c      	mov	ip, r1
 800326c:	4463      	add	r3, ip
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	18d3      	adds	r3, r2, r3
 8003272:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	2207      	movs	r2, #7
 8003278:	4393      	bics	r3, r2
 800327a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	2207      	movs	r2, #7
 8003280:	4013      	ands	r3, r2
 8003282:	d001      	beq.n	8003288 <prvInitialiseNewTask+0x34>
 8003284:	b672      	cpsid	i
 8003286:	e7fe      	b.n	8003286 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	e013      	b.n	80032b6 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	18d3      	adds	r3, r2, r3
 8003294:	7818      	ldrb	r0, [r3, #0]
 8003296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003298:	2134      	movs	r1, #52	; 0x34
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	18d3      	adds	r3, r2, r3
 800329e:	185b      	adds	r3, r3, r1
 80032a0:	1c02      	adds	r2, r0, #0
 80032a2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	18d3      	adds	r3, r2, r3
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d006      	beq.n	80032be <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	3301      	adds	r3, #1
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2b0f      	cmp	r3, #15
 80032ba:	d9e8      	bls.n	800328e <prvInitialiseNewTask+0x3a>
 80032bc:	e000      	b.n	80032c0 <prvInitialiseNewTask+0x6c>
		{
			break;
 80032be:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c2:	2243      	movs	r2, #67	; 0x43
 80032c4:	2100      	movs	r1, #0
 80032c6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	2b06      	cmp	r3, #6
 80032cc:	d901      	bls.n	80032d2 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80032ce:	2306      	movs	r3, #6
 80032d0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80032d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d4:	6a3a      	ldr	r2, [r7, #32]
 80032d6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80032d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032da:	6a3a      	ldr	r2, [r7, #32]
 80032dc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80032de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e0:	2200      	movs	r2, #0
 80032e2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e6:	3304      	adds	r3, #4
 80032e8:	0018      	movs	r0, r3
 80032ea:	f7ff fa37 	bl	800275c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80032ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f0:	3318      	adds	r3, #24
 80032f2:	0018      	movs	r0, r3
 80032f4:	f7ff fa32 	bl	800275c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80032f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	2207      	movs	r2, #7
 8003302:	1ad2      	subs	r2, r2, r3
 8003304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003306:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800330c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800330e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003310:	2200      	movs	r2, #0
 8003312:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003316:	2250      	movs	r2, #80	; 0x50
 8003318:	2100      	movs	r1, #0
 800331a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	68f9      	ldr	r1, [r7, #12]
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	0018      	movs	r0, r3
 8003324:	f000 fd08 	bl	8003d38 <pxPortInitialiseStack>
 8003328:	0002      	movs	r2, r0
 800332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003338:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	46bd      	mov	sp, r7
 800333e:	b006      	add	sp, #24
 8003340:	bd80      	pop	{r7, pc}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	3fffffff 	.word	0x3fffffff

08003348 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003350:	f000 fd8e 	bl	8003e70 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003354:	4b28      	ldr	r3, [pc, #160]	; (80033f8 <prvAddNewTaskToReadyList+0xb0>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	4b27      	ldr	r3, [pc, #156]	; (80033f8 <prvAddNewTaskToReadyList+0xb0>)
 800335c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800335e:	4b27      	ldr	r3, [pc, #156]	; (80033fc <prvAddNewTaskToReadyList+0xb4>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003366:	4b25      	ldr	r3, [pc, #148]	; (80033fc <prvAddNewTaskToReadyList+0xb4>)
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800336c:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <prvAddNewTaskToReadyList+0xb0>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d110      	bne.n	8003396 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003374:	f000 fb56 	bl	8003a24 <prvInitialiseTaskLists>
 8003378:	e00d      	b.n	8003396 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800337a:	4b21      	ldr	r3, [pc, #132]	; (8003400 <prvAddNewTaskToReadyList+0xb8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d109      	bne.n	8003396 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003382:	4b1e      	ldr	r3, [pc, #120]	; (80033fc <prvAddNewTaskToReadyList+0xb4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	429a      	cmp	r2, r3
 800338e:	d802      	bhi.n	8003396 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003390:	4b1a      	ldr	r3, [pc, #104]	; (80033fc <prvAddNewTaskToReadyList+0xb4>)
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003396:	4b1b      	ldr	r3, [pc, #108]	; (8003404 <prvAddNewTaskToReadyList+0xbc>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	4b19      	ldr	r3, [pc, #100]	; (8003404 <prvAddNewTaskToReadyList+0xbc>)
 800339e:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a4:	4b18      	ldr	r3, [pc, #96]	; (8003408 <prvAddNewTaskToReadyList+0xc0>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d903      	bls.n	80033b4 <prvAddNewTaskToReadyList+0x6c>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b0:	4b15      	ldr	r3, [pc, #84]	; (8003408 <prvAddNewTaskToReadyList+0xc0>)
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b8:	0013      	movs	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	189b      	adds	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4a12      	ldr	r2, [pc, #72]	; (800340c <prvAddNewTaskToReadyList+0xc4>)
 80033c2:	189a      	adds	r2, r3, r2
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3304      	adds	r3, #4
 80033c8:	0019      	movs	r1, r3
 80033ca:	0010      	movs	r0, r2
 80033cc:	f7ff f9d1 	bl	8002772 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80033d0:	f000 fd60 	bl	8003e94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80033d4:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <prvAddNewTaskToReadyList+0xb8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80033dc:	4b07      	ldr	r3, [pc, #28]	; (80033fc <prvAddNewTaskToReadyList+0xb4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d201      	bcs.n	80033ee <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80033ea:	f000 fd31 	bl	8003e50 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	46bd      	mov	sp, r7
 80033f2:	b002      	add	sp, #8
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	200004c8 	.word	0x200004c8
 80033fc:	200003c8 	.word	0x200003c8
 8003400:	200004d4 	.word	0x200004d4
 8003404:	200004e4 	.word	0x200004e4
 8003408:	200004d0 	.word	0x200004d0
 800340c:	200003cc 	.word	0x200003cc

08003410 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d010      	beq.n	8003444 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003422:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <vTaskDelay+0x48>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <vTaskDelay+0x1e>
 800342a:	b672      	cpsid	i
 800342c:	e7fe      	b.n	800342c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800342e:	f000 f863 	bl	80034f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2100      	movs	r1, #0
 8003436:	0018      	movs	r0, r3
 8003438:	f000 fc2a 	bl	8003c90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800343c:	f000 f868 	bl	8003510 <xTaskResumeAll>
 8003440:	0003      	movs	r3, r0
 8003442:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800344a:	f000 fd01 	bl	8003e50 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	46bd      	mov	sp, r7
 8003452:	b004      	add	sp, #16
 8003454:	bd80      	pop	{r7, pc}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	200004f0 	.word	0x200004f0

0800345c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800345c:	b590      	push	{r4, r7, lr}
 800345e:	b089      	sub	sp, #36	; 0x24
 8003460:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003462:	2300      	movs	r3, #0
 8003464:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003466:	2300      	movs	r3, #0
 8003468:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800346a:	003a      	movs	r2, r7
 800346c:	1d39      	adds	r1, r7, #4
 800346e:	2308      	movs	r3, #8
 8003470:	18fb      	adds	r3, r7, r3
 8003472:	0018      	movs	r0, r3
 8003474:	f7fc fee6 	bl	8000244 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003478:	683c      	ldr	r4, [r7, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	4918      	ldr	r1, [pc, #96]	; (80034e0 <vTaskStartScheduler+0x84>)
 8003480:	4818      	ldr	r0, [pc, #96]	; (80034e4 <vTaskStartScheduler+0x88>)
 8003482:	9202      	str	r2, [sp, #8]
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	2300      	movs	r3, #0
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	2300      	movs	r3, #0
 800348c:	0022      	movs	r2, r4
 800348e:	f7ff fe51 	bl	8003134 <xTaskCreateStatic>
 8003492:	0002      	movs	r2, r0
 8003494:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <vTaskStartScheduler+0x8c>)
 8003496:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003498:	4b13      	ldr	r3, [pc, #76]	; (80034e8 <vTaskStartScheduler+0x8c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80034a0:	2301      	movs	r3, #1
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	e001      	b.n	80034aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d10d      	bne.n	80034cc <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80034b0:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80034b2:	4b0e      	ldr	r3, [pc, #56]	; (80034ec <vTaskStartScheduler+0x90>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	4252      	negs	r2, r2
 80034b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80034ba:	4b0d      	ldr	r3, [pc, #52]	; (80034f0 <vTaskStartScheduler+0x94>)
 80034bc:	2201      	movs	r2, #1
 80034be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80034c0:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <vTaskStartScheduler+0x98>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80034c6:	f000 fc9f 	bl	8003e08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80034ca:	e004      	b.n	80034d6 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	3301      	adds	r3, #1
 80034d0:	d101      	bne.n	80034d6 <vTaskStartScheduler+0x7a>
 80034d2:	b672      	cpsid	i
 80034d4:	e7fe      	b.n	80034d4 <vTaskStartScheduler+0x78>
}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	46bd      	mov	sp, r7
 80034da:	b005      	add	sp, #20
 80034dc:	bd90      	pop	{r4, r7, pc}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	08004d20 	.word	0x08004d20
 80034e4:	08003a05 	.word	0x08003a05
 80034e8:	200004ec 	.word	0x200004ec
 80034ec:	200004e8 	.word	0x200004e8
 80034f0:	200004d4 	.word	0x200004d4
 80034f4:	200004cc 	.word	0x200004cc

080034f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80034fc:	4b03      	ldr	r3, [pc, #12]	; (800350c <vTaskSuspendAll+0x14>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	4b02      	ldr	r3, [pc, #8]	; (800350c <vTaskSuspendAll+0x14>)
 8003504:	601a      	str	r2, [r3, #0]
}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	200004f0 	.word	0x200004f0

08003510 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800351a:	2300      	movs	r3, #0
 800351c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800351e:	4b3a      	ldr	r3, [pc, #232]	; (8003608 <xTaskResumeAll+0xf8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <xTaskResumeAll+0x1a>
 8003526:	b672      	cpsid	i
 8003528:	e7fe      	b.n	8003528 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800352a:	f000 fca1 	bl	8003e70 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800352e:	4b36      	ldr	r3, [pc, #216]	; (8003608 <xTaskResumeAll+0xf8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	1e5a      	subs	r2, r3, #1
 8003534:	4b34      	ldr	r3, [pc, #208]	; (8003608 <xTaskResumeAll+0xf8>)
 8003536:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003538:	4b33      	ldr	r3, [pc, #204]	; (8003608 <xTaskResumeAll+0xf8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d15b      	bne.n	80035f8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003540:	4b32      	ldr	r3, [pc, #200]	; (800360c <xTaskResumeAll+0xfc>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d057      	beq.n	80035f8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003548:	e02f      	b.n	80035aa <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800354a:	4b31      	ldr	r3, [pc, #196]	; (8003610 <xTaskResumeAll+0x100>)
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	3318      	adds	r3, #24
 8003556:	0018      	movs	r0, r3
 8003558:	f7ff f963 	bl	8002822 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	3304      	adds	r3, #4
 8003560:	0018      	movs	r0, r3
 8003562:	f7ff f95e 	bl	8002822 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356a:	4b2a      	ldr	r3, [pc, #168]	; (8003614 <xTaskResumeAll+0x104>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d903      	bls.n	800357a <xTaskResumeAll+0x6a>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003576:	4b27      	ldr	r3, [pc, #156]	; (8003614 <xTaskResumeAll+0x104>)
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357e:	0013      	movs	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	189b      	adds	r3, r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4a24      	ldr	r2, [pc, #144]	; (8003618 <xTaskResumeAll+0x108>)
 8003588:	189a      	adds	r2, r3, r2
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3304      	adds	r3, #4
 800358e:	0019      	movs	r1, r3
 8003590:	0010      	movs	r0, r2
 8003592:	f7ff f8ee 	bl	8002772 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359a:	4b20      	ldr	r3, [pc, #128]	; (800361c <xTaskResumeAll+0x10c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d302      	bcc.n	80035aa <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80035a4:	4b1e      	ldr	r3, [pc, #120]	; (8003620 <xTaskResumeAll+0x110>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035aa:	4b19      	ldr	r3, [pc, #100]	; (8003610 <xTaskResumeAll+0x100>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1cb      	bne.n	800354a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80035b8:	f000 face 	bl	8003b58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80035bc:	4b19      	ldr	r3, [pc, #100]	; (8003624 <xTaskResumeAll+0x114>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00f      	beq.n	80035e8 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80035c8:	f000 f82e 	bl	8003628 <xTaskIncrementTick>
 80035cc:	1e03      	subs	r3, r0, #0
 80035ce:	d002      	beq.n	80035d6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80035d0:	4b13      	ldr	r3, [pc, #76]	; (8003620 <xTaskResumeAll+0x110>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3b01      	subs	r3, #1
 80035da:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f2      	bne.n	80035c8 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80035e2:	4b10      	ldr	r3, [pc, #64]	; (8003624 <xTaskResumeAll+0x114>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80035e8:	4b0d      	ldr	r3, [pc, #52]	; (8003620 <xTaskResumeAll+0x110>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80035f0:	2301      	movs	r3, #1
 80035f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80035f4:	f000 fc2c 	bl	8003e50 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80035f8:	f000 fc4c 	bl	8003e94 <vPortExitCritical>

	return xAlreadyYielded;
 80035fc:	68bb      	ldr	r3, [r7, #8]
}
 80035fe:	0018      	movs	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	b004      	add	sp, #16
 8003604:	bd80      	pop	{r7, pc}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	200004f0 	.word	0x200004f0
 800360c:	200004c8 	.word	0x200004c8
 8003610:	20000488 	.word	0x20000488
 8003614:	200004d0 	.word	0x200004d0
 8003618:	200003cc 	.word	0x200003cc
 800361c:	200003c8 	.word	0x200003c8
 8003620:	200004dc 	.word	0x200004dc
 8003624:	200004d8 	.word	0x200004d8

08003628 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003632:	4b4c      	ldr	r3, [pc, #304]	; (8003764 <xTaskIncrementTick+0x13c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d000      	beq.n	800363c <xTaskIncrementTick+0x14>
 800363a:	e083      	b.n	8003744 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800363c:	4b4a      	ldr	r3, [pc, #296]	; (8003768 <xTaskIncrementTick+0x140>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	3301      	adds	r3, #1
 8003642:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003644:	4b48      	ldr	r3, [pc, #288]	; (8003768 <xTaskIncrementTick+0x140>)
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d117      	bne.n	8003680 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8003650:	4b46      	ldr	r3, [pc, #280]	; (800376c <xTaskIncrementTick+0x144>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <xTaskIncrementTick+0x36>
 800365a:	b672      	cpsid	i
 800365c:	e7fe      	b.n	800365c <xTaskIncrementTick+0x34>
 800365e:	4b43      	ldr	r3, [pc, #268]	; (800376c <xTaskIncrementTick+0x144>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	4b42      	ldr	r3, [pc, #264]	; (8003770 <xTaskIncrementTick+0x148>)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	4b40      	ldr	r3, [pc, #256]	; (800376c <xTaskIncrementTick+0x144>)
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	4b40      	ldr	r3, [pc, #256]	; (8003770 <xTaskIncrementTick+0x148>)
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	4b40      	ldr	r3, [pc, #256]	; (8003774 <xTaskIncrementTick+0x14c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	4b3e      	ldr	r3, [pc, #248]	; (8003774 <xTaskIncrementTick+0x14c>)
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	f000 fa6c 	bl	8003b58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003680:	4b3d      	ldr	r3, [pc, #244]	; (8003778 <xTaskIncrementTick+0x150>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	429a      	cmp	r2, r3
 8003688:	d34e      	bcc.n	8003728 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800368a:	4b38      	ldr	r3, [pc, #224]	; (800376c <xTaskIncrementTick+0x144>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <xTaskIncrementTick+0x70>
 8003694:	2301      	movs	r3, #1
 8003696:	e000      	b.n	800369a <xTaskIncrementTick+0x72>
 8003698:	2300      	movs	r3, #0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d004      	beq.n	80036a8 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800369e:	4b36      	ldr	r3, [pc, #216]	; (8003778 <xTaskIncrementTick+0x150>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	4252      	negs	r2, r2
 80036a4:	601a      	str	r2, [r3, #0]
					break;
 80036a6:	e03f      	b.n	8003728 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80036a8:	4b30      	ldr	r3, [pc, #192]	; (800376c <xTaskIncrementTick+0x144>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d203      	bcs.n	80036c8 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80036c0:	4b2d      	ldr	r3, [pc, #180]	; (8003778 <xTaskIncrementTick+0x150>)
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	601a      	str	r2, [r3, #0]
						break;
 80036c6:	e02f      	b.n	8003728 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	3304      	adds	r3, #4
 80036cc:	0018      	movs	r0, r3
 80036ce:	f7ff f8a8 	bl	8002822 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d004      	beq.n	80036e4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	3318      	adds	r3, #24
 80036de:	0018      	movs	r0, r3
 80036e0:	f7ff f89f 	bl	8002822 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e8:	4b24      	ldr	r3, [pc, #144]	; (800377c <xTaskIncrementTick+0x154>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d903      	bls.n	80036f8 <xTaskIncrementTick+0xd0>
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f4:	4b21      	ldr	r3, [pc, #132]	; (800377c <xTaskIncrementTick+0x154>)
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fc:	0013      	movs	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	189b      	adds	r3, r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4a1e      	ldr	r2, [pc, #120]	; (8003780 <xTaskIncrementTick+0x158>)
 8003706:	189a      	adds	r2, r3, r2
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	3304      	adds	r3, #4
 800370c:	0019      	movs	r1, r3
 800370e:	0010      	movs	r0, r2
 8003710:	f7ff f82f 	bl	8002772 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003718:	4b1a      	ldr	r3, [pc, #104]	; (8003784 <xTaskIncrementTick+0x15c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	429a      	cmp	r2, r3
 8003720:	d3b3      	bcc.n	800368a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8003722:	2301      	movs	r3, #1
 8003724:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003726:	e7b0      	b.n	800368a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003728:	4b16      	ldr	r3, [pc, #88]	; (8003784 <xTaskIncrementTick+0x15c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800372e:	4914      	ldr	r1, [pc, #80]	; (8003780 <xTaskIncrementTick+0x158>)
 8003730:	0013      	movs	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	189b      	adds	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	585b      	ldr	r3, [r3, r1]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d907      	bls.n	800374e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800373e:	2301      	movs	r3, #1
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	e004      	b.n	800374e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003744:	4b10      	ldr	r3, [pc, #64]	; (8003788 <xTaskIncrementTick+0x160>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <xTaskIncrementTick+0x160>)
 800374c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800374e:	4b0f      	ldr	r3, [pc, #60]	; (800378c <xTaskIncrementTick+0x164>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8003756:	2301      	movs	r3, #1
 8003758:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800375a:	697b      	ldr	r3, [r7, #20]
}
 800375c:	0018      	movs	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	b006      	add	sp, #24
 8003762:	bd80      	pop	{r7, pc}
 8003764:	200004f0 	.word	0x200004f0
 8003768:	200004cc 	.word	0x200004cc
 800376c:	20000480 	.word	0x20000480
 8003770:	20000484 	.word	0x20000484
 8003774:	200004e0 	.word	0x200004e0
 8003778:	200004e8 	.word	0x200004e8
 800377c:	200004d0 	.word	0x200004d0
 8003780:	200003cc 	.word	0x200003cc
 8003784:	200003c8 	.word	0x200003c8
 8003788:	200004d8 	.word	0x200004d8
 800378c:	200004dc 	.word	0x200004dc

08003790 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003796:	4b22      	ldr	r3, [pc, #136]	; (8003820 <vTaskSwitchContext+0x90>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800379e:	4b21      	ldr	r3, [pc, #132]	; (8003824 <vTaskSwitchContext+0x94>)
 80037a0:	2201      	movs	r2, #1
 80037a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80037a4:	e037      	b.n	8003816 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80037a6:	4b1f      	ldr	r3, [pc, #124]	; (8003824 <vTaskSwitchContext+0x94>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80037ac:	4b1e      	ldr	r3, [pc, #120]	; (8003828 <vTaskSwitchContext+0x98>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	607b      	str	r3, [r7, #4]
 80037b2:	e007      	b.n	80037c4 <vTaskSwitchContext+0x34>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <vTaskSwitchContext+0x2e>
 80037ba:	b672      	cpsid	i
 80037bc:	e7fe      	b.n	80037bc <vTaskSwitchContext+0x2c>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	607b      	str	r3, [r7, #4]
 80037c4:	4919      	ldr	r1, [pc, #100]	; (800382c <vTaskSwitchContext+0x9c>)
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	0013      	movs	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	189b      	adds	r3, r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	585b      	ldr	r3, [r3, r1]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0ee      	beq.n	80037b4 <vTaskSwitchContext+0x24>
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	0013      	movs	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	189b      	adds	r3, r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4a12      	ldr	r2, [pc, #72]	; (800382c <vTaskSwitchContext+0x9c>)
 80037e2:	189b      	adds	r3, r3, r2
 80037e4:	603b      	str	r3, [r7, #0]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	605a      	str	r2, [r3, #4]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	3308      	adds	r3, #8
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d104      	bne.n	8003806 <vTaskSwitchContext+0x76>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	605a      	str	r2, [r3, #4]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	4b08      	ldr	r3, [pc, #32]	; (8003830 <vTaskSwitchContext+0xa0>)
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <vTaskSwitchContext+0x98>)
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	601a      	str	r2, [r3, #0]
}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	46bd      	mov	sp, r7
 800381a:	b002      	add	sp, #8
 800381c:	bd80      	pop	{r7, pc}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	200004f0 	.word	0x200004f0
 8003824:	200004dc 	.word	0x200004dc
 8003828:	200004d0 	.word	0x200004d0
 800382c:	200003cc 	.word	0x200003cc
 8003830:	200003c8 	.word	0x200003c8

08003834 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <vTaskPlaceOnEventList+0x14>
 8003844:	b672      	cpsid	i
 8003846:	e7fe      	b.n	8003846 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003848:	4b08      	ldr	r3, [pc, #32]	; (800386c <vTaskPlaceOnEventList+0x38>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3318      	adds	r3, #24
 800384e:	001a      	movs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	0011      	movs	r1, r2
 8003854:	0018      	movs	r0, r3
 8003856:	f7fe ffae 	bl	80027b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2101      	movs	r1, #1
 800385e:	0018      	movs	r0, r3
 8003860:	f000 fa16 	bl	8003c90 <prvAddCurrentTaskToDelayedList>
}
 8003864:	46c0      	nop			; (mov r8, r8)
 8003866:	46bd      	mov	sp, r7
 8003868:	b002      	add	sp, #8
 800386a:	bd80      	pop	{r7, pc}
 800386c:	200003c8 	.word	0x200003c8

08003870 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <xTaskRemoveFromEventList+0x1a>
 8003886:	b672      	cpsid	i
 8003888:	e7fe      	b.n	8003888 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	3318      	adds	r3, #24
 800388e:	0018      	movs	r0, r3
 8003890:	f7fe ffc7 	bl	8002822 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003894:	4b1e      	ldr	r3, [pc, #120]	; (8003910 <xTaskRemoveFromEventList+0xa0>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d11d      	bne.n	80038d8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	3304      	adds	r3, #4
 80038a0:	0018      	movs	r0, r3
 80038a2:	f7fe ffbe 	bl	8002822 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038aa:	4b1a      	ldr	r3, [pc, #104]	; (8003914 <xTaskRemoveFromEventList+0xa4>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d903      	bls.n	80038ba <xTaskRemoveFromEventList+0x4a>
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b6:	4b17      	ldr	r3, [pc, #92]	; (8003914 <xTaskRemoveFromEventList+0xa4>)
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038be:	0013      	movs	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	189b      	adds	r3, r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4a14      	ldr	r2, [pc, #80]	; (8003918 <xTaskRemoveFromEventList+0xa8>)
 80038c8:	189a      	adds	r2, r3, r2
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	3304      	adds	r3, #4
 80038ce:	0019      	movs	r1, r3
 80038d0:	0010      	movs	r0, r2
 80038d2:	f7fe ff4e 	bl	8002772 <vListInsertEnd>
 80038d6:	e007      	b.n	80038e8 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	3318      	adds	r3, #24
 80038dc:	001a      	movs	r2, r3
 80038de:	4b0f      	ldr	r3, [pc, #60]	; (800391c <xTaskRemoveFromEventList+0xac>)
 80038e0:	0011      	movs	r1, r2
 80038e2:	0018      	movs	r0, r3
 80038e4:	f7fe ff45 	bl	8002772 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ec:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <xTaskRemoveFromEventList+0xb0>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d905      	bls.n	8003902 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80038f6:	2301      	movs	r3, #1
 80038f8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80038fa:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <xTaskRemoveFromEventList+0xb4>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	e001      	b.n	8003906 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003906:	68fb      	ldr	r3, [r7, #12]
}
 8003908:	0018      	movs	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	b004      	add	sp, #16
 800390e:	bd80      	pop	{r7, pc}
 8003910:	200004f0 	.word	0x200004f0
 8003914:	200004d0 	.word	0x200004d0
 8003918:	200003cc 	.word	0x200003cc
 800391c:	20000488 	.word	0x20000488
 8003920:	200003c8 	.word	0x200003c8
 8003924:	200004dc 	.word	0x200004dc

08003928 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <vTaskInternalSetTimeOutState+0x20>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003938:	4b04      	ldr	r3, [pc, #16]	; (800394c <vTaskInternalSetTimeOutState+0x24>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	605a      	str	r2, [r3, #4]
}
 8003940:	46c0      	nop			; (mov r8, r8)
 8003942:	46bd      	mov	sp, r7
 8003944:	b002      	add	sp, #8
 8003946:	bd80      	pop	{r7, pc}
 8003948:	200004e0 	.word	0x200004e0
 800394c:	200004cc 	.word	0x200004cc

08003950 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <xTaskCheckForTimeOut+0x14>
 8003960:	b672      	cpsid	i
 8003962:	e7fe      	b.n	8003962 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <xTaskCheckForTimeOut+0x1e>
 800396a:	b672      	cpsid	i
 800396c:	e7fe      	b.n	800396c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800396e:	f000 fa7f 	bl	8003e70 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003972:	4b1d      	ldr	r3, [pc, #116]	; (80039e8 <xTaskCheckForTimeOut+0x98>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	3301      	adds	r3, #1
 8003988:	d102      	bne.n	8003990 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	e024      	b.n	80039da <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	4b15      	ldr	r3, [pc, #84]	; (80039ec <xTaskCheckForTimeOut+0x9c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d007      	beq.n	80039ac <xTaskCheckForTimeOut+0x5c>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d302      	bcc.n	80039ac <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80039a6:	2301      	movs	r3, #1
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	e016      	b.n	80039da <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d20c      	bcs.n	80039d0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1ad2      	subs	r2, r2, r3
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	0018      	movs	r0, r3
 80039c6:	f7ff ffaf 	bl	8003928 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	e004      	b.n	80039da <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80039d6:	2301      	movs	r3, #1
 80039d8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80039da:	f000 fa5b 	bl	8003e94 <vPortExitCritical>

	return xReturn;
 80039de:	697b      	ldr	r3, [r7, #20]
}
 80039e0:	0018      	movs	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b006      	add	sp, #24
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	200004cc 	.word	0x200004cc
 80039ec:	200004e0 	.word	0x200004e0

080039f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80039f4:	4b02      	ldr	r3, [pc, #8]	; (8003a00 <vTaskMissedYield+0x10>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	601a      	str	r2, [r3, #0]
}
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	200004dc 	.word	0x200004dc

08003a04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a0c:	f000 f84e 	bl	8003aac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a10:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <prvIdleTask+0x1c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d9f9      	bls.n	8003a0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a18:	f000 fa1a 	bl	8003e50 <vPortYield>
		prvCheckTasksWaitingTermination();
 8003a1c:	e7f6      	b.n	8003a0c <prvIdleTask+0x8>
 8003a1e:	46c0      	nop			; (mov r8, r8)
 8003a20:	200003cc 	.word	0x200003cc

08003a24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	607b      	str	r3, [r7, #4]
 8003a2e:	e00c      	b.n	8003a4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	0013      	movs	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	189b      	adds	r3, r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4a14      	ldr	r2, [pc, #80]	; (8003a8c <prvInitialiseTaskLists+0x68>)
 8003a3c:	189b      	adds	r3, r3, r2
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f7fe fe6e 	bl	8002720 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3301      	adds	r3, #1
 8003a48:	607b      	str	r3, [r7, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b06      	cmp	r3, #6
 8003a4e:	d9ef      	bls.n	8003a30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a50:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <prvInitialiseTaskLists+0x6c>)
 8003a52:	0018      	movs	r0, r3
 8003a54:	f7fe fe64 	bl	8002720 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a58:	4b0e      	ldr	r3, [pc, #56]	; (8003a94 <prvInitialiseTaskLists+0x70>)
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f7fe fe60 	bl	8002720 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a60:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <prvInitialiseTaskLists+0x74>)
 8003a62:	0018      	movs	r0, r3
 8003a64:	f7fe fe5c 	bl	8002720 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a68:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <prvInitialiseTaskLists+0x78>)
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f7fe fe58 	bl	8002720 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a70:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <prvInitialiseTaskLists+0x7c>)
 8003a72:	0018      	movs	r0, r3
 8003a74:	f7fe fe54 	bl	8002720 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a78:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <prvInitialiseTaskLists+0x80>)
 8003a7a:	4a05      	ldr	r2, [pc, #20]	; (8003a90 <prvInitialiseTaskLists+0x6c>)
 8003a7c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a7e:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <prvInitialiseTaskLists+0x84>)
 8003a80:	4a04      	ldr	r2, [pc, #16]	; (8003a94 <prvInitialiseTaskLists+0x70>)
 8003a82:	601a      	str	r2, [r3, #0]
}
 8003a84:	46c0      	nop			; (mov r8, r8)
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b002      	add	sp, #8
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	200003cc 	.word	0x200003cc
 8003a90:	20000458 	.word	0x20000458
 8003a94:	2000046c 	.word	0x2000046c
 8003a98:	20000488 	.word	0x20000488
 8003a9c:	2000049c 	.word	0x2000049c
 8003aa0:	200004b4 	.word	0x200004b4
 8003aa4:	20000480 	.word	0x20000480
 8003aa8:	20000484 	.word	0x20000484

08003aac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ab2:	e01a      	b.n	8003aea <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8003ab4:	f000 f9dc 	bl	8003e70 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003ab8:	4b10      	ldr	r3, [pc, #64]	; (8003afc <prvCheckTasksWaitingTermination+0x50>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	f7fe feac 	bl	8002822 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003aca:	4b0d      	ldr	r3, [pc, #52]	; (8003b00 <prvCheckTasksWaitingTermination+0x54>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	1e5a      	subs	r2, r3, #1
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <prvCheckTasksWaitingTermination+0x54>)
 8003ad2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ad4:	4b0b      	ldr	r3, [pc, #44]	; (8003b04 <prvCheckTasksWaitingTermination+0x58>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	1e5a      	subs	r2, r3, #1
 8003ada:	4b0a      	ldr	r3, [pc, #40]	; (8003b04 <prvCheckTasksWaitingTermination+0x58>)
 8003adc:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8003ade:	f000 f9d9 	bl	8003e94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f000 f80f 	bl	8003b08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003aea:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <prvCheckTasksWaitingTermination+0x58>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1e0      	bne.n	8003ab4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	46c0      	nop			; (mov r8, r8)
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b002      	add	sp, #8
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	2000049c 	.word	0x2000049c
 8003b00:	200004c8 	.word	0x200004c8
 8003b04:	200004b0 	.word	0x200004b0

08003b08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2251      	movs	r2, #81	; 0x51
 8003b14:	5c9b      	ldrb	r3, [r3, r2]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d109      	bne.n	8003b2e <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	0018      	movs	r0, r3
 8003b20:	f000 fae4 	bl	80040ec <vPortFree>
				vPortFree( pxTCB );
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	0018      	movs	r0, r3
 8003b28:	f000 fae0 	bl	80040ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b2c:	e010      	b.n	8003b50 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2251      	movs	r2, #81	; 0x51
 8003b32:	5c9b      	ldrb	r3, [r3, r2]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d104      	bne.n	8003b42 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f000 fad6 	bl	80040ec <vPortFree>
	}
 8003b40:	e006      	b.n	8003b50 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2251      	movs	r2, #81	; 0x51
 8003b46:	5c9b      	ldrb	r3, [r3, r2]
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d001      	beq.n	8003b50 <prvDeleteTCB+0x48>
 8003b4c:	b672      	cpsid	i
 8003b4e:	e7fe      	b.n	8003b4e <prvDeleteTCB+0x46>
	}
 8003b50:	46c0      	nop			; (mov r8, r8)
 8003b52:	46bd      	mov	sp, r7
 8003b54:	b002      	add	sp, #8
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b5e:	4b0e      	ldr	r3, [pc, #56]	; (8003b98 <prvResetNextTaskUnblockTime+0x40>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <prvResetNextTaskUnblockTime+0x14>
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e000      	b.n	8003b6e <prvResetNextTaskUnblockTime+0x16>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d004      	beq.n	8003b7c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b72:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <prvResetNextTaskUnblockTime+0x44>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	4252      	negs	r2, r2
 8003b78:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b7a:	e008      	b.n	8003b8e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b7c:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <prvResetNextTaskUnblockTime+0x40>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	4b04      	ldr	r3, [pc, #16]	; (8003b9c <prvResetNextTaskUnblockTime+0x44>)
 8003b8c:	601a      	str	r2, [r3, #0]
}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	46bd      	mov	sp, r7
 8003b92:	b002      	add	sp, #8
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	20000480 	.word	0x20000480
 8003b9c:	200004e8 	.word	0x200004e8

08003ba0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <xTaskGetSchedulerState+0x30>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d102      	bne.n	8003bb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	607b      	str	r3, [r7, #4]
 8003bb2:	e008      	b.n	8003bc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bb4:	4b07      	ldr	r3, [pc, #28]	; (8003bd4 <xTaskGetSchedulerState+0x34>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d102      	bne.n	8003bc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	607b      	str	r3, [r7, #4]
 8003bc0:	e001      	b.n	8003bc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003bc6:	687b      	ldr	r3, [r7, #4]
	}
 8003bc8:	0018      	movs	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	b002      	add	sp, #8
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	200004d4 	.word	0x200004d4
 8003bd4:	200004f0 	.word	0x200004f0

08003bd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003be4:	2300      	movs	r3, #0
 8003be6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d044      	beq.n	8003c78 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003bee:	4b25      	ldr	r3, [pc, #148]	; (8003c84 <xTaskPriorityDisinherit+0xac>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d001      	beq.n	8003bfc <xTaskPriorityDisinherit+0x24>
 8003bf8:	b672      	cpsid	i
 8003bfa:	e7fe      	b.n	8003bfa <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <xTaskPriorityDisinherit+0x30>
 8003c04:	b672      	cpsid	i
 8003c06:	e7fe      	b.n	8003c06 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c0c:	1e5a      	subs	r2, r3, #1
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d02c      	beq.n	8003c78 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d128      	bne.n	8003c78 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f7fe fdf9 	bl	8002822 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	2207      	movs	r2, #7
 8003c3e:	1ad2      	subs	r2, r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c48:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <xTaskPriorityDisinherit+0xb0>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d903      	bls.n	8003c58 <xTaskPriorityDisinherit+0x80>
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c54:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <xTaskPriorityDisinherit+0xb0>)
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5c:	0013      	movs	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	189b      	adds	r3, r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4a09      	ldr	r2, [pc, #36]	; (8003c8c <xTaskPriorityDisinherit+0xb4>)
 8003c66:	189a      	adds	r2, r3, r2
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	0019      	movs	r1, r3
 8003c6e:	0010      	movs	r0, r2
 8003c70:	f7fe fd7f 	bl	8002772 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003c74:	2301      	movs	r3, #1
 8003c76:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c78:	68fb      	ldr	r3, [r7, #12]
	}
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b004      	add	sp, #16
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	200003c8 	.word	0x200003c8
 8003c88:	200004d0 	.word	0x200004d0
 8003c8c:	200003cc 	.word	0x200003cc

08003c90 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c9a:	4b21      	ldr	r3, [pc, #132]	; (8003d20 <prvAddCurrentTaskToDelayedList+0x90>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ca0:	4b20      	ldr	r3, [pc, #128]	; (8003d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f7fe fdbb 	bl	8002822 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	d10b      	bne.n	8003cca <prvAddCurrentTaskToDelayedList+0x3a>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cb8:	4b1a      	ldr	r3, [pc, #104]	; (8003d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	1d1a      	adds	r2, r3, #4
 8003cbe:	4b1a      	ldr	r3, [pc, #104]	; (8003d28 <prvAddCurrentTaskToDelayedList+0x98>)
 8003cc0:	0011      	movs	r1, r2
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f7fe fd55 	bl	8002772 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003cc8:	e026      	b.n	8003d18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	18d3      	adds	r3, r2, r3
 8003cd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003cd2:	4b14      	ldr	r3, [pc, #80]	; (8003d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d209      	bcs.n	8003cf6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ce2:	4b12      	ldr	r3, [pc, #72]	; (8003d2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	4b0f      	ldr	r3, [pc, #60]	; (8003d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	3304      	adds	r3, #4
 8003cec:	0019      	movs	r1, r3
 8003cee:	0010      	movs	r0, r2
 8003cf0:	f7fe fd61 	bl	80027b6 <vListInsert>
}
 8003cf4:	e010      	b.n	8003d18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cf6:	4b0e      	ldr	r3, [pc, #56]	; (8003d30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3304      	adds	r3, #4
 8003d00:	0019      	movs	r1, r3
 8003d02:	0010      	movs	r0, r2
 8003d04:	f7fe fd57 	bl	80027b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003d08:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d202      	bcs.n	8003d18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003d12:	4b08      	ldr	r3, [pc, #32]	; (8003d34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	601a      	str	r2, [r3, #0]
}
 8003d18:	46c0      	nop			; (mov r8, r8)
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b004      	add	sp, #16
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	200004cc 	.word	0x200004cc
 8003d24:	200003c8 	.word	0x200003c8
 8003d28:	200004b4 	.word	0x200004b4
 8003d2c:	20000484 	.word	0x20000484
 8003d30:	20000480 	.word	0x20000480
 8003d34:	200004e8 	.word	0x200004e8

08003d38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	3b04      	subs	r3, #4
 8003d48:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2280      	movs	r2, #128	; 0x80
 8003d4e:	0452      	lsls	r2, r2, #17
 8003d50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	3b04      	subs	r3, #4
 8003d56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	3b04      	subs	r3, #4
 8003d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d64:	4a08      	ldr	r2, [pc, #32]	; (8003d88 <pxPortInitialiseStack+0x50>)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	3b14      	subs	r3, #20
 8003d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	3b20      	subs	r3, #32
 8003d7a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
}
 8003d7e:	0018      	movs	r0, r3
 8003d80:	46bd      	mov	sp, r7
 8003d82:	b004      	add	sp, #16
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	08003d8d 	.word	0x08003d8d

08003d8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003d96:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <prvTaskExitError+0x2c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	d001      	beq.n	8003da2 <prvTaskExitError+0x16>
 8003d9e:	b672      	cpsid	i
 8003da0:	e7fe      	b.n	8003da0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8003da2:	b672      	cpsid	i
	while( ulDummy == 0 )
 8003da4:	46c0      	nop			; (mov r8, r8)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0fc      	beq.n	8003da6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003dac:	46c0      	nop			; (mov r8, r8)
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b002      	add	sp, #8
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	46c0      	nop			; (mov r8, r8)
 8003db8:	20000008 	.word	0x20000008

08003dbc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8003dc0:	46c0      	nop			; (mov r8, r8)
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dd0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8003dd0:	4a0b      	ldr	r2, [pc, #44]	; (8003e00 <pxCurrentTCBConst2>)
 8003dd2:	6813      	ldr	r3, [r2, #0]
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	3020      	adds	r0, #32
 8003dd8:	f380 8809 	msr	PSP, r0
 8003ddc:	2002      	movs	r0, #2
 8003dde:	f380 8814 	msr	CONTROL, r0
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003de8:	46ae      	mov	lr, r5
 8003dea:	bc08      	pop	{r3}
 8003dec:	bc04      	pop	{r2}
 8003dee:	b662      	cpsie	i
 8003df0:	4718      	bx	r3
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	46c0      	nop			; (mov r8, r8)
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	46c0      	nop			; (mov r8, r8)
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	46c0      	nop			; (mov r8, r8)
 8003dfe:	46c0      	nop			; (mov r8, r8)

08003e00 <pxCurrentTCBConst2>:
 8003e00:	200003c8 	.word	0x200003c8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8003e04:	46c0      	nop			; (mov r8, r8)
 8003e06:	46c0      	nop			; (mov r8, r8)

08003e08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8003e0c:	4b0e      	ldr	r3, [pc, #56]	; (8003e48 <xPortStartScheduler+0x40>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4b0d      	ldr	r3, [pc, #52]	; (8003e48 <xPortStartScheduler+0x40>)
 8003e12:	21ff      	movs	r1, #255	; 0xff
 8003e14:	0409      	lsls	r1, r1, #16
 8003e16:	430a      	orrs	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8003e1a:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <xPortStartScheduler+0x40>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <xPortStartScheduler+0x40>)
 8003e20:	21ff      	movs	r1, #255	; 0xff
 8003e22:	0609      	lsls	r1, r1, #24
 8003e24:	430a      	orrs	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8003e28:	f000 f898 	bl	8003f5c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003e2c:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <xPortStartScheduler+0x44>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8003e32:	f7ff ffcd 	bl	8003dd0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003e36:	f7ff fcab 	bl	8003790 <vTaskSwitchContext>
	prvTaskExitError();
 8003e3a:	f7ff ffa7 	bl	8003d8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	0018      	movs	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	e000ed20 	.word	0xe000ed20
 8003e4c:	20000008 	.word	0x20000008

08003e50 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8003e54:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <vPortYield+0x1c>)
 8003e56:	2280      	movs	r2, #128	; 0x80
 8003e58:	0552      	lsls	r2, r2, #21
 8003e5a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8003e5c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003e60:	f3bf 8f6f 	isb	sy
}
 8003e64:	46c0      	nop			; (mov r8, r8)
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	e000ed04 	.word	0xe000ed04

08003e70 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003e74:	b672      	cpsid	i
    uxCriticalNesting++;
 8003e76:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <vPortEnterCritical+0x20>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <vPortEnterCritical+0x20>)
 8003e7e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8003e80:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003e84:	f3bf 8f6f 	isb	sy
}
 8003e88:	46c0      	nop			; (mov r8, r8)
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	20000008 	.word	0x20000008

08003e94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003e98:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <vPortExitCritical+0x2c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <vPortExitCritical+0x10>
 8003ea0:	b672      	cpsid	i
 8003ea2:	e7fe      	b.n	8003ea2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <vPortExitCritical+0x2c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	1e5a      	subs	r2, r3, #1
 8003eaa:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <vPortExitCritical+0x2c>)
 8003eac:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8003eae:	4b04      	ldr	r3, [pc, #16]	; (8003ec0 <vPortExitCritical+0x2c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d100      	bne.n	8003eb8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8003eb6:	b662      	cpsie	i
    }
}
 8003eb8:	46c0      	nop			; (mov r8, r8)
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	20000008 	.word	0x20000008

08003ec4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8003ec4:	f3ef 8010 	mrs	r0, PRIMASK
 8003ec8:	b672      	cpsid	i
 8003eca:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8003ecc:	46c0      	nop			; (mov r8, r8)
 8003ece:	0018      	movs	r0, r3

08003ed0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8003ed0:	f380 8810 	msr	PRIMASK, r0
 8003ed4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8003ed6:	46c0      	nop			; (mov r8, r8)
	...

08003ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ee0:	f3ef 8009 	mrs	r0, PSP
 8003ee4:	4b0e      	ldr	r3, [pc, #56]	; (8003f20 <pxCurrentTCBConst>)
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	3820      	subs	r0, #32
 8003eea:	6010      	str	r0, [r2, #0]
 8003eec:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003eee:	4644      	mov	r4, r8
 8003ef0:	464d      	mov	r5, r9
 8003ef2:	4656      	mov	r6, sl
 8003ef4:	465f      	mov	r7, fp
 8003ef6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003ef8:	b508      	push	{r3, lr}
 8003efa:	b672      	cpsid	i
 8003efc:	f7ff fc48 	bl	8003790 <vTaskSwitchContext>
 8003f00:	b662      	cpsie	i
 8003f02:	bc0c      	pop	{r2, r3}
 8003f04:	6811      	ldr	r1, [r2, #0]
 8003f06:	6808      	ldr	r0, [r1, #0]
 8003f08:	3010      	adds	r0, #16
 8003f0a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003f0c:	46a0      	mov	r8, r4
 8003f0e:	46a9      	mov	r9, r5
 8003f10:	46b2      	mov	sl, r6
 8003f12:	46bb      	mov	fp, r7
 8003f14:	f380 8809 	msr	PSP, r0
 8003f18:	3820      	subs	r0, #32
 8003f1a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003f1c:	4718      	bx	r3
 8003f1e:	46c0      	nop			; (mov r8, r8)

08003f20 <pxCurrentTCBConst>:
 8003f20:	200003c8 	.word	0x200003c8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8003f24:	46c0      	nop			; (mov r8, r8)
 8003f26:	46c0      	nop			; (mov r8, r8)

08003f28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f2e:	f7ff ffc9 	bl	8003ec4 <ulSetInterruptMaskFromISR>
 8003f32:	0003      	movs	r3, r0
 8003f34:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003f36:	f7ff fb77 	bl	8003628 <xTaskIncrementTick>
 8003f3a:	1e03      	subs	r3, r0, #0
 8003f3c:	d003      	beq.n	8003f46 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8003f3e:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <SysTick_Handler+0x30>)
 8003f40:	2280      	movs	r2, #128	; 0x80
 8003f42:	0552      	lsls	r2, r2, #21
 8003f44:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f7ff ffc1 	bl	8003ed0 <vClearInterruptMaskFromISR>
}
 8003f4e:	46c0      	nop			; (mov r8, r8)
 8003f50:	46bd      	mov	sp, r7
 8003f52:	b002      	add	sp, #8
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	e000ed04 	.word	0xe000ed04

08003f5c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8003f60:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <prvSetupTimerInterrupt+0x34>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8003f66:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <prvSetupTimerInterrupt+0x38>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f6c:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <prvSetupTimerInterrupt+0x3c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	22fa      	movs	r2, #250	; 0xfa
 8003f72:	0091      	lsls	r1, r2, #2
 8003f74:	0018      	movs	r0, r3
 8003f76:	f7fc f8d9 	bl	800012c <__udivsi3>
 8003f7a:	0003      	movs	r3, r0
 8003f7c:	001a      	movs	r2, r3
 8003f7e:	4b07      	ldr	r3, [pc, #28]	; (8003f9c <prvSetupTimerInterrupt+0x40>)
 8003f80:	3a01      	subs	r2, #1
 8003f82:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003f84:	4b02      	ldr	r3, [pc, #8]	; (8003f90 <prvSetupTimerInterrupt+0x34>)
 8003f86:	2207      	movs	r2, #7
 8003f88:	601a      	str	r2, [r3, #0]
}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	e000e010 	.word	0xe000e010
 8003f94:	e000e018 	.word	0xe000e018
 8003f98:	20000000 	.word	0x20000000
 8003f9c:	e000e014 	.word	0xe000e014

08003fa0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8003fac:	f7ff faa4 	bl	80034f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003fb0:	4b49      	ldr	r3, [pc, #292]	; (80040d8 <pvPortMalloc+0x138>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003fb8:	f000 f8e0 	bl	800417c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003fbc:	4b47      	ldr	r3, [pc, #284]	; (80040dc <pvPortMalloc+0x13c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d000      	beq.n	8003fc8 <pvPortMalloc+0x28>
 8003fc6:	e079      	b.n	80040bc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d012      	beq.n	8003ff4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8003fce:	2208      	movs	r2, #8
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	189b      	adds	r3, r3, r2
 8003fd4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2207      	movs	r2, #7
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d00a      	beq.n	8003ff4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2207      	movs	r2, #7
 8003fe2:	4393      	bics	r3, r2
 8003fe4:	3308      	adds	r3, #8
 8003fe6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2207      	movs	r2, #7
 8003fec:	4013      	ands	r3, r2
 8003fee:	d001      	beq.n	8003ff4 <pvPortMalloc+0x54>
 8003ff0:	b672      	cpsid	i
 8003ff2:	e7fe      	b.n	8003ff2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d060      	beq.n	80040bc <pvPortMalloc+0x11c>
 8003ffa:	4b39      	ldr	r3, [pc, #228]	; (80040e0 <pvPortMalloc+0x140>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	429a      	cmp	r2, r3
 8004002:	d85b      	bhi.n	80040bc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004004:	4b37      	ldr	r3, [pc, #220]	; (80040e4 <pvPortMalloc+0x144>)
 8004006:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8004008:	4b36      	ldr	r3, [pc, #216]	; (80040e4 <pvPortMalloc+0x144>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800400e:	e004      	b.n	800401a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	429a      	cmp	r2, r3
 8004022:	d903      	bls.n	800402c <pvPortMalloc+0x8c>
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1f1      	bne.n	8004010 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800402c:	4b2a      	ldr	r3, [pc, #168]	; (80040d8 <pvPortMalloc+0x138>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	429a      	cmp	r2, r3
 8004034:	d042      	beq.n	80040bc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2208      	movs	r2, #8
 800403c:	189b      	adds	r3, r3, r2
 800403e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	1ad2      	subs	r2, r2, r3
 8004050:	2308      	movs	r3, #8
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	429a      	cmp	r2, r3
 8004056:	d916      	bls.n	8004086 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	18d3      	adds	r3, r2, r3
 800405e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2207      	movs	r2, #7
 8004064:	4013      	ands	r3, r2
 8004066:	d001      	beq.n	800406c <pvPortMalloc+0xcc>
 8004068:	b672      	cpsid	i
 800406a:	e7fe      	b.n	800406a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	1ad2      	subs	r2, r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	0018      	movs	r0, r3
 8004082:	f000 f8db 	bl	800423c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004086:	4b16      	ldr	r3, [pc, #88]	; (80040e0 <pvPortMalloc+0x140>)
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	1ad2      	subs	r2, r2, r3
 8004090:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <pvPortMalloc+0x140>)
 8004092:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004094:	4b12      	ldr	r3, [pc, #72]	; (80040e0 <pvPortMalloc+0x140>)
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	4b13      	ldr	r3, [pc, #76]	; (80040e8 <pvPortMalloc+0x148>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d203      	bcs.n	80040a8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80040a0:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <pvPortMalloc+0x140>)
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <pvPortMalloc+0x148>)
 80040a6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	4b0b      	ldr	r3, [pc, #44]	; (80040dc <pvPortMalloc+0x13c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	431a      	orrs	r2, r3
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80040bc:	f7ff fa28 	bl	8003510 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2207      	movs	r2, #7
 80040c4:	4013      	ands	r3, r2
 80040c6:	d001      	beq.n	80040cc <pvPortMalloc+0x12c>
 80040c8:	b672      	cpsid	i
 80040ca:	e7fe      	b.n	80040ca <pvPortMalloc+0x12a>
	return pvReturn;
 80040cc:	68fb      	ldr	r3, [r7, #12]
}
 80040ce:	0018      	movs	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b006      	add	sp, #24
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	200010fc 	.word	0x200010fc
 80040dc:	20001108 	.word	0x20001108
 80040e0:	20001100 	.word	0x20001100
 80040e4:	200010f4 	.word	0x200010f4
 80040e8:	20001104 	.word	0x20001104

080040ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d035      	beq.n	800416a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80040fe:	2308      	movs	r3, #8
 8004100:	425b      	negs	r3, r3
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	18d3      	adds	r3, r2, r3
 8004106:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	4b18      	ldr	r3, [pc, #96]	; (8004174 <vPortFree+0x88>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4013      	ands	r3, r2
 8004116:	d101      	bne.n	800411c <vPortFree+0x30>
 8004118:	b672      	cpsid	i
 800411a:	e7fe      	b.n	800411a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <vPortFree+0x3c>
 8004124:	b672      	cpsid	i
 8004126:	e7fe      	b.n	8004126 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	4b11      	ldr	r3, [pc, #68]	; (8004174 <vPortFree+0x88>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4013      	ands	r3, r2
 8004132:	d01a      	beq.n	800416a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d116      	bne.n	800416a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <vPortFree+0x88>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	43db      	mvns	r3, r3
 8004146:	401a      	ands	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800414c:	f7ff f9d4 	bl	80034f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	4b08      	ldr	r3, [pc, #32]	; (8004178 <vPortFree+0x8c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	18d2      	adds	r2, r2, r3
 800415a:	4b07      	ldr	r3, [pc, #28]	; (8004178 <vPortFree+0x8c>)
 800415c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	0018      	movs	r0, r3
 8004162:	f000 f86b 	bl	800423c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004166:	f7ff f9d3 	bl	8003510 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	46bd      	mov	sp, r7
 800416e:	b004      	add	sp, #16
 8004170:	bd80      	pop	{r7, pc}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	20001108 	.word	0x20001108
 8004178:	20001100 	.word	0x20001100

0800417c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004182:	23c0      	movs	r3, #192	; 0xc0
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004188:	4b26      	ldr	r3, [pc, #152]	; (8004224 <prvHeapInit+0xa8>)
 800418a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2207      	movs	r2, #7
 8004190:	4013      	ands	r3, r2
 8004192:	d00c      	beq.n	80041ae <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	3307      	adds	r3, #7
 8004198:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2207      	movs	r2, #7
 800419e:	4393      	bics	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	1ad2      	subs	r2, r2, r3
 80041a8:	4b1e      	ldr	r3, [pc, #120]	; (8004224 <prvHeapInit+0xa8>)
 80041aa:	18d3      	adds	r3, r2, r3
 80041ac:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041b2:	4b1d      	ldr	r3, [pc, #116]	; (8004228 <prvHeapInit+0xac>)
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80041b8:	4b1b      	ldr	r3, [pc, #108]	; (8004228 <prvHeapInit+0xac>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	18d3      	adds	r3, r2, r3
 80041c4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80041c6:	2208      	movs	r2, #8
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	1a9b      	subs	r3, r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2207      	movs	r2, #7
 80041d2:	4393      	bics	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	4b14      	ldr	r3, [pc, #80]	; (800422c <prvHeapInit+0xb0>)
 80041da:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80041dc:	4b13      	ldr	r3, [pc, #76]	; (800422c <prvHeapInit+0xb0>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2200      	movs	r2, #0
 80041e2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80041e4:	4b11      	ldr	r3, [pc, #68]	; (800422c <prvHeapInit+0xb0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	1ad2      	subs	r2, r2, r3
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80041fa:	4b0c      	ldr	r3, [pc, #48]	; (800422c <prvHeapInit+0xb0>)
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <prvHeapInit+0xb4>)
 8004208:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	4b09      	ldr	r3, [pc, #36]	; (8004234 <prvHeapInit+0xb8>)
 8004210:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004212:	4b09      	ldr	r3, [pc, #36]	; (8004238 <prvHeapInit+0xbc>)
 8004214:	2280      	movs	r2, #128	; 0x80
 8004216:	0612      	lsls	r2, r2, #24
 8004218:	601a      	str	r2, [r3, #0]
}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	46bd      	mov	sp, r7
 800421e:	b004      	add	sp, #16
 8004220:	bd80      	pop	{r7, pc}
 8004222:	46c0      	nop			; (mov r8, r8)
 8004224:	200004f4 	.word	0x200004f4
 8004228:	200010f4 	.word	0x200010f4
 800422c:	200010fc 	.word	0x200010fc
 8004230:	20001104 	.word	0x20001104
 8004234:	20001100 	.word	0x20001100
 8004238:	20001108 	.word	0x20001108

0800423c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004244:	4b27      	ldr	r3, [pc, #156]	; (80042e4 <prvInsertBlockIntoFreeList+0xa8>)
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	e002      	b.n	8004250 <prvInsertBlockIntoFreeList+0x14>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	429a      	cmp	r2, r3
 8004258:	d8f7      	bhi.n	800424a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	18d3      	adds	r3, r2, r3
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	429a      	cmp	r2, r3
 800426a:	d108      	bne.n	800427e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	18d2      	adds	r2, r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	18d2      	adds	r2, r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d118      	bne.n	80042c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <prvInsertBlockIntoFreeList+0xac>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d00d      	beq.n	80042ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	18d2      	adds	r2, r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	e008      	b.n	80042cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80042ba:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <prvInsertBlockIntoFreeList+0xac>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	e003      	b.n	80042cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d002      	beq.n	80042da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	46bd      	mov	sp, r7
 80042de:	b004      	add	sp, #16
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	46c0      	nop			; (mov r8, r8)
 80042e4:	200010f4 	.word	0x200010f4
 80042e8:	200010fc 	.word	0x200010fc

080042ec <__errno>:
 80042ec:	4b01      	ldr	r3, [pc, #4]	; (80042f4 <__errno+0x8>)
 80042ee:	6818      	ldr	r0, [r3, #0]
 80042f0:	4770      	bx	lr
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	2000000c 	.word	0x2000000c

080042f8 <__libc_init_array>:
 80042f8:	b570      	push	{r4, r5, r6, lr}
 80042fa:	2600      	movs	r6, #0
 80042fc:	4d0c      	ldr	r5, [pc, #48]	; (8004330 <__libc_init_array+0x38>)
 80042fe:	4c0d      	ldr	r4, [pc, #52]	; (8004334 <__libc_init_array+0x3c>)
 8004300:	1b64      	subs	r4, r4, r5
 8004302:	10a4      	asrs	r4, r4, #2
 8004304:	42a6      	cmp	r6, r4
 8004306:	d109      	bne.n	800431c <__libc_init_array+0x24>
 8004308:	2600      	movs	r6, #0
 800430a:	f000 fc8b 	bl	8004c24 <_init>
 800430e:	4d0a      	ldr	r5, [pc, #40]	; (8004338 <__libc_init_array+0x40>)
 8004310:	4c0a      	ldr	r4, [pc, #40]	; (800433c <__libc_init_array+0x44>)
 8004312:	1b64      	subs	r4, r4, r5
 8004314:	10a4      	asrs	r4, r4, #2
 8004316:	42a6      	cmp	r6, r4
 8004318:	d105      	bne.n	8004326 <__libc_init_array+0x2e>
 800431a:	bd70      	pop	{r4, r5, r6, pc}
 800431c:	00b3      	lsls	r3, r6, #2
 800431e:	58eb      	ldr	r3, [r5, r3]
 8004320:	4798      	blx	r3
 8004322:	3601      	adds	r6, #1
 8004324:	e7ee      	b.n	8004304 <__libc_init_array+0xc>
 8004326:	00b3      	lsls	r3, r6, #2
 8004328:	58eb      	ldr	r3, [r5, r3]
 800432a:	4798      	blx	r3
 800432c:	3601      	adds	r6, #1
 800432e:	e7f2      	b.n	8004316 <__libc_init_array+0x1e>
 8004330:	08004d94 	.word	0x08004d94
 8004334:	08004d94 	.word	0x08004d94
 8004338:	08004d94 	.word	0x08004d94
 800433c:	08004d98 	.word	0x08004d98

08004340 <memcpy>:
 8004340:	2300      	movs	r3, #0
 8004342:	b510      	push	{r4, lr}
 8004344:	429a      	cmp	r2, r3
 8004346:	d100      	bne.n	800434a <memcpy+0xa>
 8004348:	bd10      	pop	{r4, pc}
 800434a:	5ccc      	ldrb	r4, [r1, r3]
 800434c:	54c4      	strb	r4, [r0, r3]
 800434e:	3301      	adds	r3, #1
 8004350:	e7f8      	b.n	8004344 <memcpy+0x4>

08004352 <memset>:
 8004352:	0003      	movs	r3, r0
 8004354:	1882      	adds	r2, r0, r2
 8004356:	4293      	cmp	r3, r2
 8004358:	d100      	bne.n	800435c <memset+0xa>
 800435a:	4770      	bx	lr
 800435c:	7019      	strb	r1, [r3, #0]
 800435e:	3301      	adds	r3, #1
 8004360:	e7f9      	b.n	8004356 <memset+0x4>
	...

08004364 <siprintf>:
 8004364:	b40e      	push	{r1, r2, r3}
 8004366:	b500      	push	{lr}
 8004368:	490b      	ldr	r1, [pc, #44]	; (8004398 <siprintf+0x34>)
 800436a:	b09c      	sub	sp, #112	; 0x70
 800436c:	ab1d      	add	r3, sp, #116	; 0x74
 800436e:	9002      	str	r0, [sp, #8]
 8004370:	9006      	str	r0, [sp, #24]
 8004372:	9107      	str	r1, [sp, #28]
 8004374:	9104      	str	r1, [sp, #16]
 8004376:	4809      	ldr	r0, [pc, #36]	; (800439c <siprintf+0x38>)
 8004378:	4909      	ldr	r1, [pc, #36]	; (80043a0 <siprintf+0x3c>)
 800437a:	cb04      	ldmia	r3!, {r2}
 800437c:	9105      	str	r1, [sp, #20]
 800437e:	6800      	ldr	r0, [r0, #0]
 8004380:	a902      	add	r1, sp, #8
 8004382:	9301      	str	r3, [sp, #4]
 8004384:	f000 f870 	bl	8004468 <_svfiprintf_r>
 8004388:	2300      	movs	r3, #0
 800438a:	9a02      	ldr	r2, [sp, #8]
 800438c:	7013      	strb	r3, [r2, #0]
 800438e:	b01c      	add	sp, #112	; 0x70
 8004390:	bc08      	pop	{r3}
 8004392:	b003      	add	sp, #12
 8004394:	4718      	bx	r3
 8004396:	46c0      	nop			; (mov r8, r8)
 8004398:	7fffffff 	.word	0x7fffffff
 800439c:	2000000c 	.word	0x2000000c
 80043a0:	ffff0208 	.word	0xffff0208

080043a4 <__ssputs_r>:
 80043a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043a6:	688e      	ldr	r6, [r1, #8]
 80043a8:	b085      	sub	sp, #20
 80043aa:	0007      	movs	r7, r0
 80043ac:	000c      	movs	r4, r1
 80043ae:	9203      	str	r2, [sp, #12]
 80043b0:	9301      	str	r3, [sp, #4]
 80043b2:	429e      	cmp	r6, r3
 80043b4:	d83c      	bhi.n	8004430 <__ssputs_r+0x8c>
 80043b6:	2390      	movs	r3, #144	; 0x90
 80043b8:	898a      	ldrh	r2, [r1, #12]
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	421a      	tst	r2, r3
 80043be:	d034      	beq.n	800442a <__ssputs_r+0x86>
 80043c0:	6909      	ldr	r1, [r1, #16]
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	6960      	ldr	r0, [r4, #20]
 80043c6:	1a5b      	subs	r3, r3, r1
 80043c8:	9302      	str	r3, [sp, #8]
 80043ca:	2303      	movs	r3, #3
 80043cc:	4343      	muls	r3, r0
 80043ce:	0fdd      	lsrs	r5, r3, #31
 80043d0:	18ed      	adds	r5, r5, r3
 80043d2:	9b01      	ldr	r3, [sp, #4]
 80043d4:	9802      	ldr	r0, [sp, #8]
 80043d6:	3301      	adds	r3, #1
 80043d8:	181b      	adds	r3, r3, r0
 80043da:	106d      	asrs	r5, r5, #1
 80043dc:	42ab      	cmp	r3, r5
 80043de:	d900      	bls.n	80043e2 <__ssputs_r+0x3e>
 80043e0:	001d      	movs	r5, r3
 80043e2:	0553      	lsls	r3, r2, #21
 80043e4:	d532      	bpl.n	800444c <__ssputs_r+0xa8>
 80043e6:	0029      	movs	r1, r5
 80043e8:	0038      	movs	r0, r7
 80043ea:	f000 fb49 	bl	8004a80 <_malloc_r>
 80043ee:	1e06      	subs	r6, r0, #0
 80043f0:	d109      	bne.n	8004406 <__ssputs_r+0x62>
 80043f2:	230c      	movs	r3, #12
 80043f4:	603b      	str	r3, [r7, #0]
 80043f6:	2340      	movs	r3, #64	; 0x40
 80043f8:	2001      	movs	r0, #1
 80043fa:	89a2      	ldrh	r2, [r4, #12]
 80043fc:	4240      	negs	r0, r0
 80043fe:	4313      	orrs	r3, r2
 8004400:	81a3      	strh	r3, [r4, #12]
 8004402:	b005      	add	sp, #20
 8004404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004406:	9a02      	ldr	r2, [sp, #8]
 8004408:	6921      	ldr	r1, [r4, #16]
 800440a:	f7ff ff99 	bl	8004340 <memcpy>
 800440e:	89a3      	ldrh	r3, [r4, #12]
 8004410:	4a14      	ldr	r2, [pc, #80]	; (8004464 <__ssputs_r+0xc0>)
 8004412:	401a      	ands	r2, r3
 8004414:	2380      	movs	r3, #128	; 0x80
 8004416:	4313      	orrs	r3, r2
 8004418:	81a3      	strh	r3, [r4, #12]
 800441a:	9b02      	ldr	r3, [sp, #8]
 800441c:	6126      	str	r6, [r4, #16]
 800441e:	18f6      	adds	r6, r6, r3
 8004420:	6026      	str	r6, [r4, #0]
 8004422:	6165      	str	r5, [r4, #20]
 8004424:	9e01      	ldr	r6, [sp, #4]
 8004426:	1aed      	subs	r5, r5, r3
 8004428:	60a5      	str	r5, [r4, #8]
 800442a:	9b01      	ldr	r3, [sp, #4]
 800442c:	429e      	cmp	r6, r3
 800442e:	d900      	bls.n	8004432 <__ssputs_r+0x8e>
 8004430:	9e01      	ldr	r6, [sp, #4]
 8004432:	0032      	movs	r2, r6
 8004434:	9903      	ldr	r1, [sp, #12]
 8004436:	6820      	ldr	r0, [r4, #0]
 8004438:	f000 faa3 	bl	8004982 <memmove>
 800443c:	68a3      	ldr	r3, [r4, #8]
 800443e:	2000      	movs	r0, #0
 8004440:	1b9b      	subs	r3, r3, r6
 8004442:	60a3      	str	r3, [r4, #8]
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	199e      	adds	r6, r3, r6
 8004448:	6026      	str	r6, [r4, #0]
 800444a:	e7da      	b.n	8004402 <__ssputs_r+0x5e>
 800444c:	002a      	movs	r2, r5
 800444e:	0038      	movs	r0, r7
 8004450:	f000 fb8c 	bl	8004b6c <_realloc_r>
 8004454:	1e06      	subs	r6, r0, #0
 8004456:	d1e0      	bne.n	800441a <__ssputs_r+0x76>
 8004458:	0038      	movs	r0, r7
 800445a:	6921      	ldr	r1, [r4, #16]
 800445c:	f000 faa4 	bl	80049a8 <_free_r>
 8004460:	e7c7      	b.n	80043f2 <__ssputs_r+0x4e>
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	fffffb7f 	.word	0xfffffb7f

08004468 <_svfiprintf_r>:
 8004468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800446a:	b0a1      	sub	sp, #132	; 0x84
 800446c:	9003      	str	r0, [sp, #12]
 800446e:	001d      	movs	r5, r3
 8004470:	898b      	ldrh	r3, [r1, #12]
 8004472:	000f      	movs	r7, r1
 8004474:	0016      	movs	r6, r2
 8004476:	061b      	lsls	r3, r3, #24
 8004478:	d511      	bpl.n	800449e <_svfiprintf_r+0x36>
 800447a:	690b      	ldr	r3, [r1, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10e      	bne.n	800449e <_svfiprintf_r+0x36>
 8004480:	2140      	movs	r1, #64	; 0x40
 8004482:	f000 fafd 	bl	8004a80 <_malloc_r>
 8004486:	6038      	str	r0, [r7, #0]
 8004488:	6138      	str	r0, [r7, #16]
 800448a:	2800      	cmp	r0, #0
 800448c:	d105      	bne.n	800449a <_svfiprintf_r+0x32>
 800448e:	230c      	movs	r3, #12
 8004490:	9a03      	ldr	r2, [sp, #12]
 8004492:	3801      	subs	r0, #1
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	b021      	add	sp, #132	; 0x84
 8004498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800449a:	2340      	movs	r3, #64	; 0x40
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	2300      	movs	r3, #0
 80044a0:	ac08      	add	r4, sp, #32
 80044a2:	6163      	str	r3, [r4, #20]
 80044a4:	3320      	adds	r3, #32
 80044a6:	7663      	strb	r3, [r4, #25]
 80044a8:	3310      	adds	r3, #16
 80044aa:	76a3      	strb	r3, [r4, #26]
 80044ac:	9507      	str	r5, [sp, #28]
 80044ae:	0035      	movs	r5, r6
 80044b0:	782b      	ldrb	r3, [r5, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <_svfiprintf_r+0x52>
 80044b6:	2b25      	cmp	r3, #37	; 0x25
 80044b8:	d147      	bne.n	800454a <_svfiprintf_r+0xe2>
 80044ba:	1bab      	subs	r3, r5, r6
 80044bc:	9305      	str	r3, [sp, #20]
 80044be:	42b5      	cmp	r5, r6
 80044c0:	d00c      	beq.n	80044dc <_svfiprintf_r+0x74>
 80044c2:	0032      	movs	r2, r6
 80044c4:	0039      	movs	r1, r7
 80044c6:	9803      	ldr	r0, [sp, #12]
 80044c8:	f7ff ff6c 	bl	80043a4 <__ssputs_r>
 80044cc:	1c43      	adds	r3, r0, #1
 80044ce:	d100      	bne.n	80044d2 <_svfiprintf_r+0x6a>
 80044d0:	e0ae      	b.n	8004630 <_svfiprintf_r+0x1c8>
 80044d2:	6962      	ldr	r2, [r4, #20]
 80044d4:	9b05      	ldr	r3, [sp, #20]
 80044d6:	4694      	mov	ip, r2
 80044d8:	4463      	add	r3, ip
 80044da:	6163      	str	r3, [r4, #20]
 80044dc:	782b      	ldrb	r3, [r5, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d100      	bne.n	80044e4 <_svfiprintf_r+0x7c>
 80044e2:	e0a5      	b.n	8004630 <_svfiprintf_r+0x1c8>
 80044e4:	2201      	movs	r2, #1
 80044e6:	2300      	movs	r3, #0
 80044e8:	4252      	negs	r2, r2
 80044ea:	6062      	str	r2, [r4, #4]
 80044ec:	a904      	add	r1, sp, #16
 80044ee:	3254      	adds	r2, #84	; 0x54
 80044f0:	1852      	adds	r2, r2, r1
 80044f2:	1c6e      	adds	r6, r5, #1
 80044f4:	6023      	str	r3, [r4, #0]
 80044f6:	60e3      	str	r3, [r4, #12]
 80044f8:	60a3      	str	r3, [r4, #8]
 80044fa:	7013      	strb	r3, [r2, #0]
 80044fc:	65a3      	str	r3, [r4, #88]	; 0x58
 80044fe:	2205      	movs	r2, #5
 8004500:	7831      	ldrb	r1, [r6, #0]
 8004502:	4854      	ldr	r0, [pc, #336]	; (8004654 <_svfiprintf_r+0x1ec>)
 8004504:	f000 fa32 	bl	800496c <memchr>
 8004508:	1c75      	adds	r5, r6, #1
 800450a:	2800      	cmp	r0, #0
 800450c:	d11f      	bne.n	800454e <_svfiprintf_r+0xe6>
 800450e:	6822      	ldr	r2, [r4, #0]
 8004510:	06d3      	lsls	r3, r2, #27
 8004512:	d504      	bpl.n	800451e <_svfiprintf_r+0xb6>
 8004514:	2353      	movs	r3, #83	; 0x53
 8004516:	a904      	add	r1, sp, #16
 8004518:	185b      	adds	r3, r3, r1
 800451a:	2120      	movs	r1, #32
 800451c:	7019      	strb	r1, [r3, #0]
 800451e:	0713      	lsls	r3, r2, #28
 8004520:	d504      	bpl.n	800452c <_svfiprintf_r+0xc4>
 8004522:	2353      	movs	r3, #83	; 0x53
 8004524:	a904      	add	r1, sp, #16
 8004526:	185b      	adds	r3, r3, r1
 8004528:	212b      	movs	r1, #43	; 0x2b
 800452a:	7019      	strb	r1, [r3, #0]
 800452c:	7833      	ldrb	r3, [r6, #0]
 800452e:	2b2a      	cmp	r3, #42	; 0x2a
 8004530:	d016      	beq.n	8004560 <_svfiprintf_r+0xf8>
 8004532:	0035      	movs	r5, r6
 8004534:	2100      	movs	r1, #0
 8004536:	200a      	movs	r0, #10
 8004538:	68e3      	ldr	r3, [r4, #12]
 800453a:	782a      	ldrb	r2, [r5, #0]
 800453c:	1c6e      	adds	r6, r5, #1
 800453e:	3a30      	subs	r2, #48	; 0x30
 8004540:	2a09      	cmp	r2, #9
 8004542:	d94e      	bls.n	80045e2 <_svfiprintf_r+0x17a>
 8004544:	2900      	cmp	r1, #0
 8004546:	d111      	bne.n	800456c <_svfiprintf_r+0x104>
 8004548:	e017      	b.n	800457a <_svfiprintf_r+0x112>
 800454a:	3501      	adds	r5, #1
 800454c:	e7b0      	b.n	80044b0 <_svfiprintf_r+0x48>
 800454e:	4b41      	ldr	r3, [pc, #260]	; (8004654 <_svfiprintf_r+0x1ec>)
 8004550:	6822      	ldr	r2, [r4, #0]
 8004552:	1ac0      	subs	r0, r0, r3
 8004554:	2301      	movs	r3, #1
 8004556:	4083      	lsls	r3, r0
 8004558:	4313      	orrs	r3, r2
 800455a:	002e      	movs	r6, r5
 800455c:	6023      	str	r3, [r4, #0]
 800455e:	e7ce      	b.n	80044fe <_svfiprintf_r+0x96>
 8004560:	9b07      	ldr	r3, [sp, #28]
 8004562:	1d19      	adds	r1, r3, #4
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	9107      	str	r1, [sp, #28]
 8004568:	2b00      	cmp	r3, #0
 800456a:	db01      	blt.n	8004570 <_svfiprintf_r+0x108>
 800456c:	930b      	str	r3, [sp, #44]	; 0x2c
 800456e:	e004      	b.n	800457a <_svfiprintf_r+0x112>
 8004570:	425b      	negs	r3, r3
 8004572:	60e3      	str	r3, [r4, #12]
 8004574:	2302      	movs	r3, #2
 8004576:	4313      	orrs	r3, r2
 8004578:	6023      	str	r3, [r4, #0]
 800457a:	782b      	ldrb	r3, [r5, #0]
 800457c:	2b2e      	cmp	r3, #46	; 0x2e
 800457e:	d10a      	bne.n	8004596 <_svfiprintf_r+0x12e>
 8004580:	786b      	ldrb	r3, [r5, #1]
 8004582:	2b2a      	cmp	r3, #42	; 0x2a
 8004584:	d135      	bne.n	80045f2 <_svfiprintf_r+0x18a>
 8004586:	9b07      	ldr	r3, [sp, #28]
 8004588:	3502      	adds	r5, #2
 800458a:	1d1a      	adds	r2, r3, #4
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	9207      	str	r2, [sp, #28]
 8004590:	2b00      	cmp	r3, #0
 8004592:	db2b      	blt.n	80045ec <_svfiprintf_r+0x184>
 8004594:	9309      	str	r3, [sp, #36]	; 0x24
 8004596:	4e30      	ldr	r6, [pc, #192]	; (8004658 <_svfiprintf_r+0x1f0>)
 8004598:	2203      	movs	r2, #3
 800459a:	0030      	movs	r0, r6
 800459c:	7829      	ldrb	r1, [r5, #0]
 800459e:	f000 f9e5 	bl	800496c <memchr>
 80045a2:	2800      	cmp	r0, #0
 80045a4:	d006      	beq.n	80045b4 <_svfiprintf_r+0x14c>
 80045a6:	2340      	movs	r3, #64	; 0x40
 80045a8:	1b80      	subs	r0, r0, r6
 80045aa:	4083      	lsls	r3, r0
 80045ac:	6822      	ldr	r2, [r4, #0]
 80045ae:	3501      	adds	r5, #1
 80045b0:	4313      	orrs	r3, r2
 80045b2:	6023      	str	r3, [r4, #0]
 80045b4:	7829      	ldrb	r1, [r5, #0]
 80045b6:	2206      	movs	r2, #6
 80045b8:	4828      	ldr	r0, [pc, #160]	; (800465c <_svfiprintf_r+0x1f4>)
 80045ba:	1c6e      	adds	r6, r5, #1
 80045bc:	7621      	strb	r1, [r4, #24]
 80045be:	f000 f9d5 	bl	800496c <memchr>
 80045c2:	2800      	cmp	r0, #0
 80045c4:	d03c      	beq.n	8004640 <_svfiprintf_r+0x1d8>
 80045c6:	4b26      	ldr	r3, [pc, #152]	; (8004660 <_svfiprintf_r+0x1f8>)
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d125      	bne.n	8004618 <_svfiprintf_r+0x1b0>
 80045cc:	2207      	movs	r2, #7
 80045ce:	9b07      	ldr	r3, [sp, #28]
 80045d0:	3307      	adds	r3, #7
 80045d2:	4393      	bics	r3, r2
 80045d4:	3308      	adds	r3, #8
 80045d6:	9307      	str	r3, [sp, #28]
 80045d8:	6963      	ldr	r3, [r4, #20]
 80045da:	9a04      	ldr	r2, [sp, #16]
 80045dc:	189b      	adds	r3, r3, r2
 80045de:	6163      	str	r3, [r4, #20]
 80045e0:	e765      	b.n	80044ae <_svfiprintf_r+0x46>
 80045e2:	4343      	muls	r3, r0
 80045e4:	0035      	movs	r5, r6
 80045e6:	2101      	movs	r1, #1
 80045e8:	189b      	adds	r3, r3, r2
 80045ea:	e7a6      	b.n	800453a <_svfiprintf_r+0xd2>
 80045ec:	2301      	movs	r3, #1
 80045ee:	425b      	negs	r3, r3
 80045f0:	e7d0      	b.n	8004594 <_svfiprintf_r+0x12c>
 80045f2:	2300      	movs	r3, #0
 80045f4:	200a      	movs	r0, #10
 80045f6:	001a      	movs	r2, r3
 80045f8:	3501      	adds	r5, #1
 80045fa:	6063      	str	r3, [r4, #4]
 80045fc:	7829      	ldrb	r1, [r5, #0]
 80045fe:	1c6e      	adds	r6, r5, #1
 8004600:	3930      	subs	r1, #48	; 0x30
 8004602:	2909      	cmp	r1, #9
 8004604:	d903      	bls.n	800460e <_svfiprintf_r+0x1a6>
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0c5      	beq.n	8004596 <_svfiprintf_r+0x12e>
 800460a:	9209      	str	r2, [sp, #36]	; 0x24
 800460c:	e7c3      	b.n	8004596 <_svfiprintf_r+0x12e>
 800460e:	4342      	muls	r2, r0
 8004610:	0035      	movs	r5, r6
 8004612:	2301      	movs	r3, #1
 8004614:	1852      	adds	r2, r2, r1
 8004616:	e7f1      	b.n	80045fc <_svfiprintf_r+0x194>
 8004618:	ab07      	add	r3, sp, #28
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	003a      	movs	r2, r7
 800461e:	0021      	movs	r1, r4
 8004620:	4b10      	ldr	r3, [pc, #64]	; (8004664 <_svfiprintf_r+0x1fc>)
 8004622:	9803      	ldr	r0, [sp, #12]
 8004624:	e000      	b.n	8004628 <_svfiprintf_r+0x1c0>
 8004626:	bf00      	nop
 8004628:	9004      	str	r0, [sp, #16]
 800462a:	9b04      	ldr	r3, [sp, #16]
 800462c:	3301      	adds	r3, #1
 800462e:	d1d3      	bne.n	80045d8 <_svfiprintf_r+0x170>
 8004630:	89bb      	ldrh	r3, [r7, #12]
 8004632:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004634:	065b      	lsls	r3, r3, #25
 8004636:	d400      	bmi.n	800463a <_svfiprintf_r+0x1d2>
 8004638:	e72d      	b.n	8004496 <_svfiprintf_r+0x2e>
 800463a:	2001      	movs	r0, #1
 800463c:	4240      	negs	r0, r0
 800463e:	e72a      	b.n	8004496 <_svfiprintf_r+0x2e>
 8004640:	ab07      	add	r3, sp, #28
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	003a      	movs	r2, r7
 8004646:	0021      	movs	r1, r4
 8004648:	4b06      	ldr	r3, [pc, #24]	; (8004664 <_svfiprintf_r+0x1fc>)
 800464a:	9803      	ldr	r0, [sp, #12]
 800464c:	f000 f87c 	bl	8004748 <_printf_i>
 8004650:	e7ea      	b.n	8004628 <_svfiprintf_r+0x1c0>
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	08004d60 	.word	0x08004d60
 8004658:	08004d66 	.word	0x08004d66
 800465c:	08004d6a 	.word	0x08004d6a
 8004660:	00000000 	.word	0x00000000
 8004664:	080043a5 	.word	0x080043a5

08004668 <_printf_common>:
 8004668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800466a:	0015      	movs	r5, r2
 800466c:	9301      	str	r3, [sp, #4]
 800466e:	688a      	ldr	r2, [r1, #8]
 8004670:	690b      	ldr	r3, [r1, #16]
 8004672:	000c      	movs	r4, r1
 8004674:	9000      	str	r0, [sp, #0]
 8004676:	4293      	cmp	r3, r2
 8004678:	da00      	bge.n	800467c <_printf_common+0x14>
 800467a:	0013      	movs	r3, r2
 800467c:	0022      	movs	r2, r4
 800467e:	602b      	str	r3, [r5, #0]
 8004680:	3243      	adds	r2, #67	; 0x43
 8004682:	7812      	ldrb	r2, [r2, #0]
 8004684:	2a00      	cmp	r2, #0
 8004686:	d001      	beq.n	800468c <_printf_common+0x24>
 8004688:	3301      	adds	r3, #1
 800468a:	602b      	str	r3, [r5, #0]
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	069b      	lsls	r3, r3, #26
 8004690:	d502      	bpl.n	8004698 <_printf_common+0x30>
 8004692:	682b      	ldr	r3, [r5, #0]
 8004694:	3302      	adds	r3, #2
 8004696:	602b      	str	r3, [r5, #0]
 8004698:	6822      	ldr	r2, [r4, #0]
 800469a:	2306      	movs	r3, #6
 800469c:	0017      	movs	r7, r2
 800469e:	401f      	ands	r7, r3
 80046a0:	421a      	tst	r2, r3
 80046a2:	d027      	beq.n	80046f4 <_printf_common+0x8c>
 80046a4:	0023      	movs	r3, r4
 80046a6:	3343      	adds	r3, #67	; 0x43
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	1e5a      	subs	r2, r3, #1
 80046ac:	4193      	sbcs	r3, r2
 80046ae:	6822      	ldr	r2, [r4, #0]
 80046b0:	0692      	lsls	r2, r2, #26
 80046b2:	d430      	bmi.n	8004716 <_printf_common+0xae>
 80046b4:	0022      	movs	r2, r4
 80046b6:	9901      	ldr	r1, [sp, #4]
 80046b8:	9800      	ldr	r0, [sp, #0]
 80046ba:	9e08      	ldr	r6, [sp, #32]
 80046bc:	3243      	adds	r2, #67	; 0x43
 80046be:	47b0      	blx	r6
 80046c0:	1c43      	adds	r3, r0, #1
 80046c2:	d025      	beq.n	8004710 <_printf_common+0xa8>
 80046c4:	2306      	movs	r3, #6
 80046c6:	6820      	ldr	r0, [r4, #0]
 80046c8:	682a      	ldr	r2, [r5, #0]
 80046ca:	68e1      	ldr	r1, [r4, #12]
 80046cc:	2500      	movs	r5, #0
 80046ce:	4003      	ands	r3, r0
 80046d0:	2b04      	cmp	r3, #4
 80046d2:	d103      	bne.n	80046dc <_printf_common+0x74>
 80046d4:	1a8d      	subs	r5, r1, r2
 80046d6:	43eb      	mvns	r3, r5
 80046d8:	17db      	asrs	r3, r3, #31
 80046da:	401d      	ands	r5, r3
 80046dc:	68a3      	ldr	r3, [r4, #8]
 80046de:	6922      	ldr	r2, [r4, #16]
 80046e0:	4293      	cmp	r3, r2
 80046e2:	dd01      	ble.n	80046e8 <_printf_common+0x80>
 80046e4:	1a9b      	subs	r3, r3, r2
 80046e6:	18ed      	adds	r5, r5, r3
 80046e8:	2700      	movs	r7, #0
 80046ea:	42bd      	cmp	r5, r7
 80046ec:	d120      	bne.n	8004730 <_printf_common+0xc8>
 80046ee:	2000      	movs	r0, #0
 80046f0:	e010      	b.n	8004714 <_printf_common+0xac>
 80046f2:	3701      	adds	r7, #1
 80046f4:	68e3      	ldr	r3, [r4, #12]
 80046f6:	682a      	ldr	r2, [r5, #0]
 80046f8:	1a9b      	subs	r3, r3, r2
 80046fa:	42bb      	cmp	r3, r7
 80046fc:	ddd2      	ble.n	80046a4 <_printf_common+0x3c>
 80046fe:	0022      	movs	r2, r4
 8004700:	2301      	movs	r3, #1
 8004702:	9901      	ldr	r1, [sp, #4]
 8004704:	9800      	ldr	r0, [sp, #0]
 8004706:	9e08      	ldr	r6, [sp, #32]
 8004708:	3219      	adds	r2, #25
 800470a:	47b0      	blx	r6
 800470c:	1c43      	adds	r3, r0, #1
 800470e:	d1f0      	bne.n	80046f2 <_printf_common+0x8a>
 8004710:	2001      	movs	r0, #1
 8004712:	4240      	negs	r0, r0
 8004714:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004716:	2030      	movs	r0, #48	; 0x30
 8004718:	18e1      	adds	r1, r4, r3
 800471a:	3143      	adds	r1, #67	; 0x43
 800471c:	7008      	strb	r0, [r1, #0]
 800471e:	0021      	movs	r1, r4
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	3145      	adds	r1, #69	; 0x45
 8004724:	7809      	ldrb	r1, [r1, #0]
 8004726:	18a2      	adds	r2, r4, r2
 8004728:	3243      	adds	r2, #67	; 0x43
 800472a:	3302      	adds	r3, #2
 800472c:	7011      	strb	r1, [r2, #0]
 800472e:	e7c1      	b.n	80046b4 <_printf_common+0x4c>
 8004730:	0022      	movs	r2, r4
 8004732:	2301      	movs	r3, #1
 8004734:	9901      	ldr	r1, [sp, #4]
 8004736:	9800      	ldr	r0, [sp, #0]
 8004738:	9e08      	ldr	r6, [sp, #32]
 800473a:	321a      	adds	r2, #26
 800473c:	47b0      	blx	r6
 800473e:	1c43      	adds	r3, r0, #1
 8004740:	d0e6      	beq.n	8004710 <_printf_common+0xa8>
 8004742:	3701      	adds	r7, #1
 8004744:	e7d1      	b.n	80046ea <_printf_common+0x82>
	...

08004748 <_printf_i>:
 8004748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800474a:	b08b      	sub	sp, #44	; 0x2c
 800474c:	9206      	str	r2, [sp, #24]
 800474e:	000a      	movs	r2, r1
 8004750:	3243      	adds	r2, #67	; 0x43
 8004752:	9307      	str	r3, [sp, #28]
 8004754:	9005      	str	r0, [sp, #20]
 8004756:	9204      	str	r2, [sp, #16]
 8004758:	7e0a      	ldrb	r2, [r1, #24]
 800475a:	000c      	movs	r4, r1
 800475c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800475e:	2a78      	cmp	r2, #120	; 0x78
 8004760:	d807      	bhi.n	8004772 <_printf_i+0x2a>
 8004762:	2a62      	cmp	r2, #98	; 0x62
 8004764:	d809      	bhi.n	800477a <_printf_i+0x32>
 8004766:	2a00      	cmp	r2, #0
 8004768:	d100      	bne.n	800476c <_printf_i+0x24>
 800476a:	e0c1      	b.n	80048f0 <_printf_i+0x1a8>
 800476c:	2a58      	cmp	r2, #88	; 0x58
 800476e:	d100      	bne.n	8004772 <_printf_i+0x2a>
 8004770:	e08c      	b.n	800488c <_printf_i+0x144>
 8004772:	0026      	movs	r6, r4
 8004774:	3642      	adds	r6, #66	; 0x42
 8004776:	7032      	strb	r2, [r6, #0]
 8004778:	e022      	b.n	80047c0 <_printf_i+0x78>
 800477a:	0010      	movs	r0, r2
 800477c:	3863      	subs	r0, #99	; 0x63
 800477e:	2815      	cmp	r0, #21
 8004780:	d8f7      	bhi.n	8004772 <_printf_i+0x2a>
 8004782:	f7fb fcc9 	bl	8000118 <__gnu_thumb1_case_shi>
 8004786:	0016      	.short	0x0016
 8004788:	fff6001f 	.word	0xfff6001f
 800478c:	fff6fff6 	.word	0xfff6fff6
 8004790:	001ffff6 	.word	0x001ffff6
 8004794:	fff6fff6 	.word	0xfff6fff6
 8004798:	fff6fff6 	.word	0xfff6fff6
 800479c:	003600a8 	.word	0x003600a8
 80047a0:	fff6009a 	.word	0xfff6009a
 80047a4:	00b9fff6 	.word	0x00b9fff6
 80047a8:	0036fff6 	.word	0x0036fff6
 80047ac:	fff6fff6 	.word	0xfff6fff6
 80047b0:	009e      	.short	0x009e
 80047b2:	0026      	movs	r6, r4
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	3642      	adds	r6, #66	; 0x42
 80047b8:	1d11      	adds	r1, r2, #4
 80047ba:	6019      	str	r1, [r3, #0]
 80047bc:	6813      	ldr	r3, [r2, #0]
 80047be:	7033      	strb	r3, [r6, #0]
 80047c0:	2301      	movs	r3, #1
 80047c2:	e0a7      	b.n	8004914 <_printf_i+0x1cc>
 80047c4:	6808      	ldr	r0, [r1, #0]
 80047c6:	6819      	ldr	r1, [r3, #0]
 80047c8:	1d0a      	adds	r2, r1, #4
 80047ca:	0605      	lsls	r5, r0, #24
 80047cc:	d50b      	bpl.n	80047e6 <_printf_i+0x9e>
 80047ce:	680d      	ldr	r5, [r1, #0]
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	2d00      	cmp	r5, #0
 80047d4:	da03      	bge.n	80047de <_printf_i+0x96>
 80047d6:	232d      	movs	r3, #45	; 0x2d
 80047d8:	9a04      	ldr	r2, [sp, #16]
 80047da:	426d      	negs	r5, r5
 80047dc:	7013      	strb	r3, [r2, #0]
 80047de:	4b61      	ldr	r3, [pc, #388]	; (8004964 <_printf_i+0x21c>)
 80047e0:	270a      	movs	r7, #10
 80047e2:	9303      	str	r3, [sp, #12]
 80047e4:	e01b      	b.n	800481e <_printf_i+0xd6>
 80047e6:	680d      	ldr	r5, [r1, #0]
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	0641      	lsls	r1, r0, #25
 80047ec:	d5f1      	bpl.n	80047d2 <_printf_i+0x8a>
 80047ee:	b22d      	sxth	r5, r5
 80047f0:	e7ef      	b.n	80047d2 <_printf_i+0x8a>
 80047f2:	680d      	ldr	r5, [r1, #0]
 80047f4:	6819      	ldr	r1, [r3, #0]
 80047f6:	1d08      	adds	r0, r1, #4
 80047f8:	6018      	str	r0, [r3, #0]
 80047fa:	062e      	lsls	r6, r5, #24
 80047fc:	d501      	bpl.n	8004802 <_printf_i+0xba>
 80047fe:	680d      	ldr	r5, [r1, #0]
 8004800:	e003      	b.n	800480a <_printf_i+0xc2>
 8004802:	066d      	lsls	r5, r5, #25
 8004804:	d5fb      	bpl.n	80047fe <_printf_i+0xb6>
 8004806:	680d      	ldr	r5, [r1, #0]
 8004808:	b2ad      	uxth	r5, r5
 800480a:	4b56      	ldr	r3, [pc, #344]	; (8004964 <_printf_i+0x21c>)
 800480c:	2708      	movs	r7, #8
 800480e:	9303      	str	r3, [sp, #12]
 8004810:	2a6f      	cmp	r2, #111	; 0x6f
 8004812:	d000      	beq.n	8004816 <_printf_i+0xce>
 8004814:	3702      	adds	r7, #2
 8004816:	0023      	movs	r3, r4
 8004818:	2200      	movs	r2, #0
 800481a:	3343      	adds	r3, #67	; 0x43
 800481c:	701a      	strb	r2, [r3, #0]
 800481e:	6863      	ldr	r3, [r4, #4]
 8004820:	60a3      	str	r3, [r4, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	db03      	blt.n	800482e <_printf_i+0xe6>
 8004826:	2204      	movs	r2, #4
 8004828:	6821      	ldr	r1, [r4, #0]
 800482a:	4391      	bics	r1, r2
 800482c:	6021      	str	r1, [r4, #0]
 800482e:	2d00      	cmp	r5, #0
 8004830:	d102      	bne.n	8004838 <_printf_i+0xf0>
 8004832:	9e04      	ldr	r6, [sp, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00c      	beq.n	8004852 <_printf_i+0x10a>
 8004838:	9e04      	ldr	r6, [sp, #16]
 800483a:	0028      	movs	r0, r5
 800483c:	0039      	movs	r1, r7
 800483e:	f7fb fcfb 	bl	8000238 <__aeabi_uidivmod>
 8004842:	9b03      	ldr	r3, [sp, #12]
 8004844:	3e01      	subs	r6, #1
 8004846:	5c5b      	ldrb	r3, [r3, r1]
 8004848:	7033      	strb	r3, [r6, #0]
 800484a:	002b      	movs	r3, r5
 800484c:	0005      	movs	r5, r0
 800484e:	429f      	cmp	r7, r3
 8004850:	d9f3      	bls.n	800483a <_printf_i+0xf2>
 8004852:	2f08      	cmp	r7, #8
 8004854:	d109      	bne.n	800486a <_printf_i+0x122>
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	07db      	lsls	r3, r3, #31
 800485a:	d506      	bpl.n	800486a <_printf_i+0x122>
 800485c:	6863      	ldr	r3, [r4, #4]
 800485e:	6922      	ldr	r2, [r4, #16]
 8004860:	4293      	cmp	r3, r2
 8004862:	dc02      	bgt.n	800486a <_printf_i+0x122>
 8004864:	2330      	movs	r3, #48	; 0x30
 8004866:	3e01      	subs	r6, #1
 8004868:	7033      	strb	r3, [r6, #0]
 800486a:	9b04      	ldr	r3, [sp, #16]
 800486c:	1b9b      	subs	r3, r3, r6
 800486e:	6123      	str	r3, [r4, #16]
 8004870:	9b07      	ldr	r3, [sp, #28]
 8004872:	0021      	movs	r1, r4
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	9805      	ldr	r0, [sp, #20]
 8004878:	9b06      	ldr	r3, [sp, #24]
 800487a:	aa09      	add	r2, sp, #36	; 0x24
 800487c:	f7ff fef4 	bl	8004668 <_printf_common>
 8004880:	1c43      	adds	r3, r0, #1
 8004882:	d14c      	bne.n	800491e <_printf_i+0x1d6>
 8004884:	2001      	movs	r0, #1
 8004886:	4240      	negs	r0, r0
 8004888:	b00b      	add	sp, #44	; 0x2c
 800488a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800488c:	3145      	adds	r1, #69	; 0x45
 800488e:	700a      	strb	r2, [r1, #0]
 8004890:	4a34      	ldr	r2, [pc, #208]	; (8004964 <_printf_i+0x21c>)
 8004892:	9203      	str	r2, [sp, #12]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	6821      	ldr	r1, [r4, #0]
 8004898:	ca20      	ldmia	r2!, {r5}
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	0608      	lsls	r0, r1, #24
 800489e:	d516      	bpl.n	80048ce <_printf_i+0x186>
 80048a0:	07cb      	lsls	r3, r1, #31
 80048a2:	d502      	bpl.n	80048aa <_printf_i+0x162>
 80048a4:	2320      	movs	r3, #32
 80048a6:	4319      	orrs	r1, r3
 80048a8:	6021      	str	r1, [r4, #0]
 80048aa:	2710      	movs	r7, #16
 80048ac:	2d00      	cmp	r5, #0
 80048ae:	d1b2      	bne.n	8004816 <_printf_i+0xce>
 80048b0:	2320      	movs	r3, #32
 80048b2:	6822      	ldr	r2, [r4, #0]
 80048b4:	439a      	bics	r2, r3
 80048b6:	6022      	str	r2, [r4, #0]
 80048b8:	e7ad      	b.n	8004816 <_printf_i+0xce>
 80048ba:	2220      	movs	r2, #32
 80048bc:	6809      	ldr	r1, [r1, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	6022      	str	r2, [r4, #0]
 80048c2:	0022      	movs	r2, r4
 80048c4:	2178      	movs	r1, #120	; 0x78
 80048c6:	3245      	adds	r2, #69	; 0x45
 80048c8:	7011      	strb	r1, [r2, #0]
 80048ca:	4a27      	ldr	r2, [pc, #156]	; (8004968 <_printf_i+0x220>)
 80048cc:	e7e1      	b.n	8004892 <_printf_i+0x14a>
 80048ce:	0648      	lsls	r0, r1, #25
 80048d0:	d5e6      	bpl.n	80048a0 <_printf_i+0x158>
 80048d2:	b2ad      	uxth	r5, r5
 80048d4:	e7e4      	b.n	80048a0 <_printf_i+0x158>
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	680d      	ldr	r5, [r1, #0]
 80048da:	1d10      	adds	r0, r2, #4
 80048dc:	6949      	ldr	r1, [r1, #20]
 80048de:	6018      	str	r0, [r3, #0]
 80048e0:	6813      	ldr	r3, [r2, #0]
 80048e2:	062e      	lsls	r6, r5, #24
 80048e4:	d501      	bpl.n	80048ea <_printf_i+0x1a2>
 80048e6:	6019      	str	r1, [r3, #0]
 80048e8:	e002      	b.n	80048f0 <_printf_i+0x1a8>
 80048ea:	066d      	lsls	r5, r5, #25
 80048ec:	d5fb      	bpl.n	80048e6 <_printf_i+0x19e>
 80048ee:	8019      	strh	r1, [r3, #0]
 80048f0:	2300      	movs	r3, #0
 80048f2:	9e04      	ldr	r6, [sp, #16]
 80048f4:	6123      	str	r3, [r4, #16]
 80048f6:	e7bb      	b.n	8004870 <_printf_i+0x128>
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	1d11      	adds	r1, r2, #4
 80048fc:	6019      	str	r1, [r3, #0]
 80048fe:	6816      	ldr	r6, [r2, #0]
 8004900:	2100      	movs	r1, #0
 8004902:	0030      	movs	r0, r6
 8004904:	6862      	ldr	r2, [r4, #4]
 8004906:	f000 f831 	bl	800496c <memchr>
 800490a:	2800      	cmp	r0, #0
 800490c:	d001      	beq.n	8004912 <_printf_i+0x1ca>
 800490e:	1b80      	subs	r0, r0, r6
 8004910:	6060      	str	r0, [r4, #4]
 8004912:	6863      	ldr	r3, [r4, #4]
 8004914:	6123      	str	r3, [r4, #16]
 8004916:	2300      	movs	r3, #0
 8004918:	9a04      	ldr	r2, [sp, #16]
 800491a:	7013      	strb	r3, [r2, #0]
 800491c:	e7a8      	b.n	8004870 <_printf_i+0x128>
 800491e:	6923      	ldr	r3, [r4, #16]
 8004920:	0032      	movs	r2, r6
 8004922:	9906      	ldr	r1, [sp, #24]
 8004924:	9805      	ldr	r0, [sp, #20]
 8004926:	9d07      	ldr	r5, [sp, #28]
 8004928:	47a8      	blx	r5
 800492a:	1c43      	adds	r3, r0, #1
 800492c:	d0aa      	beq.n	8004884 <_printf_i+0x13c>
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	079b      	lsls	r3, r3, #30
 8004932:	d415      	bmi.n	8004960 <_printf_i+0x218>
 8004934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004936:	68e0      	ldr	r0, [r4, #12]
 8004938:	4298      	cmp	r0, r3
 800493a:	daa5      	bge.n	8004888 <_printf_i+0x140>
 800493c:	0018      	movs	r0, r3
 800493e:	e7a3      	b.n	8004888 <_printf_i+0x140>
 8004940:	0022      	movs	r2, r4
 8004942:	2301      	movs	r3, #1
 8004944:	9906      	ldr	r1, [sp, #24]
 8004946:	9805      	ldr	r0, [sp, #20]
 8004948:	9e07      	ldr	r6, [sp, #28]
 800494a:	3219      	adds	r2, #25
 800494c:	47b0      	blx	r6
 800494e:	1c43      	adds	r3, r0, #1
 8004950:	d098      	beq.n	8004884 <_printf_i+0x13c>
 8004952:	3501      	adds	r5, #1
 8004954:	68e3      	ldr	r3, [r4, #12]
 8004956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004958:	1a9b      	subs	r3, r3, r2
 800495a:	42ab      	cmp	r3, r5
 800495c:	dcf0      	bgt.n	8004940 <_printf_i+0x1f8>
 800495e:	e7e9      	b.n	8004934 <_printf_i+0x1ec>
 8004960:	2500      	movs	r5, #0
 8004962:	e7f7      	b.n	8004954 <_printf_i+0x20c>
 8004964:	08004d71 	.word	0x08004d71
 8004968:	08004d82 	.word	0x08004d82

0800496c <memchr>:
 800496c:	b2c9      	uxtb	r1, r1
 800496e:	1882      	adds	r2, r0, r2
 8004970:	4290      	cmp	r0, r2
 8004972:	d101      	bne.n	8004978 <memchr+0xc>
 8004974:	2000      	movs	r0, #0
 8004976:	4770      	bx	lr
 8004978:	7803      	ldrb	r3, [r0, #0]
 800497a:	428b      	cmp	r3, r1
 800497c:	d0fb      	beq.n	8004976 <memchr+0xa>
 800497e:	3001      	adds	r0, #1
 8004980:	e7f6      	b.n	8004970 <memchr+0x4>

08004982 <memmove>:
 8004982:	b510      	push	{r4, lr}
 8004984:	4288      	cmp	r0, r1
 8004986:	d902      	bls.n	800498e <memmove+0xc>
 8004988:	188b      	adds	r3, r1, r2
 800498a:	4298      	cmp	r0, r3
 800498c:	d303      	bcc.n	8004996 <memmove+0x14>
 800498e:	2300      	movs	r3, #0
 8004990:	e007      	b.n	80049a2 <memmove+0x20>
 8004992:	5c8b      	ldrb	r3, [r1, r2]
 8004994:	5483      	strb	r3, [r0, r2]
 8004996:	3a01      	subs	r2, #1
 8004998:	d2fb      	bcs.n	8004992 <memmove+0x10>
 800499a:	bd10      	pop	{r4, pc}
 800499c:	5ccc      	ldrb	r4, [r1, r3]
 800499e:	54c4      	strb	r4, [r0, r3]
 80049a0:	3301      	adds	r3, #1
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d1fa      	bne.n	800499c <memmove+0x1a>
 80049a6:	e7f8      	b.n	800499a <memmove+0x18>

080049a8 <_free_r>:
 80049a8:	b570      	push	{r4, r5, r6, lr}
 80049aa:	0005      	movs	r5, r0
 80049ac:	2900      	cmp	r1, #0
 80049ae:	d010      	beq.n	80049d2 <_free_r+0x2a>
 80049b0:	1f0c      	subs	r4, r1, #4
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	da00      	bge.n	80049ba <_free_r+0x12>
 80049b8:	18e4      	adds	r4, r4, r3
 80049ba:	0028      	movs	r0, r5
 80049bc:	f000 f918 	bl	8004bf0 <__malloc_lock>
 80049c0:	4a1d      	ldr	r2, [pc, #116]	; (8004a38 <_free_r+0x90>)
 80049c2:	6813      	ldr	r3, [r2, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d105      	bne.n	80049d4 <_free_r+0x2c>
 80049c8:	6063      	str	r3, [r4, #4]
 80049ca:	6014      	str	r4, [r2, #0]
 80049cc:	0028      	movs	r0, r5
 80049ce:	f000 f917 	bl	8004c00 <__malloc_unlock>
 80049d2:	bd70      	pop	{r4, r5, r6, pc}
 80049d4:	42a3      	cmp	r3, r4
 80049d6:	d908      	bls.n	80049ea <_free_r+0x42>
 80049d8:	6821      	ldr	r1, [r4, #0]
 80049da:	1860      	adds	r0, r4, r1
 80049dc:	4283      	cmp	r3, r0
 80049de:	d1f3      	bne.n	80049c8 <_free_r+0x20>
 80049e0:	6818      	ldr	r0, [r3, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	1841      	adds	r1, r0, r1
 80049e6:	6021      	str	r1, [r4, #0]
 80049e8:	e7ee      	b.n	80049c8 <_free_r+0x20>
 80049ea:	001a      	movs	r2, r3
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <_free_r+0x4e>
 80049f2:	42a3      	cmp	r3, r4
 80049f4:	d9f9      	bls.n	80049ea <_free_r+0x42>
 80049f6:	6811      	ldr	r1, [r2, #0]
 80049f8:	1850      	adds	r0, r2, r1
 80049fa:	42a0      	cmp	r0, r4
 80049fc:	d10b      	bne.n	8004a16 <_free_r+0x6e>
 80049fe:	6820      	ldr	r0, [r4, #0]
 8004a00:	1809      	adds	r1, r1, r0
 8004a02:	1850      	adds	r0, r2, r1
 8004a04:	6011      	str	r1, [r2, #0]
 8004a06:	4283      	cmp	r3, r0
 8004a08:	d1e0      	bne.n	80049cc <_free_r+0x24>
 8004a0a:	6818      	ldr	r0, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	1841      	adds	r1, r0, r1
 8004a10:	6011      	str	r1, [r2, #0]
 8004a12:	6053      	str	r3, [r2, #4]
 8004a14:	e7da      	b.n	80049cc <_free_r+0x24>
 8004a16:	42a0      	cmp	r0, r4
 8004a18:	d902      	bls.n	8004a20 <_free_r+0x78>
 8004a1a:	230c      	movs	r3, #12
 8004a1c:	602b      	str	r3, [r5, #0]
 8004a1e:	e7d5      	b.n	80049cc <_free_r+0x24>
 8004a20:	6821      	ldr	r1, [r4, #0]
 8004a22:	1860      	adds	r0, r4, r1
 8004a24:	4283      	cmp	r3, r0
 8004a26:	d103      	bne.n	8004a30 <_free_r+0x88>
 8004a28:	6818      	ldr	r0, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	1841      	adds	r1, r0, r1
 8004a2e:	6021      	str	r1, [r4, #0]
 8004a30:	6063      	str	r3, [r4, #4]
 8004a32:	6054      	str	r4, [r2, #4]
 8004a34:	e7ca      	b.n	80049cc <_free_r+0x24>
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	2000110c 	.word	0x2000110c

08004a3c <sbrk_aligned>:
 8004a3c:	b570      	push	{r4, r5, r6, lr}
 8004a3e:	4e0f      	ldr	r6, [pc, #60]	; (8004a7c <sbrk_aligned+0x40>)
 8004a40:	000d      	movs	r5, r1
 8004a42:	6831      	ldr	r1, [r6, #0]
 8004a44:	0004      	movs	r4, r0
 8004a46:	2900      	cmp	r1, #0
 8004a48:	d102      	bne.n	8004a50 <sbrk_aligned+0x14>
 8004a4a:	f000 f8bf 	bl	8004bcc <_sbrk_r>
 8004a4e:	6030      	str	r0, [r6, #0]
 8004a50:	0029      	movs	r1, r5
 8004a52:	0020      	movs	r0, r4
 8004a54:	f000 f8ba 	bl	8004bcc <_sbrk_r>
 8004a58:	1c43      	adds	r3, r0, #1
 8004a5a:	d00a      	beq.n	8004a72 <sbrk_aligned+0x36>
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	1cc5      	adds	r5, r0, #3
 8004a60:	439d      	bics	r5, r3
 8004a62:	42a8      	cmp	r0, r5
 8004a64:	d007      	beq.n	8004a76 <sbrk_aligned+0x3a>
 8004a66:	1a29      	subs	r1, r5, r0
 8004a68:	0020      	movs	r0, r4
 8004a6a:	f000 f8af 	bl	8004bcc <_sbrk_r>
 8004a6e:	1c43      	adds	r3, r0, #1
 8004a70:	d101      	bne.n	8004a76 <sbrk_aligned+0x3a>
 8004a72:	2501      	movs	r5, #1
 8004a74:	426d      	negs	r5, r5
 8004a76:	0028      	movs	r0, r5
 8004a78:	bd70      	pop	{r4, r5, r6, pc}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	20001110 	.word	0x20001110

08004a80 <_malloc_r>:
 8004a80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a82:	2203      	movs	r2, #3
 8004a84:	1ccb      	adds	r3, r1, #3
 8004a86:	4393      	bics	r3, r2
 8004a88:	3308      	adds	r3, #8
 8004a8a:	0006      	movs	r6, r0
 8004a8c:	001f      	movs	r7, r3
 8004a8e:	2b0c      	cmp	r3, #12
 8004a90:	d232      	bcs.n	8004af8 <_malloc_r+0x78>
 8004a92:	270c      	movs	r7, #12
 8004a94:	42b9      	cmp	r1, r7
 8004a96:	d831      	bhi.n	8004afc <_malloc_r+0x7c>
 8004a98:	0030      	movs	r0, r6
 8004a9a:	f000 f8a9 	bl	8004bf0 <__malloc_lock>
 8004a9e:	4d32      	ldr	r5, [pc, #200]	; (8004b68 <_malloc_r+0xe8>)
 8004aa0:	682b      	ldr	r3, [r5, #0]
 8004aa2:	001c      	movs	r4, r3
 8004aa4:	2c00      	cmp	r4, #0
 8004aa6:	d12e      	bne.n	8004b06 <_malloc_r+0x86>
 8004aa8:	0039      	movs	r1, r7
 8004aaa:	0030      	movs	r0, r6
 8004aac:	f7ff ffc6 	bl	8004a3c <sbrk_aligned>
 8004ab0:	0004      	movs	r4, r0
 8004ab2:	1c43      	adds	r3, r0, #1
 8004ab4:	d11e      	bne.n	8004af4 <_malloc_r+0x74>
 8004ab6:	682c      	ldr	r4, [r5, #0]
 8004ab8:	0025      	movs	r5, r4
 8004aba:	2d00      	cmp	r5, #0
 8004abc:	d14a      	bne.n	8004b54 <_malloc_r+0xd4>
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	0029      	movs	r1, r5
 8004ac2:	18e3      	adds	r3, r4, r3
 8004ac4:	0030      	movs	r0, r6
 8004ac6:	9301      	str	r3, [sp, #4]
 8004ac8:	f000 f880 	bl	8004bcc <_sbrk_r>
 8004acc:	9b01      	ldr	r3, [sp, #4]
 8004ace:	4283      	cmp	r3, r0
 8004ad0:	d143      	bne.n	8004b5a <_malloc_r+0xda>
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	3703      	adds	r7, #3
 8004ad6:	1aff      	subs	r7, r7, r3
 8004ad8:	2303      	movs	r3, #3
 8004ada:	439f      	bics	r7, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	2f0c      	cmp	r7, #12
 8004ae0:	d200      	bcs.n	8004ae4 <_malloc_r+0x64>
 8004ae2:	270c      	movs	r7, #12
 8004ae4:	0039      	movs	r1, r7
 8004ae6:	0030      	movs	r0, r6
 8004ae8:	f7ff ffa8 	bl	8004a3c <sbrk_aligned>
 8004aec:	1c43      	adds	r3, r0, #1
 8004aee:	d034      	beq.n	8004b5a <_malloc_r+0xda>
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	19df      	adds	r7, r3, r7
 8004af4:	6027      	str	r7, [r4, #0]
 8004af6:	e013      	b.n	8004b20 <_malloc_r+0xa0>
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	dacb      	bge.n	8004a94 <_malloc_r+0x14>
 8004afc:	230c      	movs	r3, #12
 8004afe:	2500      	movs	r5, #0
 8004b00:	6033      	str	r3, [r6, #0]
 8004b02:	0028      	movs	r0, r5
 8004b04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b06:	6822      	ldr	r2, [r4, #0]
 8004b08:	1bd1      	subs	r1, r2, r7
 8004b0a:	d420      	bmi.n	8004b4e <_malloc_r+0xce>
 8004b0c:	290b      	cmp	r1, #11
 8004b0e:	d917      	bls.n	8004b40 <_malloc_r+0xc0>
 8004b10:	19e2      	adds	r2, r4, r7
 8004b12:	6027      	str	r7, [r4, #0]
 8004b14:	42a3      	cmp	r3, r4
 8004b16:	d111      	bne.n	8004b3c <_malloc_r+0xbc>
 8004b18:	602a      	str	r2, [r5, #0]
 8004b1a:	6863      	ldr	r3, [r4, #4]
 8004b1c:	6011      	str	r1, [r2, #0]
 8004b1e:	6053      	str	r3, [r2, #4]
 8004b20:	0030      	movs	r0, r6
 8004b22:	0025      	movs	r5, r4
 8004b24:	f000 f86c 	bl	8004c00 <__malloc_unlock>
 8004b28:	2207      	movs	r2, #7
 8004b2a:	350b      	adds	r5, #11
 8004b2c:	1d23      	adds	r3, r4, #4
 8004b2e:	4395      	bics	r5, r2
 8004b30:	1aea      	subs	r2, r5, r3
 8004b32:	429d      	cmp	r5, r3
 8004b34:	d0e5      	beq.n	8004b02 <_malloc_r+0x82>
 8004b36:	1b5b      	subs	r3, r3, r5
 8004b38:	50a3      	str	r3, [r4, r2]
 8004b3a:	e7e2      	b.n	8004b02 <_malloc_r+0x82>
 8004b3c:	605a      	str	r2, [r3, #4]
 8004b3e:	e7ec      	b.n	8004b1a <_malloc_r+0x9a>
 8004b40:	6862      	ldr	r2, [r4, #4]
 8004b42:	42a3      	cmp	r3, r4
 8004b44:	d101      	bne.n	8004b4a <_malloc_r+0xca>
 8004b46:	602a      	str	r2, [r5, #0]
 8004b48:	e7ea      	b.n	8004b20 <_malloc_r+0xa0>
 8004b4a:	605a      	str	r2, [r3, #4]
 8004b4c:	e7e8      	b.n	8004b20 <_malloc_r+0xa0>
 8004b4e:	0023      	movs	r3, r4
 8004b50:	6864      	ldr	r4, [r4, #4]
 8004b52:	e7a7      	b.n	8004aa4 <_malloc_r+0x24>
 8004b54:	002c      	movs	r4, r5
 8004b56:	686d      	ldr	r5, [r5, #4]
 8004b58:	e7af      	b.n	8004aba <_malloc_r+0x3a>
 8004b5a:	230c      	movs	r3, #12
 8004b5c:	0030      	movs	r0, r6
 8004b5e:	6033      	str	r3, [r6, #0]
 8004b60:	f000 f84e 	bl	8004c00 <__malloc_unlock>
 8004b64:	e7cd      	b.n	8004b02 <_malloc_r+0x82>
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	2000110c 	.word	0x2000110c

08004b6c <_realloc_r>:
 8004b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b6e:	0007      	movs	r7, r0
 8004b70:	000e      	movs	r6, r1
 8004b72:	0014      	movs	r4, r2
 8004b74:	2900      	cmp	r1, #0
 8004b76:	d105      	bne.n	8004b84 <_realloc_r+0x18>
 8004b78:	0011      	movs	r1, r2
 8004b7a:	f7ff ff81 	bl	8004a80 <_malloc_r>
 8004b7e:	0005      	movs	r5, r0
 8004b80:	0028      	movs	r0, r5
 8004b82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b84:	2a00      	cmp	r2, #0
 8004b86:	d103      	bne.n	8004b90 <_realloc_r+0x24>
 8004b88:	f7ff ff0e 	bl	80049a8 <_free_r>
 8004b8c:	0025      	movs	r5, r4
 8004b8e:	e7f7      	b.n	8004b80 <_realloc_r+0x14>
 8004b90:	f000 f83e 	bl	8004c10 <_malloc_usable_size_r>
 8004b94:	9001      	str	r0, [sp, #4]
 8004b96:	4284      	cmp	r4, r0
 8004b98:	d803      	bhi.n	8004ba2 <_realloc_r+0x36>
 8004b9a:	0035      	movs	r5, r6
 8004b9c:	0843      	lsrs	r3, r0, #1
 8004b9e:	42a3      	cmp	r3, r4
 8004ba0:	d3ee      	bcc.n	8004b80 <_realloc_r+0x14>
 8004ba2:	0021      	movs	r1, r4
 8004ba4:	0038      	movs	r0, r7
 8004ba6:	f7ff ff6b 	bl	8004a80 <_malloc_r>
 8004baa:	1e05      	subs	r5, r0, #0
 8004bac:	d0e8      	beq.n	8004b80 <_realloc_r+0x14>
 8004bae:	9b01      	ldr	r3, [sp, #4]
 8004bb0:	0022      	movs	r2, r4
 8004bb2:	429c      	cmp	r4, r3
 8004bb4:	d900      	bls.n	8004bb8 <_realloc_r+0x4c>
 8004bb6:	001a      	movs	r2, r3
 8004bb8:	0031      	movs	r1, r6
 8004bba:	0028      	movs	r0, r5
 8004bbc:	f7ff fbc0 	bl	8004340 <memcpy>
 8004bc0:	0031      	movs	r1, r6
 8004bc2:	0038      	movs	r0, r7
 8004bc4:	f7ff fef0 	bl	80049a8 <_free_r>
 8004bc8:	e7da      	b.n	8004b80 <_realloc_r+0x14>
	...

08004bcc <_sbrk_r>:
 8004bcc:	2300      	movs	r3, #0
 8004bce:	b570      	push	{r4, r5, r6, lr}
 8004bd0:	4d06      	ldr	r5, [pc, #24]	; (8004bec <_sbrk_r+0x20>)
 8004bd2:	0004      	movs	r4, r0
 8004bd4:	0008      	movs	r0, r1
 8004bd6:	602b      	str	r3, [r5, #0]
 8004bd8:	f7fb fe08 	bl	80007ec <_sbrk>
 8004bdc:	1c43      	adds	r3, r0, #1
 8004bde:	d103      	bne.n	8004be8 <_sbrk_r+0x1c>
 8004be0:	682b      	ldr	r3, [r5, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d000      	beq.n	8004be8 <_sbrk_r+0x1c>
 8004be6:	6023      	str	r3, [r4, #0]
 8004be8:	bd70      	pop	{r4, r5, r6, pc}
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	20001114 	.word	0x20001114

08004bf0 <__malloc_lock>:
 8004bf0:	b510      	push	{r4, lr}
 8004bf2:	4802      	ldr	r0, [pc, #8]	; (8004bfc <__malloc_lock+0xc>)
 8004bf4:	f000 f814 	bl	8004c20 <__retarget_lock_acquire_recursive>
 8004bf8:	bd10      	pop	{r4, pc}
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	20001118 	.word	0x20001118

08004c00 <__malloc_unlock>:
 8004c00:	b510      	push	{r4, lr}
 8004c02:	4802      	ldr	r0, [pc, #8]	; (8004c0c <__malloc_unlock+0xc>)
 8004c04:	f000 f80d 	bl	8004c22 <__retarget_lock_release_recursive>
 8004c08:	bd10      	pop	{r4, pc}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	20001118 	.word	0x20001118

08004c10 <_malloc_usable_size_r>:
 8004c10:	1f0b      	subs	r3, r1, #4
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	1f18      	subs	r0, r3, #4
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	da01      	bge.n	8004c1e <_malloc_usable_size_r+0xe>
 8004c1a:	580b      	ldr	r3, [r1, r0]
 8004c1c:	18c0      	adds	r0, r0, r3
 8004c1e:	4770      	bx	lr

08004c20 <__retarget_lock_acquire_recursive>:
 8004c20:	4770      	bx	lr

08004c22 <__retarget_lock_release_recursive>:
 8004c22:	4770      	bx	lr

08004c24 <_init>:
 8004c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c26:	46c0      	nop			; (mov r8, r8)
 8004c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c2a:	bc08      	pop	{r3}
 8004c2c:	469e      	mov	lr, r3
 8004c2e:	4770      	bx	lr

08004c30 <_fini>:
 8004c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c32:	46c0      	nop			; (mov r8, r8)
 8004c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c36:	bc08      	pop	{r3}
 8004c38:	469e      	mov	lr, r3
 8004c3a:	4770      	bx	lr
